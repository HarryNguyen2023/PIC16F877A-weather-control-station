

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sun Aug 20 10:35:12 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2,group=3
    36                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
    65                           	psect	text47,local,class=CODE,merge=1,delta=2
    66                           	psect	text48,local,class=CODE,merge=1,delta=2
    67                           	psect	text49,local,class=CODE,merge=1,delta=2
    68                           	psect	text50,local,class=CODE,merge=1,delta=2
    69                           	psect	text51,local,class=CODE,merge=1,delta=2
    70                           	psect	text52,local,class=CODE,merge=1,delta=2
    71                           	psect	text53,local,class=CODE,merge=1,delta=2
    72                           	psect	text54,local,class=CODE,merge=1,delta=2
    73                           	psect	text55,local,class=CODE,merge=1,delta=2
    74                           	psect	text56,local,class=CODE,merge=1,delta=2,group=2
    75                           	psect	text57,local,class=CODE,merge=1,delta=2,group=2
    76                           	psect	text58,local,class=CODE,merge=1,delta=2,group=2
    77                           	psect	text59,local,class=CODE,merge=1,delta=2,group=2
    78                           	psect	text60,local,class=CODE,merge=1,delta=2,group=2
    79                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    80                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    81                           	dabs	1,0x7E,2
    82     0000                     
    83                           ; Version 2.40
    84                           ; Generated 17/11/2021 GMT
    85                           ; 
    86                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    87                           ; All rights reserved.
    88                           ; 
    89                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    90                           ; 
    91                           ; Redistribution and use in source and binary forms, with or without modification, are
    92                           ; permitted provided that the following conditions are met:
    93                           ; 
    94                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    95                           ;        conditions and the following disclaimer.
    96                           ; 
    97                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    98                           ;        of conditions and the following disclaimer in the documentation and/or other
    99                           ;        materials provided with the distribution. Publication is not required when
   100                           ;        this file is used in an embedded application.
   101                           ; 
   102                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   103                           ;        software without specific prior written permission.
   104                           ; 
   105                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   106                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   107                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   108                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   109                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   110                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   111                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   112                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   113                           ; 
   114                           ; 
   115                           ; Code-generator required, PIC16F877A Definitions
   116                           ; 
   117                           ; SFR Addresses
   118     0000                     	;# 
   119     0001                     	;# 
   120     0002                     	;# 
   121     0003                     	;# 
   122     0004                     	;# 
   123     0005                     	;# 
   124     0006                     	;# 
   125     0007                     	;# 
   126     0008                     	;# 
   127     0009                     	;# 
   128     000A                     	;# 
   129     000B                     	;# 
   130     000C                     	;# 
   131     000D                     	;# 
   132     000E                     	;# 
   133     000E                     	;# 
   134     000F                     	;# 
   135     0010                     	;# 
   136     0011                     	;# 
   137     0012                     	;# 
   138     0013                     	;# 
   139     0014                     	;# 
   140     0015                     	;# 
   141     0015                     	;# 
   142     0016                     	;# 
   143     0017                     	;# 
   144     0018                     	;# 
   145     0019                     	;# 
   146     001A                     	;# 
   147     001B                     	;# 
   148     001B                     	;# 
   149     001C                     	;# 
   150     001D                     	;# 
   151     001E                     	;# 
   152     001F                     	;# 
   153     0081                     	;# 
   154     0085                     	;# 
   155     0086                     	;# 
   156     0087                     	;# 
   157     0088                     	;# 
   158     0089                     	;# 
   159     008C                     	;# 
   160     008D                     	;# 
   161     008E                     	;# 
   162     0091                     	;# 
   163     0092                     	;# 
   164     0093                     	;# 
   165     0094                     	;# 
   166     0098                     	;# 
   167     0099                     	;# 
   168     009C                     	;# 
   169     009D                     	;# 
   170     009E                     	;# 
   171     009F                     	;# 
   172     010C                     	;# 
   173     010D                     	;# 
   174     010E                     	;# 
   175     010F                     	;# 
   176     018C                     	;# 
   177     018D                     	;# 
   178     0000                     	;# 
   179     0001                     	;# 
   180     0002                     	;# 
   181     0003                     	;# 
   182     0004                     	;# 
   183     0005                     	;# 
   184     0006                     	;# 
   185     0007                     	;# 
   186     0008                     	;# 
   187     0009                     	;# 
   188     000A                     	;# 
   189     000B                     	;# 
   190     000C                     	;# 
   191     000D                     	;# 
   192     000E                     	;# 
   193     000E                     	;# 
   194     000F                     	;# 
   195     0010                     	;# 
   196     0011                     	;# 
   197     0012                     	;# 
   198     0013                     	;# 
   199     0014                     	;# 
   200     0015                     	;# 
   201     0015                     	;# 
   202     0016                     	;# 
   203     0017                     	;# 
   204     0018                     	;# 
   205     0019                     	;# 
   206     001A                     	;# 
   207     001B                     	;# 
   208     001B                     	;# 
   209     001C                     	;# 
   210     001D                     	;# 
   211     001E                     	;# 
   212     001F                     	;# 
   213     0081                     	;# 
   214     0085                     	;# 
   215     0086                     	;# 
   216     0087                     	;# 
   217     0088                     	;# 
   218     0089                     	;# 
   219     008C                     	;# 
   220     008D                     	;# 
   221     008E                     	;# 
   222     0091                     	;# 
   223     0092                     	;# 
   224     0093                     	;# 
   225     0094                     	;# 
   226     0098                     	;# 
   227     0099                     	;# 
   228     009C                     	;# 
   229     009D                     	;# 
   230     009E                     	;# 
   231     009F                     	;# 
   232     010C                     	;# 
   233     010D                     	;# 
   234     010E                     	;# 
   235     010F                     	;# 
   236     018C                     	;# 
   237     018D                     	;# 
   238     0000                     	;# 
   239     0001                     	;# 
   240     0002                     	;# 
   241     0003                     	;# 
   242     0004                     	;# 
   243     0005                     	;# 
   244     0006                     	;# 
   245     0007                     	;# 
   246     0008                     	;# 
   247     0009                     	;# 
   248     000A                     	;# 
   249     000B                     	;# 
   250     000C                     	;# 
   251     000D                     	;# 
   252     000E                     	;# 
   253     000E                     	;# 
   254     000F                     	;# 
   255     0010                     	;# 
   256     0011                     	;# 
   257     0012                     	;# 
   258     0013                     	;# 
   259     0014                     	;# 
   260     0015                     	;# 
   261     0015                     	;# 
   262     0016                     	;# 
   263     0017                     	;# 
   264     0018                     	;# 
   265     0019                     	;# 
   266     001A                     	;# 
   267     001B                     	;# 
   268     001B                     	;# 
   269     001C                     	;# 
   270     001D                     	;# 
   271     001E                     	;# 
   272     001F                     	;# 
   273     0081                     	;# 
   274     0085                     	;# 
   275     0086                     	;# 
   276     0087                     	;# 
   277     0088                     	;# 
   278     0089                     	;# 
   279     008C                     	;# 
   280     008D                     	;# 
   281     008E                     	;# 
   282     0091                     	;# 
   283     0092                     	;# 
   284     0093                     	;# 
   285     0094                     	;# 
   286     0098                     	;# 
   287     0099                     	;# 
   288     009C                     	;# 
   289     009D                     	;# 
   290     009E                     	;# 
   291     009F                     	;# 
   292     010C                     	;# 
   293     010D                     	;# 
   294     010E                     	;# 
   295     010F                     	;# 
   296     018C                     	;# 
   297     018D                     	;# 
   298     0000                     	;# 
   299     0001                     	;# 
   300     0002                     	;# 
   301     0003                     	;# 
   302     0004                     	;# 
   303     0005                     	;# 
   304     0006                     	;# 
   305     0007                     	;# 
   306     0008                     	;# 
   307     0009                     	;# 
   308     000A                     	;# 
   309     000B                     	;# 
   310     000C                     	;# 
   311     000D                     	;# 
   312     000E                     	;# 
   313     000E                     	;# 
   314     000F                     	;# 
   315     0010                     	;# 
   316     0011                     	;# 
   317     0012                     	;# 
   318     0013                     	;# 
   319     0014                     	;# 
   320     0015                     	;# 
   321     0015                     	;# 
   322     0016                     	;# 
   323     0017                     	;# 
   324     0018                     	;# 
   325     0019                     	;# 
   326     001A                     	;# 
   327     001B                     	;# 
   328     001B                     	;# 
   329     001C                     	;# 
   330     001D                     	;# 
   331     001E                     	;# 
   332     001F                     	;# 
   333     0081                     	;# 
   334     0085                     	;# 
   335     0086                     	;# 
   336     0087                     	;# 
   337     0088                     	;# 
   338     0089                     	;# 
   339     008C                     	;# 
   340     008D                     	;# 
   341     008E                     	;# 
   342     0091                     	;# 
   343     0092                     	;# 
   344     0093                     	;# 
   345     0094                     	;# 
   346     0098                     	;# 
   347     0099                     	;# 
   348     009C                     	;# 
   349     009D                     	;# 
   350     009E                     	;# 
   351     009F                     	;# 
   352     010C                     	;# 
   353     010D                     	;# 
   354     010E                     	;# 
   355     010F                     	;# 
   356     018C                     	;# 
   357     018D                     	;# 
   358     0000                     	;# 
   359     0001                     	;# 
   360     0002                     	;# 
   361     0003                     	;# 
   362     0004                     	;# 
   363     0005                     	;# 
   364     0006                     	;# 
   365     0007                     	;# 
   366     0008                     	;# 
   367     0009                     	;# 
   368     000A                     	;# 
   369     000B                     	;# 
   370     000C                     	;# 
   371     000D                     	;# 
   372     000E                     	;# 
   373     000E                     	;# 
   374     000F                     	;# 
   375     0010                     	;# 
   376     0011                     	;# 
   377     0012                     	;# 
   378     0013                     	;# 
   379     0014                     	;# 
   380     0015                     	;# 
   381     0015                     	;# 
   382     0016                     	;# 
   383     0017                     	;# 
   384     0018                     	;# 
   385     0019                     	;# 
   386     001A                     	;# 
   387     001B                     	;# 
   388     001B                     	;# 
   389     001C                     	;# 
   390     001D                     	;# 
   391     001E                     	;# 
   392     001F                     	;# 
   393     0081                     	;# 
   394     0085                     	;# 
   395     0086                     	;# 
   396     0087                     	;# 
   397     0088                     	;# 
   398     0089                     	;# 
   399     008C                     	;# 
   400     008D                     	;# 
   401     008E                     	;# 
   402     0091                     	;# 
   403     0092                     	;# 
   404     0093                     	;# 
   405     0094                     	;# 
   406     0098                     	;# 
   407     0099                     	;# 
   408     009C                     	;# 
   409     009D                     	;# 
   410     009E                     	;# 
   411     009F                     	;# 
   412     010C                     	;# 
   413     010D                     	;# 
   414     010E                     	;# 
   415     010F                     	;# 
   416     018C                     	;# 
   417     018D                     	;# 
   418     0000                     	;# 
   419     0001                     	;# 
   420     0002                     	;# 
   421     0003                     	;# 
   422     0004                     	;# 
   423     0005                     	;# 
   424     0006                     	;# 
   425     0007                     	;# 
   426     0008                     	;# 
   427     0009                     	;# 
   428     000A                     	;# 
   429     000B                     	;# 
   430     000C                     	;# 
   431     000D                     	;# 
   432     000E                     	;# 
   433     000E                     	;# 
   434     000F                     	;# 
   435     0010                     	;# 
   436     0011                     	;# 
   437     0012                     	;# 
   438     0013                     	;# 
   439     0014                     	;# 
   440     0015                     	;# 
   441     0015                     	;# 
   442     0016                     	;# 
   443     0017                     	;# 
   444     0018                     	;# 
   445     0019                     	;# 
   446     001A                     	;# 
   447     001B                     	;# 
   448     001B                     	;# 
   449     001C                     	;# 
   450     001D                     	;# 
   451     001E                     	;# 
   452     001F                     	;# 
   453     0081                     	;# 
   454     0085                     	;# 
   455     0086                     	;# 
   456     0087                     	;# 
   457     0088                     	;# 
   458     0089                     	;# 
   459     008C                     	;# 
   460     008D                     	;# 
   461     008E                     	;# 
   462     0091                     	;# 
   463     0092                     	;# 
   464     0093                     	;# 
   465     0094                     	;# 
   466     0098                     	;# 
   467     0099                     	;# 
   468     009C                     	;# 
   469     009D                     	;# 
   470     009E                     	;# 
   471     009F                     	;# 
   472     010C                     	;# 
   473     010D                     	;# 
   474     010E                     	;# 
   475     010F                     	;# 
   476     018C                     	;# 
   477     018D                     	;# 
   478     0000                     	;# 
   479     0001                     	;# 
   480     0002                     	;# 
   481     0003                     	;# 
   482     0004                     	;# 
   483     0005                     	;# 
   484     0006                     	;# 
   485     0007                     	;# 
   486     0008                     	;# 
   487     0009                     	;# 
   488     000A                     	;# 
   489     000B                     	;# 
   490     000C                     	;# 
   491     000D                     	;# 
   492     000E                     	;# 
   493     000E                     	;# 
   494     000F                     	;# 
   495     0010                     	;# 
   496     0011                     	;# 
   497     0012                     	;# 
   498     0013                     	;# 
   499     0014                     	;# 
   500     0015                     	;# 
   501     0015                     	;# 
   502     0016                     	;# 
   503     0017                     	;# 
   504     0018                     	;# 
   505     0019                     	;# 
   506     001A                     	;# 
   507     001B                     	;# 
   508     001B                     	;# 
   509     001C                     	;# 
   510     001D                     	;# 
   511     001E                     	;# 
   512     001F                     	;# 
   513     0081                     	;# 
   514     0085                     	;# 
   515     0086                     	;# 
   516     0087                     	;# 
   517     0088                     	;# 
   518     0089                     	;# 
   519     008C                     	;# 
   520     008D                     	;# 
   521     008E                     	;# 
   522     0091                     	;# 
   523     0092                     	;# 
   524     0093                     	;# 
   525     0094                     	;# 
   526     0098                     	;# 
   527     0099                     	;# 
   528     009C                     	;# 
   529     009D                     	;# 
   530     009E                     	;# 
   531     009F                     	;# 
   532     010C                     	;# 
   533     010D                     	;# 
   534     010E                     	;# 
   535     010F                     	;# 
   536     018C                     	;# 
   537     018D                     	;# 
   538                           
   539                           	psect	idataBANK1
   540     0800                     __pidataBANK1:
   541                           
   542                           ;initializer for _targetTemp
   543     0800  3400               	retlw	0
   544     0801  34F0               	retlw	240
   545     0802  3441               	retlw	65
   546                           
   547                           	psect	strings
   548     1000                     __pstrings:
   549     1000                     stringtab:
   550     1000                     __stringtab:
   551                           
   552                           ;	String table - string pointers are 1 byte each
   553     1000  1BFF               	btfsc	btemp+1,7
   554     1001  280A               	ljmp	stringcode
   555     1002  1383               	bcf	3,7
   556     1003  187F               	btfsc	btemp+1,0
   557     1004  1783               	bsf	3,7
   558     1005  0800               	movf	0,w
   559     1006  0A84               	incf	4,f
   560     1007  1903               	skipnz
   561     1008  0AFF               	incf	btemp+1,f
   562     1009  0008               	return
   563     100A                     stringcode:
   564     100A                     stringdir:
   565     100A  3010               	movlw	high stringdir
   566     100B  008A               	movwf	10
   567     100C  0804               	movf	4,w
   568     100D  0A84               	incf	4,f
   569     100E  0782               	addwf	2,f
   570     100F                     __stringbase:
   571     100F  3400               	retlw	0
   572     1010                     __end_of__stringtab:
   573     1010                     __powers_:
   574     1010  3400               	retlw	0
   575     1011  3400               	retlw	0
   576     1012  3480               	retlw	128
   577     1013  343F               	retlw	63
   578     1014  3400               	retlw	0
   579     1015  3400               	retlw	0
   580     1016  3420               	retlw	32
   581     1017  3441               	retlw	65
   582     1018  3400               	retlw	0
   583     1019  3400               	retlw	0
   584     101A  34C8               	retlw	200
   585     101B  3442               	retlw	66
   586     101C  3400               	retlw	0
   587     101D  3400               	retlw	0
   588     101E  347A               	retlw	122
   589     101F  3444               	retlw	68
   590     1020  3400               	retlw	0
   591     1021  3440               	retlw	64
   592     1022  341C               	retlw	28
   593     1023  3446               	retlw	70
   594     1024  3400               	retlw	0
   595     1025  3450               	retlw	80
   596     1026  34C3               	retlw	195
   597     1027  3447               	retlw	71
   598     1028  3400               	retlw	0
   599     1029  3424               	retlw	36
   600     102A  3474               	retlw	116
   601     102B  3449               	retlw	73
   602     102C  3480               	retlw	128
   603     102D  3496               	retlw	150
   604     102E  3418               	retlw	24
   605     102F  344B               	retlw	75
   606     1030  3420               	retlw	32
   607     1031  34BC               	retlw	188
   608     1032  34BE               	retlw	190
   609     1033  344C               	retlw	76
   610     1034  3428               	retlw	40
   611     1035  346B               	retlw	107
   612     1036  346E               	retlw	110
   613     1037  344E               	retlw	78
   614     1038  34F9               	retlw	249
   615     1039  3402               	retlw	2
   616     103A  3415               	retlw	21
   617     103B  3450               	retlw	80
   618     103C  34EC               	retlw	236
   619     103D  3478               	retlw	120
   620     103E  34AD               	retlw	173
   621     103F  3460               	retlw	96
   622     1040  34CA               	retlw	202
   623     1041  34F2               	retlw	242
   624     1042  3449               	retlw	73
   625     1043  3471               	retlw	113
   626     1044                     __end_of__powers_:
   627     1044                     __npowers_:
   628     1044  3400               	retlw	0
   629     1045  3400               	retlw	0
   630     1046  3480               	retlw	128
   631     1047  343F               	retlw	63
   632     1048  34CD               	retlw	205
   633     1049  34CC               	retlw	204
   634     104A  34CC               	retlw	204
   635     104B  343D               	retlw	61
   636     104C  340A               	retlw	10
   637     104D  34D7               	retlw	215
   638     104E  3423               	retlw	35
   639     104F  343C               	retlw	60
   640     1050  346F               	retlw	111
   641     1051  3412               	retlw	18
   642     1052  3483               	retlw	131
   643     1053  343A               	retlw	58
   644     1054  3417               	retlw	23
   645     1055  34B7               	retlw	183
   646     1056  34D1               	retlw	209
   647     1057  3438               	retlw	56
   648     1058  34AC               	retlw	172
   649     1059  34C5               	retlw	197
   650     105A  3427               	retlw	39
   651     105B  3437               	retlw	55
   652     105C  34BD               	retlw	189
   653     105D  3437               	retlw	55
   654     105E  3486               	retlw	134
   655     105F  3435               	retlw	53
   656     1060  3495               	retlw	149
   657     1061  34BF               	retlw	191
   658     1062  34D6               	retlw	214
   659     1063  3433               	retlw	51
   660     1064  3477               	retlw	119
   661     1065  34CC               	retlw	204
   662     1066  342B               	retlw	43
   663     1067  3432               	retlw	50
   664     1068  345F               	retlw	95
   665     1069  3470               	retlw	112
   666     106A  3489               	retlw	137
   667     106B  3430               	retlw	48
   668     106C  34FF               	retlw	255
   669     106D  34E6               	retlw	230
   670     106E  34DB               	retlw	219
   671     106F  342E               	retlw	46
   672     1070  3408               	retlw	8
   673     1071  34E5               	retlw	229
   674     1072  343C               	retlw	60
   675     1073  341E               	retlw	30
   676     1074  3460               	retlw	96
   677     1075  3442               	retlw	66
   678     1076  34A2               	retlw	162
   679     1077  340D               	retlw	13
   680     1078                     __end_of__npowers_:
   681     1078                     _dpowers:
   682     1078  3401               	retlw	1
   683     1079  3400               	retlw	0
   684     107A  3400               	retlw	0
   685     107B  3400               	retlw	0
   686     107C  340A               	retlw	10
   687     107D  3400               	retlw	0
   688     107E  3400               	retlw	0
   689     107F  3400               	retlw	0
   690     1080  3464               	retlw	100
   691     1081  3400               	retlw	0
   692     1082  3400               	retlw	0
   693     1083  3400               	retlw	0
   694     1084  34E8               	retlw	232
   695     1085  3403               	retlw	3
   696     1086  3400               	retlw	0
   697     1087  3400               	retlw	0
   698     1088  3410               	retlw	16
   699     1089  3427               	retlw	39
   700     108A  3400               	retlw	0
   701     108B  3400               	retlw	0
   702     108C  34A0               	retlw	160
   703     108D  3486               	retlw	134
   704     108E  3401               	retlw	1
   705     108F  3400               	retlw	0
   706     1090  3440               	retlw	64
   707     1091  3442               	retlw	66
   708     1092  340F               	retlw	15
   709     1093  3400               	retlw	0
   710     1094  3480               	retlw	128
   711     1095  3496               	retlw	150
   712     1096  3498               	retlw	152
   713     1097  3400               	retlw	0
   714     1098  3400               	retlw	0
   715     1099  34E1               	retlw	225
   716     109A  34F5               	retlw	245
   717     109B  3405               	retlw	5
   718     109C  3400               	retlw	0
   719     109D  34CA               	retlw	202
   720     109E  349A               	retlw	154
   721     109F  343B               	retlw	59
   722     10A0                     __end_of_dpowers:
   723     0015                     _CCPR1L	set	21
   724     0017                     _CCP1CONbits	set	23
   725     001A                     _RCREG	set	26
   726     0019                     _TXREG	set	25
   727     0001                     _TMR0	set	1
   728     0041                     _RD1	set	65
   729     0092                     _TMR2ON	set	146
   730     0090                     _T2CKPS0	set	144
   731     0091                     _T2CKPS1	set	145
   732     00BA                     _CCP1M2	set	186
   733     00BB                     _CCP1M3	set	187
   734     00C1                     _OERR	set	193
   735     005E                     _PEIE	set	94
   736     00C4                     _CREN	set	196
   737     00C6                     _RX9	set	198
   738     00C7                     _SPEN	set	199
   739     005F                     _GIE	set	95
   740     005D                     _TMR0IE	set	93
   741     0043                     _RD3	set	67
   742     0042                     _RD2	set	66
   743     0047                     _RD7	set	71
   744     0046                     _RD6	set	70
   745     0045                     _RD5	set	69
   746     0044                     _RD4	set	68
   747     0031                     _RB1	set	49
   748     0065                     _RCIF	set	101
   749     005A                     _TMR0IF	set	90
   750     0092                     _PR2	set	146
   751     0099                     _SPBRG	set	153
   752     0088                     _TRISD	set	136
   753     0441                     _TRISD1	set	1089
   754     043A                     _TRISC2	set	1082
   755     04C1                     _TRMT	set	1217
   756     0465                     _RCIE	set	1125
   757     04C2                     _BRGH	set	1218
   758     04C5                     _TXEN	set	1221
   759     04C6                     _TX9	set	1222
   760     04C4                     _SYNC	set	1220
   761     043F                     _TRISC7	set	1087
   762     043E                     _TRISC6	set	1086
   763     040D                     _T0CS	set	1037
   764     0408                     _PS0	set	1032
   765     0409                     _PS1	set	1033
   766     040A                     _PS2	set	1034
   767     040B                     _PSA	set	1035
   768     0443                     _TRISD3	set	1091
   769     0442                     _TRISD2	set	1090
   770     0431                     _TRISB1	set	1073
   771     10A0                     STR_3:
   772     10A0  3448               	retlw	72	;'H'
   773     10A1  3475               	retlw	117	;'u'
   774     10A2  346D               	retlw	109	;'m'
   775     10A3  3469               	retlw	105	;'i'
   776     10A4  3464               	retlw	100	;'d'
   777     10A5  343A               	retlw	58	;':'
   778     10A6  3420               	retlw	32	;' '
   779     10A7  3425               	retlw	37	;'%'
   780     10A8  342E               	retlw	46	;'.'
   781     10A9  3432               	retlw	50	;'2'
   782     10AA  3466               	retlw	102	;'f'
   783     10AB  3420               	retlw	32	;' '
   784     10AC  3425               	retlw	37	;'%'
   785     10AD  3425               	retlw	37	;'%'
   786     10AE  3400               	retlw	0
   787     10AF                     STR_2:
   788     10AF  3454               	retlw	84	;'T'
   789     10B0  3465               	retlw	101	;'e'
   790     10B1  346D               	retlw	109	;'m'
   791     10B2  3470               	retlw	112	;'p'
   792     10B3  343A               	retlw	58	;':'
   793     10B4  3420               	retlw	32	;' '
   794     10B5  3425               	retlw	37	;'%'
   795     10B6  342E               	retlw	46	;'.'
   796     10B7  3432               	retlw	50	;'2'
   797     10B8  3466               	retlw	102	;'f'
   798     10B9  3420               	retlw	32	;' '
   799     10BA  3443               	retlw	67	;'C'
   800     10BB  3400               	retlw	0
   801     10BC                     STR_1:
   802     10BC  3445               	retlw	69	;'E'
   803     10BD  3472               	retlw	114	;'r'
   804     10BE  3472               	retlw	114	;'r'
   805     10BF  346F               	retlw	111	;'o'
   806     10C0  3472               	retlw	114	;'r'
   807     10C1  3421               	retlw	33	;'!'
   808     10C2  3420               	retlw	32	;' '
   809     10C3  3443               	retlw	67	;'C'
   810     10C4  3468               	retlw	104	;'h'
   811     10C5  3465               	retlw	101	;'e'
   812     10C6  3463               	retlw	99	;'c'
   813     10C7  346B               	retlw	107	;'k'
   814     10C8  3400               	retlw	0
   815                           
   816                           	psect	cinit
   817     0015                     start_initialization:	
   818                           ; #config settings
   819                           
   820     0015                     __initialization:
   821                           
   822                           ; Initialize objects allocated to BANK1
   823     0015  1683               	bsf	3,5	;RP0=1, select bank1
   824     0016  120A  158A  2000  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   825     001B  00EC               	movwf	__pdataBANK1& (0+127)
   826     001C  120A  158A  2001  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   827     0021  00ED               	movwf	(__pdataBANK1+1)& (0+127)
   828     0022  120A  158A  2002  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   829     0027  00EE               	movwf	(__pdataBANK1+2)& (0+127)
   830                           
   831                           ; Clear objects allocated to BANK3
   832     0028  1783               	bsf	3,7	;select IRP bank2
   833     0029  3090               	movlw	low __pbssBANK3
   834     002A  0084               	movwf	4
   835     002B  30B2               	movlw	low (__pbssBANK3+34)
   836     002C  160A  158A  216E  120A  118A  	fcall	clear_ram0
   837                           
   838                           ; Clear objects allocated to BANK1
   839     0031  1383               	bcf	3,7	;select IRP bank0
   840     0032  30CB               	movlw	low __pbssBANK1
   841     0033  0084               	movwf	4
   842     0034  30EC               	movlw	low (__pbssBANK1+33)
   843     0035  160A  158A  216E   	fcall	clear_ram0
   844                           
   845                           ; Clear objects allocated to BANK0
   846     0038  1283               	bcf	3,5	;RP0=0, select bank0
   847     0039  01ED               	clrf	__pbssBANK0& (0+127)
   848     003A  01EE               	clrf	(__pbssBANK0+1)& (0+127)
   849                           
   850                           ; Clear objects allocated to BITBANK0
   851     003B  01EF               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   852     003C                     end_of_initialization:	
   853                           ;End of C runtime variable initialization code
   854                           
   855     003C                     __end_of__initialization:
   856     003C  0183               	clrf	3
   857     003D  160A  158A  2A56   	ljmp	_main	;jump to C main() function
   858                           
   859                           	psect	bitbssBANK0
   860     0378                     __pbitbssBANK0:
   861     0378                     _send:
   862     0378                     	ds	1
   863                           
   864                           	psect	bssBANK0
   865     006D                     __pbssBANK0:
   866     006D                     _uart_str_idx@PIC16F877A_UART$F291:
   867     006D                     	ds	2
   868                           
   869                           	psect	bssBANK1
   870     00CB                     __pbssBANK1:
   871     00CB                     _fhumid:
   872     00CB                     	ds	3
   873     00CE                     _ftemp:
   874     00CE                     	ds	3
   875     00D1                     _memory:
   876     00D1                     	ds	2
   877     00D3                     _uart_str_idx@PIC16F877A_UART$F165:
   878     00D3                     	ds	2
   879     00D5                     _count_modbus:
   880     00D5                     	ds	2
   881     00D7                     _uart_str_idx:
   882     00D7                     	ds	2
   883     00D9                     _count_motor:
   884     00D9                     	ds	1
   885     00DA                     _rcv_buffer:
   886     00DA                     	ds	9
   887     00E3                     _ModbusFrame:
   888     00E3                     	ds	9
   889                           
   890                           	psect	dataBANK1
   891     00EC                     __pdataBANK1:
   892     00EC                     _targetTemp:
   893     00EC                     	ds	3
   894                           
   895                           	psect	bssBANK3
   896     0190                     __pbssBANK3:
   897     0190                     _str2:
   898     0190                     	ds	17
   899     01A1                     _str1:
   900     01A1                     	ds	17
   901                           
   902                           	psect	clrtext
   903     196E                     clear_ram0:	
   904                           ;	Called with FSR containing the base address, and
   905                           ;	W with the last address+1
   906                           
   907     196E  0064               	clrwdt	;clear the watchdog before getting into this loop
   908     196F                     clrloop0:
   909     196F  0180               	clrf	0	;clear RAM location pointed to by FSR
   910     1970  0A84               	incf	4,f	;increment pointer
   911     1971  0604               	xorwf	4,w	;XOR with final address
   912     1972  1903               	btfsc	3,2	;have we reached the end yet?
   913     1973  3400               	retlw	0	;all done for this memory range, return
   914     1974  0604               	xorwf	4,w	;XOR again to restore value
   915     1975  296F               	goto	clrloop0	;do the next byte
   916                           
   917                           	psect	cstackBANK3
   918     01B2                     __pcstackBANK3:
   919     01B2                     ??_mobusRTUmasterInit:
   920     01B2                     ??_compressorMotor_Init:	
   921                           ; 1 bytes @ 0x0
   922                           
   923     01B2                     ??_UARTTransRcvInit:	
   924                           ; 1 bytes @ 0x0
   925                           
   926     01B2                     ??_LCD_DATA:	
   927                           ; 1 bytes @ 0x0
   928                           
   929     01B2                     ?_timer0SetPrescaler:	
   930                           ; 1 bytes @ 0x0
   931                           
   932     01B2                     ??_PWM_Init:	
   933                           ; 1 bytes @ 0x0
   934                           
   935     01B2                     ??_Timer2_Init:	
   936                           ; 1 bytes @ 0x0
   937                           
   938     01B2                     LCD_DATA@Data:	
   939                           ; 1 bytes @ 0x0
   940                           
   941     01B2                     timer0SetPrescaler@prescaler:	
   942                           ; 1 bytes @ 0x0
   943                           
   944                           
   945                           ; 2 bytes @ 0x0
   946     01B2                     	ds	1
   947     01B3                     ??_LCD_CMD:
   948                           
   949                           ; 1 bytes @ 0x1
   950     01B3                     	ds	1
   951     01B4                     ?_timer0TimerInit:
   952     01B4                     ??_timer0SetPrescaler:	
   953                           ; 1 bytes @ 0x2
   954                           
   955     01B4                     timer0TimerInit@prescaler:	
   956                           ; 1 bytes @ 0x2
   957                           
   958                           
   959                           ; 2 bytes @ 0x2
   960     01B4                     	ds	1
   961     01B5                     LCD_CMD@CMD:
   962                           
   963                           ; 1 bytes @ 0x3
   964     01B5                     	ds	1
   965     01B6                     ??_timer0TimerInit:
   966     01B6                     ??_LCD_Init:	
   967                           ; 1 bytes @ 0x4
   968                           
   969                           
   970                           ; 1 bytes @ 0x4
   971     01B6                     	ds	2
   972     01B8                     ??_main:
   973                           
   974                           	psect	cstackBANK1
   975     00A0                     __pcstackBANK1:	
   976                           ; 1 bytes @ 0x6
   977                           
   978     00A0                     ??_sprintf:
   979     00A0                     ?_proportionalControl:	
   980                           ; 1 bytes @ 0x0
   981                           
   982     00A0                     proportionalControl@Kp:	
   983                           ; 2 bytes @ 0x0
   984                           
   985                           
   986                           ; 3 bytes @ 0x0
   987     00A0                     	ds	3
   988     00A3                     proportionalControl@targetVal:
   989                           
   990                           ; 3 bytes @ 0x3
   991     00A3                     	ds	2
   992     00A5                     _sprintf$1224:
   993                           
   994                           ; 4 bytes @ 0x5
   995     00A5                     	ds	1
   996     00A6                     proportionalControl@nowVal:
   997                           
   998                           ; 3 bytes @ 0x6
   999     00A6                     	ds	3
  1000     00A9                     ?_SpeedControl:
  1001     00A9                     sprintf@ap:	
  1002                           ; 1 bytes @ 0x9
  1003                           
  1004     00A9                     SpeedControl@Kp:	
  1005                           ; 1 bytes @ 0x9
  1006                           
  1007                           
  1008                           ; 3 bytes @ 0x9
  1009     00A9                     	ds	1
  1010     00AA                     sprintf@cp:
  1011                           
  1012                           ; 1 bytes @ 0xA
  1013     00AA                     	ds	1
  1014     00AB                     sprintf@len:
  1015                           
  1016                           ; 2 bytes @ 0xB
  1017     00AB                     	ds	1
  1018     00AC                     SpeedControl@targetVal:
  1019                           
  1020                           ; 3 bytes @ 0xC
  1021     00AC                     	ds	1
  1022     00AD                     sprintf@flag:
  1023                           
  1024                           ; 2 bytes @ 0xD
  1025     00AD                     	ds	2
  1026     00AF                     SpeedControl@nowVal:
  1027     00AF                     sprintf@val:	
  1028                           ; 3 bytes @ 0xF
  1029                           
  1030                           
  1031                           ; 4 bytes @ 0xF
  1032     00AF                     	ds	4
  1033     00B3                     sprintf@eexp:
  1034                           
  1035                           ; 2 bytes @ 0x13
  1036     00B3                     	ds	2
  1037     00B5                     sprintf@tmpval:
  1038                           
  1039                           ; 4 bytes @ 0x15
  1040     00B5                     	ds	4
  1041     00B9                     sprintf@sp:
  1042                           
  1043                           ; 1 bytes @ 0x19
  1044     00B9                     	ds	1
  1045     00BA                     sprintf@fval:
  1046                           
  1047                           ; 4 bytes @ 0x1A
  1048     00BA                     	ds	4
  1049     00BE                     sprintf@prec:
  1050                           
  1051                           ; 2 bytes @ 0x1E
  1052     00BE                     	ds	2
  1053     00C0                     sprintf@c:
  1054                           
  1055                           ; 1 bytes @ 0x20
  1056     00C0                     	ds	1
  1057     00C1                     ??_displayData:
  1058                           
  1059                           ; 1 bytes @ 0x21
  1060     00C1                     	ds	4
  1061     00C5                     ??_ISR:
  1062                           
  1063                           ; 1 bytes @ 0x25
  1064     00C5                     	ds	6
  1065                           
  1066                           	psect	cstackCOMMON
  1067     0070                     __pcstackCOMMON:
  1068     0070                     ?_Master_DataHandling:
  1069     0070                     ?_isdigit:	
  1070                           ; 1 bit 
  1071                           
  1072     0070                     ?___fleq:	
  1073                           ; 1 bit 
  1074                           
  1075     0070                     ?___flge:	
  1076                           ; 1 bit 
  1077                           
  1078     0070                     ?_displayData:	
  1079                           ; 1 bit 
  1080                           
  1081     0070                     ?_LCD_Clear:	
  1082                           ; 1 bytes @ 0x0
  1083                           
  1084     0070                     ?_mobusRTUmasterInit:	
  1085                           ; 1 bytes @ 0x0
  1086                           
  1087     0070                     ?_compressorMotor_Init:	
  1088                           ; 1 bytes @ 0x0
  1089                           
  1090     0070                     ?_LCD_Init:	
  1091                           ; 1 bytes @ 0x0
  1092                           
  1093     0070                     ?_UARTTransRcvInit:	
  1094                           ; 1 bytes @ 0x0
  1095                           
  1096     0070                     ?_UARTsendString:	
  1097                           ; 1 bytes @ 0x0
  1098                           
  1099     0070                     ??_isdigit:	
  1100                           ; 1 bytes @ 0x0
  1101                           
  1102     0070                     ?_ISR:	
  1103                           ; 1 bytes @ 0x0
  1104                           
  1105     0070                     ?_main:	
  1106                           ; 1 bytes @ 0x0
  1107                           
  1108     0070                     ?_LCD_DATA:	
  1109                           ; 1 bytes @ 0x0
  1110                           
  1111     0070                     ?_LCD_CMD:	
  1112                           ; 1 bytes @ 0x0
  1113                           
  1114     0070                     ?_LCD_Write_Char:	
  1115                           ; 1 bytes @ 0x0
  1116                           
  1117     0070                     ?_UARTsendChar:	
  1118                           ; 1 bytes @ 0x0
  1119                           
  1120     0070                     ??_UARTsendChar:	
  1121                           ; 1 bytes @ 0x0
  1122                           
  1123     0070                     ?_UARTrcvChar:	
  1124                           ; 1 bytes @ 0x0
  1125                           
  1126     0070                     ??_UARTrcvChar:	
  1127                           ; 1 bytes @ 0x0
  1128                           
  1129     0070                     ?_PWM_Init:	
  1130                           ; 1 bytes @ 0x0
  1131                           
  1132     0070                     ?_Timer2_Init:	
  1133                           ; 1 bytes @ 0x0
  1134                           
  1135     0070                     ?_DC_Speed:	
  1136                           ; 1 bytes @ 0x0
  1137                           
  1138     0070                     ?___lbmod:	
  1139                           ; 1 bytes @ 0x0
  1140                           
  1141     0070                     ?i1_LCD_DATA:	
  1142                           ; 1 bytes @ 0x0
  1143                           
  1144     0070                     ??i1_LCD_DATA:	
  1145                           ; 1 bytes @ 0x0
  1146                           
  1147     0070                     ?i1_LCD_CMD:	
  1148                           ; 1 bytes @ 0x0
  1149                           
  1150     0070                     ?_CRCcheck:	
  1151                           ; 1 bytes @ 0x0
  1152                           
  1153     0070                     ?__Umul8_16:	
  1154                           ; 2 bytes @ 0x0
  1155                           
  1156     0070                     ?___wmul:	
  1157                           ; 2 bytes @ 0x0
  1158                           
  1159     0070                     ?___awmod:	
  1160                           ; 2 bytes @ 0x0
  1161                           
  1162     0070                     ?___ftpack:	
  1163                           ; 2 bytes @ 0x0
  1164                           
  1165     0070                     ?__tdiv_to_l_:	
  1166                           ; 3 bytes @ 0x0
  1167                           
  1168     0070                     ?__div_to_l_:	
  1169                           ; 4 bytes @ 0x0
  1170                           
  1171     0070                     ?___lldiv:	
  1172                           ; 4 bytes @ 0x0
  1173                           
  1174     0070                     ?___flneg:	
  1175                           ; 4 bytes @ 0x0
  1176                           
  1177     0070                     ?___llmod:	
  1178                           ; 4 bytes @ 0x0
  1179                           
  1180     0070                     ?___xxtofl:	
  1181                           ; 4 bytes @ 0x0
  1182                           
  1183     0070                     CRCcheck@len:	
  1184                           ; 4 bytes @ 0x0
  1185                           
  1186     0070                     UARTsendChar@c:	
  1187                           ; 1 bytes @ 0x0
  1188                           
  1189     0070                     UARTrcvChar@c:	
  1190                           ; 1 bytes @ 0x0
  1191                           
  1192     0070                     ___lbmod@divisor:	
  1193                           ; 1 bytes @ 0x0
  1194                           
  1195     0070                     __Umul8_16@multiplicand:	
  1196                           ; 1 bytes @ 0x0
  1197                           
  1198     0070                     _isdigit$961:	
  1199                           ; 1 bytes @ 0x0
  1200                           
  1201     0070                     i1LCD_DATA@Data:	
  1202                           ; 1 bytes @ 0x0
  1203                           
  1204     0070                     DC_Speed@dutyCycle:	
  1205                           ; 1 bytes @ 0x0
  1206                           
  1207     0070                     ___wmul@multiplier:	
  1208                           ; 2 bytes @ 0x0
  1209                           
  1210     0070                     ___awmod@divisor:	
  1211                           ; 2 bytes @ 0x0
  1212                           
  1213     0070                     ___ftpack@arg:	
  1214                           ; 2 bytes @ 0x0
  1215                           
  1216     0070                     __tdiv_to_l_@f1:	
  1217                           ; 3 bytes @ 0x0
  1218                           
  1219     0070                     ___lldiv@divisor:	
  1220                           ; 3 bytes @ 0x0
  1221                           
  1222     0070                     __div_to_l_@f1:	
  1223                           ; 4 bytes @ 0x0
  1224                           
  1225     0070                     ___fleq@ff1:	
  1226                           ; 4 bytes @ 0x0
  1227                           
  1228     0070                     ___flge@ff1:	
  1229                           ; 4 bytes @ 0x0
  1230                           
  1231     0070                     ___flneg@f1:	
  1232                           ; 4 bytes @ 0x0
  1233                           
  1234     0070                     ___llmod@divisor:	
  1235                           ; 4 bytes @ 0x0
  1236                           
  1237     0070                     ___xxtofl@val:	
  1238                           ; 4 bytes @ 0x0
  1239                           
  1240                           
  1241                           ; 4 bytes @ 0x0
  1242     0070                     	ds	1
  1243     0071                     ??_UARTsendString:
  1244     0071                     ??_LCD_Write_Char:	
  1245                           ; 1 bytes @ 0x1
  1246                           
  1247     0071                     ??___lbmod:	
  1248                           ; 1 bytes @ 0x1
  1249                           
  1250     0071                     ??i1_LCD_CMD:	
  1251                           ; 1 bytes @ 0x1
  1252                           
  1253     0071                     ?_UARTrcvString:	
  1254                           ; 1 bytes @ 0x1
  1255                           
  1256     0071                     isdigit@c:	
  1257                           ; 2 bytes @ 0x1
  1258                           
  1259     0071                     UARTrcvString@length:	
  1260                           ; 1 bytes @ 0x1
  1261                           
  1262                           
  1263                           ; 2 bytes @ 0x1
  1264     0071                     	ds	1
  1265     0072                     ??_CRCcheck:
  1266     0072                     ??__Umul8_16:	
  1267                           ; 1 bytes @ 0x2
  1268                           
  1269     0072                     ??_DC_Speed:	
  1270                           ; 1 bytes @ 0x2
  1271                           
  1272     0072                     UARTsendString@i:	
  1273                           ; 1 bytes @ 0x2
  1274                           
  1275     0072                     ___wmul@multiplicand:	
  1276                           ; 2 bytes @ 0x2
  1277                           
  1278     0072                     ___awmod@dividend:	
  1279                           ; 2 bytes @ 0x2
  1280                           
  1281                           
  1282                           ; 2 bytes @ 0x2
  1283     0072                     	ds	1
  1284     0073                     ??_UARTrcvString:
  1285     0073                     LCD_Write_Char@Low4:	
  1286                           ; 1 bytes @ 0x3
  1287                           
  1288     0073                     ___ftpack@exp:	
  1289                           ; 1 bytes @ 0x3
  1290                           
  1291     0073                     ___lbmod@dividend:	
  1292                           ; 1 bytes @ 0x3
  1293                           
  1294     0073                     i1LCD_CMD@CMD:	
  1295                           ; 1 bytes @ 0x3
  1296                           
  1297     0073                     __tdiv_to_l_@f2:	
  1298                           ; 1 bytes @ 0x3
  1299                           
  1300                           
  1301                           ; 3 bytes @ 0x3
  1302     0073                     	ds	1
  1303     0074                     ??_LCD_Clear:
  1304     0074                     ?_LCD_Set_Cursor:	
  1305                           ; 1 bytes @ 0x4
  1306                           
  1307     0074                     ??___wmul:	
  1308                           ; 1 bytes @ 0x4
  1309                           
  1310     0074                     ??___awmod:	
  1311                           ; 1 bytes @ 0x4
  1312                           
  1313     0074                     ??___flneg:	
  1314                           ; 1 bytes @ 0x4
  1315                           
  1316     0074                     ??___xxtofl:	
  1317                           ; 1 bytes @ 0x4
  1318                           
  1319     0074                     LCD_Write_Char@High4:	
  1320                           ; 1 bytes @ 0x4
  1321                           
  1322     0074                     LCD_Set_Cursor@c:	
  1323                           ; 1 bytes @ 0x4
  1324                           
  1325     0074                     UARTsendString@str:	
  1326                           ; 1 bytes @ 0x4
  1327                           
  1328     0074                     ___awmod@counter:	
  1329                           ; 1 bytes @ 0x4
  1330                           
  1331     0074                     ___ftpack@sign:	
  1332                           ; 1 bytes @ 0x4
  1333                           
  1334     0074                     ___lbmod@counter:	
  1335                           ; 1 bytes @ 0x4
  1336                           
  1337     0074                     ___wmul@product:	
  1338                           ; 1 bytes @ 0x4
  1339                           
  1340     0074                     __Umul8_16@product:	
  1341                           ; 2 bytes @ 0x4
  1342                           
  1343     0074                     ___lldiv@dividend:	
  1344                           ; 2 bytes @ 0x4
  1345                           
  1346     0074                     __div_to_l_@f2:	
  1347                           ; 4 bytes @ 0x4
  1348                           
  1349     0074                     ___fleq@ff2:	
  1350                           ; 4 bytes @ 0x4
  1351                           
  1352     0074                     ___flge@ff2:	
  1353                           ; 4 bytes @ 0x4
  1354                           
  1355     0074                     ___llmod@dividend:	
  1356                           ; 4 bytes @ 0x4
  1357                           
  1358                           
  1359                           ; 4 bytes @ 0x4
  1360     0074                     	ds	1
  1361     0075                     ??_LCD_Set_Cursor:
  1362     0075                     ??___ftpack:	
  1363                           ; 1 bytes @ 0x5
  1364                           
  1365     0075                     CRCcheck@buf:	
  1366                           ; 1 bytes @ 0x5
  1367                           
  1368     0075                     LCD_Write_Char@Data:	
  1369                           ; 1 bytes @ 0x5
  1370                           
  1371     0075                     UARTrcvString@rcv_buffer:	
  1372                           ; 1 bytes @ 0x5
  1373                           
  1374     0075                     ___awmod@sign:	
  1375                           ; 1 bytes @ 0x5
  1376                           
  1377     0075                     ___lbmod@rem:	
  1378                           ; 1 bytes @ 0x5
  1379                           
  1380                           
  1381                           ; 1 bytes @ 0x5
  1382     0075                     	ds	1
  1383     0076                     ?_LCD_Write_String:
  1384     0076                     ??__tdiv_to_l_:	
  1385                           ; 1 bytes @ 0x6
  1386                           
  1387     0076                     ?___lbdiv:	
  1388                           ; 1 bytes @ 0x6
  1389                           
  1390     0076                     ?___awdiv:	
  1391                           ; 1 bytes @ 0x6
  1392                           
  1393     0076                     LCD_Set_Cursor@r:	
  1394                           ; 2 bytes @ 0x6
  1395                           
  1396     0076                     ___lbdiv@divisor:	
  1397                           ; 1 bytes @ 0x6
  1398                           
  1399     0076                     CRCcheck@pos:	
  1400                           ; 1 bytes @ 0x6
  1401                           
  1402     0076                     LCD_Write_String@str:	
  1403                           ; 2 bytes @ 0x6
  1404                           
  1405     0076                     ___awdiv@divisor:	
  1406                           ; 2 bytes @ 0x6
  1407                           
  1408     0076                     __Umul8_16@word_mpld:	
  1409                           ; 2 bytes @ 0x6
  1410                           
  1411                           
  1412                           ; 2 bytes @ 0x6
  1413     0076                     	ds	1
  1414     0077                     ??___lbdiv:
  1415     0077                     LCD_Set_Cursor@Low4:	
  1416                           ; 1 bytes @ 0x7
  1417                           
  1418     0077                     ___lbdiv@dividend:	
  1419                           ; 1 bytes @ 0x7
  1420                           
  1421                           
  1422                           ; 1 bytes @ 0x7
  1423     0077                     	ds	1
  1424     0078                     ??_LCD_Write_String:
  1425     0078                     ??__div_to_l_:	
  1426                           ; 1 bytes @ 0x8
  1427                           
  1428     0078                     ??___lldiv:	
  1429                           ; 1 bytes @ 0x8
  1430                           
  1431     0078                     ??___fleq:	
  1432                           ; 1 bytes @ 0x8
  1433                           
  1434     0078                     ??___flge:	
  1435                           ; 1 bytes @ 0x8
  1436                           
  1437     0078                     ??___llmod:	
  1438                           ; 1 bytes @ 0x8
  1439                           
  1440     0078                     ?___awtoft:	
  1441                           ; 1 bytes @ 0x8
  1442                           
  1443     0078                     LCD_Set_Cursor@High4:	
  1444                           ; 3 bytes @ 0x8
  1445                           
  1446     0078                     ___lbdiv@counter:	
  1447                           ; 1 bytes @ 0x8
  1448                           
  1449     0078                     __Umul8_16@multiplier:	
  1450                           ; 1 bytes @ 0x8
  1451                           
  1452     0078                     ___xxtofl@sign:	
  1453                           ; 1 bytes @ 0x8
  1454                           
  1455     0078                     CRCcheck@index:	
  1456                           ; 1 bytes @ 0x8
  1457                           
  1458     0078                     ___awdiv@dividend:	
  1459                           ; 2 bytes @ 0x8
  1460                           
  1461     0078                     ___awtoft@c:	
  1462                           ; 2 bytes @ 0x8
  1463                           
  1464                           
  1465                           ; 2 bytes @ 0x8
  1466     0078                     	ds	1
  1467     0079                     LCD_Set_Cursor@Temp:
  1468     0079                     ___lbdiv@quotient:	
  1469                           ; 1 bytes @ 0x9
  1470                           
  1471     0079                     ___llmod@counter:	
  1472                           ; 1 bytes @ 0x9
  1473                           
  1474     0079                     ___xxtofl@exp:	
  1475                           ; 1 bytes @ 0x9
  1476                           
  1477     0079                     ___lldiv@quotient:	
  1478                           ; 1 bytes @ 0x9
  1479                           
  1480                           
  1481                           ; 4 bytes @ 0x9
  1482     0079                     	ds	1
  1483     007A                     ??___awdiv:
  1484     007A                     ___awdiv@counter:	
  1485                           ; 1 bytes @ 0xA
  1486                           
  1487     007A                     CRCcheck@crc:	
  1488                           ; 1 bytes @ 0xA
  1489                           
  1490     007A                     ___xxtofl@arg:	
  1491                           ; 2 bytes @ 0xA
  1492                           
  1493                           
  1494                           ; 4 bytes @ 0xA
  1495     007A                     	ds	1
  1496     007B                     ??___awtoft:
  1497     007B                     ___awdiv@sign:	
  1498                           ; 1 bytes @ 0xB
  1499                           
  1500     007B                     ___awtoft@sign:	
  1501                           ; 1 bytes @ 0xB
  1502                           
  1503     007B                     LCD_Write_String@i:	
  1504                           ; 1 bytes @ 0xB
  1505                           
  1506                           
  1507                           ; 2 bytes @ 0xB
  1508     007B                     	ds	1
  1509     007C                     ?_Master_SendCommand:
  1510     007C                     ??_SendErrorFrame:	
  1511                           ; 1 bytes @ 0xC
  1512                           
  1513     007C                     ?_ReceiveData_Check:	
  1514                           ; 1 bytes @ 0xC
  1515                           
  1516     007C                     Master_SendCommand@function:	
  1517                           ; 2 bytes @ 0xC
  1518                           
  1519     007C                     SendErrorFrame@CRC:	
  1520                           ; 1 bytes @ 0xC
  1521                           
  1522     007C                     ___awdiv@quotient:	
  1523                           ; 2 bytes @ 0xC
  1524                           
  1525                           
  1526                           ; 2 bytes @ 0xC
  1527     007C                     	ds	1
  1528     007D                     ??_Master_SendCommand:
  1529     007D                     ___lldiv@counter:	
  1530                           ; 1 bytes @ 0xD
  1531                           
  1532                           
  1533                           ; 1 bytes @ 0xD
  1534     007D                     	ds	1
  1535     007E                     ??_SpeedControl:
  1536     007E                     ??_Master_DataHandling:	
  1537                           ; 1 bytes @ 0xE
  1538                           
  1539     007E                     ??_HCH1000_freqToHumidity:	
  1540                           ; 1 bytes @ 0xE
  1541                           
  1542     007E                     ??_ReceiveData_Check:	
  1543                           ; 1 bytes @ 0xE
  1544                           
  1545     007E                     ??_proportionalControl:	
  1546                           ; 1 bytes @ 0xE
  1547                           
  1548     007E                     ??___ftsub:	
  1549                           ; 1 bytes @ 0xE
  1550                           
  1551     007E                     ??___flsub:	
  1552                           ; 1 bytes @ 0xE
  1553                           
  1554                           
  1555                           	psect	cstackBANK0
  1556     0020                     __pcstackBANK0:	
  1557                           ; 1 bytes @ 0xE
  1558                           
  1559     0020                     ?_SendErrorFrame:
  1560     0020                     ?___flmul:	
  1561                           ; 1 bytes @ 0x0
  1562                           
  1563     0020                     Master_SendCommand@sla_add:	
  1564                           ; 4 bytes @ 0x0
  1565                           
  1566     0020                     ReceiveData_Check@CRCL:	
  1567                           ; 1 bytes @ 0x0
  1568                           
  1569     0020                     SendErrorFrame@Eframe:	
  1570                           ; 1 bytes @ 0x0
  1571                           
  1572     0020                     __div_to_l_@quot:	
  1573                           ; 2 bytes @ 0x0
  1574                           
  1575     0020                     __tdiv_to_l_@quot:	
  1576                           ; 4 bytes @ 0x0
  1577                           
  1578     0020                     ___flmul@b:	
  1579                           ; 4 bytes @ 0x0
  1580                           
  1581                           
  1582                           ; 4 bytes @ 0x0
  1583     0020                     	ds	1
  1584     0021                     ReceiveData_Check@CRCH:
  1585     0021                     Master_SendCommand@CRC:	
  1586                           ; 1 bytes @ 0x1
  1587                           
  1588                           
  1589                           ; 2 bytes @ 0x1
  1590     0021                     	ds	1
  1591     0022                     SendErrorFrame@function:
  1592     0022                     ReceiveData_Check@CRC:	
  1593                           ; 1 bytes @ 0x2
  1594                           
  1595                           
  1596                           ; 2 bytes @ 0x2
  1597     0022                     	ds	2
  1598     0024                     __div_to_l_@cntr:
  1599     0024                     __tdiv_to_l_@cntr:	
  1600                           ; 1 bytes @ 0x4
  1601                           
  1602     0024                     ReceiveData_Check@eframe:	
  1603                           ; 1 bytes @ 0x4
  1604                           
  1605     0024                     ___flmul@a:	
  1606                           ; 2 bytes @ 0x4
  1607                           
  1608                           
  1609                           ; 4 bytes @ 0x4
  1610     0024                     	ds	1
  1611     0025                     __div_to_l_@exp1:
  1612     0025                     __tdiv_to_l_@exp1:	
  1613                           ; 1 bytes @ 0x5
  1614                           
  1615                           
  1616                           ; 1 bytes @ 0x5
  1617     0025                     	ds	1
  1618     0026                     ReceiveData_Check@str:
  1619                           
  1620                           ; 1 bytes @ 0x6
  1621     0026                     	ds	1
  1622     0027                     Master_DataHandling@eframe:
  1623                           
  1624                           ; 2 bytes @ 0x7
  1625     0027                     	ds	1
  1626     0028                     ??___flmul:
  1627                           
  1628                           ; 1 bytes @ 0x8
  1629     0028                     	ds	1
  1630     0029                     Master_DataHandling@buf:
  1631                           
  1632                           ; 1 bytes @ 0x9
  1633     0029                     	ds	4
  1634     002D                     ___flmul@sign:
  1635                           
  1636                           ; 1 bytes @ 0xD
  1637     002D                     	ds	1
  1638     002E                     ___flmul@aexp:
  1639                           
  1640                           ; 1 bytes @ 0xE
  1641     002E                     	ds	1
  1642     002F                     ___flmul@grs:
  1643                           
  1644                           ; 4 bytes @ 0xF
  1645     002F                     	ds	4
  1646     0033                     ___flmul@bexp:
  1647                           
  1648                           ; 1 bytes @ 0x13
  1649     0033                     	ds	1
  1650     0034                     ___flmul@prod:
  1651                           
  1652                           ; 4 bytes @ 0x14
  1653     0034                     	ds	4
  1654     0038                     ___flmul@temp:
  1655                           
  1656                           ; 2 bytes @ 0x18
  1657     0038                     	ds	2
  1658     003A                     ?___ftadd:
  1659     003A                     ?_fround:	
  1660                           ; 3 bytes @ 0x1A
  1661                           
  1662     003A                     ?_scale:	
  1663                           ; 4 bytes @ 0x1A
  1664                           
  1665     003A                     ___ftadd@f1:	
  1666                           ; 4 bytes @ 0x1A
  1667                           
  1668                           
  1669                           ; 3 bytes @ 0x1A
  1670     003A                     	ds	3
  1671     003D                     ___ftadd@f2:
  1672                           
  1673                           ; 3 bytes @ 0x1D
  1674     003D                     	ds	1
  1675     003E                     ??_fround:
  1676     003E                     ??_scale:	
  1677                           ; 1 bytes @ 0x1E
  1678                           
  1679                           
  1680                           ; 1 bytes @ 0x1E
  1681     003E                     	ds	2
  1682     0040                     ??___ftadd:
  1683                           
  1684                           ; 1 bytes @ 0x20
  1685     0040                     	ds	3
  1686     0043                     ___ftadd@sign:
  1687     0043                     _fround$1222:	
  1688                           ; 1 bytes @ 0x23
  1689                           
  1690                           
  1691                           ; 4 bytes @ 0x23
  1692     0043                     	ds	1
  1693     0044                     ___ftadd@exp2:
  1694                           
  1695                           ; 1 bytes @ 0x24
  1696     0044                     	ds	1
  1697     0045                     ___ftadd@exp1:
  1698                           
  1699                           ; 1 bytes @ 0x25
  1700     0045                     	ds	1
  1701     0046                     ?_TC72_toFloat:
  1702     0046                     ?___ftsub:	
  1703                           ; 3 bytes @ 0x26
  1704                           
  1705     0046                     TC72_toFloat@temp:	
  1706                           ; 3 bytes @ 0x26
  1707                           
  1708     0046                     ___ftsub@f2:	
  1709                           ; 2 bytes @ 0x26
  1710                           
  1711                           
  1712                           ; 3 bytes @ 0x26
  1713     0046                     	ds	1
  1714     0047                     _fround$1221:
  1715                           
  1716                           ; 4 bytes @ 0x27
  1717     0047                     	ds	1
  1718     0048                     _scale$1223:
  1719                           
  1720                           ; 4 bytes @ 0x28
  1721     0048                     	ds	1
  1722     0049                     ??_TC72_toFloat:
  1723     0049                     ___ftsub@f1:	
  1724                           ; 1 bytes @ 0x29
  1725                           
  1726                           
  1727                           ; 3 bytes @ 0x29
  1728     0049                     	ds	2
  1729     004B                     fround@prec:
  1730                           
  1731                           ; 1 bytes @ 0x2B
  1732     004B                     	ds	1
  1733     004C                     ?___ftmul:
  1734     004C                     ?___fladd:	
  1735                           ; 3 bytes @ 0x2C
  1736                           
  1737     004C                     scale@scl:	
  1738                           ; 4 bytes @ 0x2C
  1739                           
  1740     004C                     ___ftmul@f1:	
  1741                           ; 1 bytes @ 0x2C
  1742                           
  1743     004C                     ___fladd@b:	
  1744                           ; 3 bytes @ 0x2C
  1745                           
  1746                           
  1747                           ; 4 bytes @ 0x2C
  1748     004C                     	ds	1
  1749     004D                     ?___fltol:
  1750     004D                     TC72_toFloat@result:	
  1751                           ; 4 bytes @ 0x2D
  1752                           
  1753     004D                     ___fltol@f1:	
  1754                           ; 3 bytes @ 0x2D
  1755                           
  1756                           
  1757                           ; 4 bytes @ 0x2D
  1758     004D                     	ds	2
  1759     004F                     ___ftmul@f2:
  1760                           
  1761                           ; 3 bytes @ 0x2F
  1762     004F                     	ds	1
  1763     0050                     TC72_toFloat@count:
  1764     0050                     ___fladd@a:	
  1765                           ; 1 bytes @ 0x30
  1766                           
  1767                           
  1768                           ; 4 bytes @ 0x30
  1769     0050                     	ds	1
  1770     0051                     ??___fltol:
  1771                           
  1772                           ; 1 bytes @ 0x31
  1773     0051                     	ds	1
  1774     0052                     ??___ftmul:
  1775                           
  1776                           ; 1 bytes @ 0x32
  1777     0052                     	ds	2
  1778     0054                     ??___fladd:
  1779                           
  1780                           ; 1 bytes @ 0x34
  1781     0054                     	ds	1
  1782     0055                     ___fltol@sign1:
  1783     0055                     ___ftmul@exp:	
  1784                           ; 1 bytes @ 0x35
  1785                           
  1786                           
  1787                           ; 1 bytes @ 0x35
  1788     0055                     	ds	1
  1789     0056                     ___fltol@exp1:
  1790     0056                     ___ftmul@f3_as_product:	
  1791                           ; 1 bytes @ 0x36
  1792                           
  1793                           
  1794                           ; 3 bytes @ 0x36
  1795     0056                     	ds	3
  1796     0059                     ___ftmul@cntr:
  1797                           
  1798                           ; 1 bytes @ 0x39
  1799     0059                     	ds	1
  1800     005A                     ___ftmul@sign:
  1801                           
  1802                           ; 1 bytes @ 0x3A
  1803     005A                     	ds	1
  1804     005B                     ?___fttol:
  1805     005B                     ___fttol@f1:	
  1806                           ; 4 bytes @ 0x3B
  1807                           
  1808                           
  1809                           ; 3 bytes @ 0x3B
  1810     005B                     	ds	1
  1811     005C                     ___fladd@signs:
  1812                           
  1813                           ; 1 bytes @ 0x3C
  1814     005C                     	ds	1
  1815     005D                     ___fladd@aexp:
  1816                           
  1817                           ; 1 bytes @ 0x3D
  1818     005D                     	ds	1
  1819     005E                     ___fladd@bexp:
  1820                           
  1821                           ; 1 bytes @ 0x3E
  1822     005E                     	ds	1
  1823     005F                     ??___fttol:
  1824     005F                     ___fladd@grs:	
  1825                           ; 1 bytes @ 0x3F
  1826                           
  1827                           
  1828                           ; 1 bytes @ 0x3F
  1829     005F                     	ds	1
  1830     0060                     ?___flsub:
  1831     0060                     ___flsub@a:	
  1832                           ; 4 bytes @ 0x40
  1833                           
  1834                           
  1835                           ; 4 bytes @ 0x40
  1836     0060                     	ds	2
  1837     0062                     ___fttol@sign1:
  1838                           
  1839                           ; 1 bytes @ 0x42
  1840     0062                     	ds	1
  1841     0063                     ___fttol@lval:
  1842                           
  1843                           ; 4 bytes @ 0x43
  1844     0063                     	ds	1
  1845     0064                     ___flsub@b:
  1846                           
  1847                           ; 4 bytes @ 0x44
  1848     0064                     	ds	3
  1849     0067                     ___fttol@exp1:
  1850                           
  1851                           ; 1 bytes @ 0x47
  1852     0067                     	ds	1
  1853     0068                     ?_sprintf:
  1854     0068                     ?_HCH1000_freqToHumidity:	
  1855                           ; 2 bytes @ 0x48
  1856                           
  1857     0068                     sprintf@f:	
  1858                           ; 3 bytes @ 0x48
  1859                           
  1860     0068                     HCH1000_freqToHumidity@freq:	
  1861                           ; 1 bytes @ 0x48
  1862                           
  1863     0068                     proportionalControl@controlSignal:	
  1864                           ; 2 bytes @ 0x48
  1865                           
  1866                           
  1867                           ; 2 bytes @ 0x48
  1868     0068                     	ds	2
  1869     006A                     SpeedControl@PWMval:
  1870                           
  1871                           ; 2 bytes @ 0x4A
  1872     006A                     	ds	3
  1873                           
  1874                           	psect	maintext
  1875     1A56                     __pmaintext:	
  1876 ;;
  1877 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1878 ;;
  1879 ;; *************** function _main *****************
  1880 ;; Defined at:
  1881 ;;		line 64 in file "RS485_Master.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;		None
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;		None
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  1    wreg      void 
  1888 ;; Registers used:
  1889 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1890 ;; Tracked objects:
  1891 ;;		On entry : B00/0
  1892 ;;		On exit  : 300/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1895 ;;      Params:         0       0       0       0       0
  1896 ;;      Locals:         0       0       0       0       0
  1897 ;;      Temps:          0       0       0       0       0
  1898 ;;      Totals:         0       0       0       0       0
  1899 ;;Total ram usage:        0 bytes
  1900 ;; Hardware stack levels required when called: 9
  1901 ;; This function calls:
  1902 ;;		_LCD_Init
  1903 ;;		_compressorMotor_Init
  1904 ;;		_mobusRTUmasterInit
  1905 ;;		_timer0TimerInit
  1906 ;; This function is called by:
  1907 ;;		Startup code after reset
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910                           
  1911     1A56                     _main:	
  1912                           ;psect for function _main
  1913                           
  1914                           
  1915                           ;RS485_Master.c: 66:     TMR0 = 6;
  1916                           
  1917                           ;incstack = 0
  1918 ;; hardware stack exceeded
  1919                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1920     1A56  3006               	movlw	6
  1921     1A57  0081               	movwf	1	;volatile
  1922                           
  1923                           ;RS485_Master.c: 67:     timer0TimerInit(TIMER0_DIV_16);
  1924     1A58  3010               	movlw	16
  1925     1A59  1683               	bsf	3,5	;RP0=1, select bank3
  1926     1A5A  1703               	bsf	3,6	;RP1=1, select bank3
  1927     1A5B  00B4               	movwf	timer0TimerInit@prescaler^(0+384)
  1928     1A5C  3000               	movlw	0
  1929     1A5D  00B5               	movwf	(timer0TimerInit@prescaler^(0+384)+1)
  1930     1A5E  160A  158A  21A6  160A  158A  	fcall	_timer0TimerInit
  1931                           
  1932                           ;RS485_Master.c: 69:     mobusRTUmasterInit();
  1933     1A63  160A  158A  2166  160A  158A  	fcall	_mobusRTUmasterInit
  1934                           
  1935                           ;RS485_Master.c: 71:     compressorMotor_Init();
  1936     1A68  160A  158A  2198  160A  158A  	fcall	_compressorMotor_Init
  1937                           
  1938                           ;RS485_Master.c: 73:     LCD_Init();
  1939     1A6D  160A  118A  2166  160A  158A  	fcall	_LCD_Init
  1940     1A72                     l75:	
  1941                           ;RS485_Master.c: 74:     while(1)
  1942                           
  1943                           
  1944                           ;RS485_Master.c: 75:     {;RS485_Master.c: 76:     }
  1945     1A72  2A72               	goto	l75
  1946     1A73                     __end_of_main:
  1947                           
  1948                           	psect	text1
  1949     19A6                     __ptext1:	
  1950 ;; *************** function _timer0TimerInit *****************
  1951 ;; Defined at:
  1952 ;;		line 63 in file "PIC16F877A_timer0.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;  prescaler       2    2[BANK3 ] unsigned int 
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;		None
  1957 ;; Return value:  Size  Location     Type
  1958 ;;                  1    wreg      void 
  1959 ;; Registers used:
  1960 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1961 ;; Tracked objects:
  1962 ;;		On entry : B00/300
  1963 ;;		On exit  : 900/100
  1964 ;;		Unchanged: 800/0
  1965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1966 ;;      Params:         0       0       0       2       0
  1967 ;;      Locals:         0       0       0       0       0
  1968 ;;      Temps:          0       0       0       0       0
  1969 ;;      Totals:         0       0       0       2       0
  1970 ;;Total ram usage:        2 bytes
  1971 ;; Hardware stack levels used: 1
  1972 ;; Hardware stack levels required when called: 7
  1973 ;; This function calls:
  1974 ;;		_timer0SetPrescaler
  1975 ;; This function is called by:
  1976 ;;		_main
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980     19A6                     _timer0TimerInit:	
  1981                           ;psect for function _timer0TimerInit
  1982                           
  1983                           
  1984                           ;PIC16F877A_timer0.c: 63: void timer0TimerInit(uint16_t prescaler);PIC16F877A_timer0.c: 
      +                          64: {;PIC16F877A_timer0.c: 66:     TMR0 = 0;
  1985                           
  1986                           ;incstack = 0
  1987                           ; Regs used in _timer0TimerInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1988     19A6  1283               	bcf	3,5	;RP0=0, select bank0
  1989     19A7  1303               	bcf	3,6	;RP1=0, select bank0
  1990     19A8  0181               	clrf	1	;volatile
  1991                           
  1992                           ;PIC16F877A_timer0.c: 68:     T0CS = 0;
  1993     19A9  1683               	bsf	3,5	;RP0=1, select bank1
  1994     19AA  1281               	bcf	1,5	;volatile
  1995                           
  1996                           ;PIC16F877A_timer0.c: 70:     PSA = 0;
  1997     19AB  1181               	bcf	1,3	;volatile
  1998                           
  1999                           ;PIC16F877A_timer0.c: 72:     timer0SetPrescaler(prescaler);
  2000     19AC  1703               	bsf	3,6	;RP1=1, select bank3
  2001     19AD  0835               	movf	(timer0TimerInit@prescaler+1)^(0+384),w
  2002     19AE  00B3               	movwf	(timer0SetPrescaler@prescaler+1)^(0+384)
  2003     19AF  0834               	movf	timer0TimerInit@prescaler^(0+384),w
  2004     19B0  00B2               	movwf	timer0SetPrescaler@prescaler^(0+384)
  2005     19B1  160A  158A  268D   	fcall	_timer0SetPrescaler
  2006                           
  2007                           ;PIC16F877A_timer0.c: 74:     TMR0IF = 0;
  2008     19B4  110B               	bcf	11,2	;volatile
  2009                           
  2010                           ;PIC16F877A_timer0.c: 75:     TMR0IE = 1;
  2011     19B5  168B               	bsf	11,5	;volatile
  2012                           
  2013                           ;PIC16F877A_timer0.c: 76:     GIE = 1;
  2014     19B6  178B               	bsf	11,7	;volatile
  2015     19B7  0008               	return
  2016     19B8                     __end_of_timer0TimerInit:
  2017                           
  2018                           	psect	text2
  2019     1E8D                     __ptext2:	
  2020 ;; *************** function _timer0SetPrescaler *****************
  2021 ;; Defined at:
  2022 ;;		line 6 in file "PIC16F877A_timer0.c"
  2023 ;; Parameters:    Size  Location     Type
  2024 ;;  prescaler       2    0[BANK3 ] unsigned int 
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;		None
  2027 ;; Return value:  Size  Location     Type
  2028 ;;                  1    wreg      void 
  2029 ;; Registers used:
  2030 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2031 ;; Tracked objects:
  2032 ;;		On entry : B00/300
  2033 ;;		On exit  : 900/100
  2034 ;;		Unchanged: 800/0
  2035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2036 ;;      Params:         0       0       0       2       0
  2037 ;;      Locals:         0       0       0       0       0
  2038 ;;      Temps:          0       0       0       0       0
  2039 ;;      Totals:         0       0       0       2       0
  2040 ;;Total ram usage:        2 bytes
  2041 ;; Hardware stack levels used: 1
  2042 ;; Hardware stack levels required when called: 6
  2043 ;; This function calls:
  2044 ;;		Nothing
  2045 ;; This function is called by:
  2046 ;;		_timer0TimerInit
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050     1E8D                     _timer0SetPrescaler:	
  2051                           ;psect for function _timer0SetPrescaler
  2052                           
  2053                           
  2054                           ;PIC16F877A_timer0.c: 6: static void timer0SetPrescaler(uint16_t prescaler);PIC16F877A_t
      +                          imer0.c: 7: {;PIC16F877A_timer0.c: 8:     switch(prescaler)
  2055                           
  2056                           ;incstack = 0
  2057                           ; Regs used in _timer0SetPrescaler: [wreg-fsr0h+status,2+status,0]
  2058     1E8D  2EBC               	goto	l4659
  2059     1E8E                     l230:	
  2060                           ;PIC16F877A_timer0.c: 9:     {;PIC16F877A_timer0.c: 10:         case TIMER0_DIV_1:
  2061                           
  2062                           
  2063                           ;PIC16F877A_timer0.c: 11:             PSA = 1;
  2064     1E8E  1303               	bcf	3,6	;RP1=0, select bank1
  2065     1E8F  1581               	bsf	1,3	;volatile
  2066                           
  2067                           ;PIC16F877A_timer0.c: 12:             PS2 = 0;
  2068     1E90  1101               	bcf	1,2	;volatile
  2069                           
  2070                           ;PIC16F877A_timer0.c: 13:             PS1 = 0;
  2071     1E91  1081               	bcf	1,1	;volatile
  2072                           
  2073                           ;PIC16F877A_timer0.c: 14:             PS0 = 0;
  2074     1E92  1001               	bcf	1,0	;volatile
  2075                           
  2076                           ;PIC16F877A_timer0.c: 15:             break;
  2077     1E93  0008               	return
  2078     1E94                     l232:	
  2079                           ;PIC16F877A_timer0.c: 16:         case TIMER0_DIV_2:
  2080                           
  2081                           
  2082                           ;PIC16F877A_timer0.c: 17:             PS2 = 0;
  2083     1E94  1303               	bcf	3,6	;RP1=0, select bank1
  2084     1E95  1101               	bcf	1,2	;volatile
  2085                           
  2086                           ;PIC16F877A_timer0.c: 18:             PS1 = 0;
  2087     1E96  1081               	bcf	1,1	;volatile
  2088                           
  2089                           ;PIC16F877A_timer0.c: 19:             PS0 = 0;
  2090     1E97  1001               	bcf	1,0	;volatile
  2091                           
  2092                           ;PIC16F877A_timer0.c: 20:             break;
  2093     1E98  0008               	return
  2094     1E99                     l233:	
  2095                           ;PIC16F877A_timer0.c: 21:         case TIMER0_DIV_4:
  2096                           
  2097                           
  2098                           ;PIC16F877A_timer0.c: 22:             PS2 = 0;
  2099     1E99  1303               	bcf	3,6	;RP1=0, select bank1
  2100     1E9A  1101               	bcf	1,2	;volatile
  2101                           
  2102                           ;PIC16F877A_timer0.c: 23:             PS1 = 0;
  2103     1E9B  1081               	bcf	1,1	;volatile
  2104                           
  2105                           ;PIC16F877A_timer0.c: 24:             PS0 = 1;
  2106     1E9C  1401               	bsf	1,0	;volatile
  2107                           
  2108                           ;PIC16F877A_timer0.c: 25:             break;
  2109     1E9D  0008               	return
  2110     1E9E                     l234:	
  2111                           ;PIC16F877A_timer0.c: 26:         case TIMER0_DIV_8:
  2112                           
  2113                           
  2114                           ;PIC16F877A_timer0.c: 27:             PS2 = 0;
  2115     1E9E  1303               	bcf	3,6	;RP1=0, select bank1
  2116     1E9F  1101               	bcf	1,2	;volatile
  2117                           
  2118                           ;PIC16F877A_timer0.c: 28:             PS1 = 1;
  2119     1EA0  1481               	bsf	1,1	;volatile
  2120                           
  2121                           ;PIC16F877A_timer0.c: 29:             PS0 = 0;
  2122     1EA1  1001               	bcf	1,0	;volatile
  2123                           
  2124                           ;PIC16F877A_timer0.c: 30:             break;
  2125     1EA2  0008               	return
  2126     1EA3                     l235:	
  2127                           ;PIC16F877A_timer0.c: 31:         case TIMER0_DIV_16:
  2128                           
  2129                           
  2130                           ;PIC16F877A_timer0.c: 32:             PS2 = 0;
  2131     1EA3  1303               	bcf	3,6	;RP1=0, select bank1
  2132     1EA4  1101               	bcf	1,2	;volatile
  2133                           
  2134                           ;PIC16F877A_timer0.c: 33:             PS1 = 1;
  2135     1EA5  1481               	bsf	1,1	;volatile
  2136                           
  2137                           ;PIC16F877A_timer0.c: 34:             PS0 = 1;
  2138     1EA6  1401               	bsf	1,0	;volatile
  2139                           
  2140                           ;PIC16F877A_timer0.c: 35:             break;
  2141     1EA7  0008               	return
  2142     1EA8                     l236:	
  2143                           ;PIC16F877A_timer0.c: 36:         case TIMER0_DIV_32:
  2144                           
  2145                           
  2146                           ;PIC16F877A_timer0.c: 37:             PS2 = 1;
  2147     1EA8  1303               	bcf	3,6	;RP1=0, select bank1
  2148     1EA9  1501               	bsf	1,2	;volatile
  2149                           
  2150                           ;PIC16F877A_timer0.c: 38:             PS1 = 0;
  2151     1EAA  1081               	bcf	1,1	;volatile
  2152                           
  2153                           ;PIC16F877A_timer0.c: 39:             PS0 = 0;
  2154     1EAB  1001               	bcf	1,0	;volatile
  2155                           
  2156                           ;PIC16F877A_timer0.c: 40:             break;
  2157     1EAC  0008               	return
  2158     1EAD                     l237:	
  2159                           ;PIC16F877A_timer0.c: 41:         case TIMER0_DIV_64:
  2160                           
  2161                           
  2162                           ;PIC16F877A_timer0.c: 42:             PS2 = 1;
  2163     1EAD  1303               	bcf	3,6	;RP1=0, select bank1
  2164     1EAE  1501               	bsf	1,2	;volatile
  2165                           
  2166                           ;PIC16F877A_timer0.c: 43:             PS1 = 0;
  2167     1EAF  1081               	bcf	1,1	;volatile
  2168                           
  2169                           ;PIC16F877A_timer0.c: 44:             PS0 = 1;
  2170     1EB0  1401               	bsf	1,0	;volatile
  2171                           
  2172                           ;PIC16F877A_timer0.c: 45:             break;
  2173     1EB1  0008               	return
  2174     1EB2                     l238:	
  2175                           ;PIC16F877A_timer0.c: 46:         case TIMER0_DIV_128:
  2176                           
  2177                           
  2178                           ;PIC16F877A_timer0.c: 47:             PS2 = 1;
  2179     1EB2  1303               	bcf	3,6	;RP1=0, select bank1
  2180     1EB3  1501               	bsf	1,2	;volatile
  2181                           
  2182                           ;PIC16F877A_timer0.c: 48:             PS1 = 1;
  2183     1EB4  1481               	bsf	1,1	;volatile
  2184                           
  2185                           ;PIC16F877A_timer0.c: 49:             PS0 = 0;
  2186     1EB5  1001               	bcf	1,0	;volatile
  2187                           
  2188                           ;PIC16F877A_timer0.c: 50:             break;
  2189     1EB6  0008               	return
  2190     1EB7                     l239:	
  2191                           ;PIC16F877A_timer0.c: 51:         case TIMER0_DIV_256:
  2192                           
  2193                           
  2194                           ;PIC16F877A_timer0.c: 52:             PS2 = 1;
  2195     1EB7  1303               	bcf	3,6	;RP1=0, select bank1
  2196     1EB8  1501               	bsf	1,2	;volatile
  2197                           
  2198                           ;PIC16F877A_timer0.c: 53:             PS1 = 1;
  2199     1EB9  1481               	bsf	1,1	;volatile
  2200                           
  2201                           ;PIC16F877A_timer0.c: 54:             PS0 = 1;
  2202     1EBA  1401               	bsf	1,0	;volatile
  2203                           
  2204                           ;PIC16F877A_timer0.c: 55:             break;
  2205     1EBB  0008               	return
  2206     1EBC                     l4659:
  2207                           
  2208                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  2209                           ; Switch size 1, requested type "simple"
  2210                           ; Number of cases is 2, Range of values is 0 to 1
  2211                           ; switch strategies available:
  2212                           ; Name         Instructions Cycles
  2213                           ; simple_byte            7     4 (average)
  2214                           ; direct_byte           14     8 (fixed)
  2215                           ; jumptable            260     6 (fixed)
  2216                           ;	Chosen strategy is simple_byte
  2217     1EBC  0833               	movf	(timer0SetPrescaler@prescaler+1)^(0+384),w
  2218     1EBD  3A00               	xorlw	0	; case 0
  2219     1EBE  1903               	skipnz
  2220     1EBF  2EC4               	goto	l5003
  2221     1EC0  3A01               	xorlw	1	; case 1
  2222     1EC1  1903               	skipnz
  2223     1EC2  2EDE               	goto	l5005
  2224     1EC3  2EE3               	goto	l240
  2225     1EC4                     l5003:
  2226                           
  2227                           ; Switch size 1, requested type "simple"
  2228                           ; Number of cases is 8, Range of values is 1 to 128
  2229                           ; switch strategies available:
  2230                           ; Name         Instructions Cycles
  2231                           ; simple_byte           25    13 (average)
  2232                           ; jumptable            263     9 (fixed)
  2233                           ;	Chosen strategy is simple_byte
  2234     1EC4  0832               	movf	timer0SetPrescaler@prescaler^(0+384),w
  2235     1EC5  3A01               	xorlw	1	; case 1
  2236     1EC6  1903               	skipnz
  2237     1EC7  2E8E               	goto	l230
  2238     1EC8  3A03               	xorlw	3	; case 2
  2239     1EC9  1903               	skipnz
  2240     1ECA  2E94               	goto	l232
  2241     1ECB  3A06               	xorlw	6	; case 4
  2242     1ECC  1903               	skipnz
  2243     1ECD  2E99               	goto	l233
  2244     1ECE  3A0C               	xorlw	12	; case 8
  2245     1ECF  1903               	skipnz
  2246     1ED0  2E9E               	goto	l234
  2247     1ED1  3A18               	xorlw	24	; case 16
  2248     1ED2  1903               	skipnz
  2249     1ED3  2EA3               	goto	l235
  2250     1ED4  3A30               	xorlw	48	; case 32
  2251     1ED5  1903               	skipnz
  2252     1ED6  2EA8               	goto	l236
  2253     1ED7  3A60               	xorlw	96	; case 64
  2254     1ED8  1903               	skipnz
  2255     1ED9  2EAD               	goto	l237
  2256     1EDA  3AC0               	xorlw	192	; case 128
  2257     1EDB  1903               	skipnz
  2258     1EDC  2EB2               	goto	l238
  2259     1EDD  2EE3               	goto	l240
  2260     1EDE                     l5005:
  2261                           
  2262                           ; Switch size 1, requested type "simple"
  2263                           ; Number of cases is 1, Range of values is 0 to 0
  2264                           ; switch strategies available:
  2265                           ; Name         Instructions Cycles
  2266                           ; simple_byte            4     3 (average)
  2267                           ; direct_byte           11     8 (fixed)
  2268                           ; jumptable            260     6 (fixed)
  2269                           ;	Chosen strategy is simple_byte
  2270     1EDE  0832               	movf	timer0SetPrescaler@prescaler^(0+384),w
  2271     1EDF  3A00               	xorlw	0	; case 0
  2272     1EE0  1903               	skipnz
  2273     1EE1  2EB7               	goto	l239
  2274     1EE2  2EE3               	goto	l240
  2275     1EE3                     l240:
  2276     1EE3  0008               	return
  2277     1EE4                     __end_of_timer0SetPrescaler:
  2278                           
  2279                           	psect	text3
  2280     1966                     __ptext3:	
  2281 ;; *************** function _mobusRTUmasterInit *****************
  2282 ;; Defined at:
  2283 ;;		line 6 in file "Master_ModbusRTU.c"
  2284 ;; Parameters:    Size  Location     Type
  2285 ;;		None
  2286 ;; Auto vars:     Size  Location     Type
  2287 ;;		None
  2288 ;; Return value:  Size  Location     Type
  2289 ;;                  1    wreg      void 
  2290 ;; Registers used:
  2291 ;;		wreg, status,2, status,0, pclath, cstack
  2292 ;; Tracked objects:
  2293 ;;		On entry : 900/100
  2294 ;;		On exit  : B00/100
  2295 ;;		Unchanged: 800/0
  2296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2297 ;;      Params:         0       0       0       0       0
  2298 ;;      Locals:         0       0       0       0       0
  2299 ;;      Temps:          0       0       0       0       0
  2300 ;;      Totals:         0       0       0       0       0
  2301 ;;Total ram usage:        0 bytes
  2302 ;; Hardware stack levels used: 1
  2303 ;; Hardware stack levels required when called: 7
  2304 ;; This function calls:
  2305 ;;		_UARTTransRcvInit
  2306 ;; This function is called by:
  2307 ;;		_main
  2308 ;; This function uses a non-reentrant model
  2309 ;;
  2310                           
  2311     1966                     _mobusRTUmasterInit:	
  2312                           ;psect for function _mobusRTUmasterInit
  2313                           
  2314                           
  2315                           ;Master_ModbusRTU.c: 9:     TRISB1 = 0;
  2316                           
  2317                           ;incstack = 0
  2318                           ; Regs used in _mobusRTUmasterInit: [wreg+status,2+status,0+pclath+cstack]
  2319     1966  1303               	bcf	3,6	;RP1=0, select bank1
  2320     1967  1086               	bcf	6,1	;volatile
  2321                           
  2322                           ;Master_ModbusRTU.c: 10:     RB1 = 0;
  2323     1968  1283               	bcf	3,5	;RP0=0, select bank0
  2324     1969  1086               	bcf	6,1	;volatile
  2325                           
  2326                           ;Master_ModbusRTU.c: 12:     UARTTransRcvInit();
  2327     196A  160A  158A  21B8   	fcall	_UARTTransRcvInit
  2328     196D  0008               	return
  2329     196E                     __end_of_mobusRTUmasterInit:
  2330                           
  2331                           	psect	text4
  2332     19B8                     __ptext4:	
  2333 ;; *************** function _UARTTransRcvInit *****************
  2334 ;; Defined at:
  2335 ;;		line 48 in file "PIC16F877A_UART.c"
  2336 ;; Parameters:    Size  Location     Type
  2337 ;;		None
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;		None
  2340 ;; Return value:  Size  Location     Type
  2341 ;;                  1    wreg      void 
  2342 ;; Registers used:
  2343 ;;		wreg
  2344 ;; Tracked objects:
  2345 ;;		On entry : B00/0
  2346 ;;		On exit  : B00/100
  2347 ;;		Unchanged: 800/0
  2348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2349 ;;      Params:         0       0       0       0       0
  2350 ;;      Locals:         0       0       0       0       0
  2351 ;;      Temps:          0       0       0       0       0
  2352 ;;      Totals:         0       0       0       0       0
  2353 ;;Total ram usage:        0 bytes
  2354 ;; Hardware stack levels used: 1
  2355 ;; Hardware stack levels required when called: 6
  2356 ;; This function calls:
  2357 ;;		Nothing
  2358 ;; This function is called by:
  2359 ;;		_mobusRTUmasterInit
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362                           
  2363     19B8                     _UARTTransRcvInit:	
  2364                           ;psect for function _UARTTransRcvInit
  2365                           
  2366                           
  2367                           ;PIC16F877A_UART.c: 51:     TRISC6 = 1;
  2368                           
  2369                           ;incstack = 0
  2370                           ; Regs used in _UARTTransRcvInit: [wreg]
  2371     19B8  1683               	bsf	3,5	;RP0=1, select bank1
  2372     19B9  1707               	bsf	7,6	;volatile
  2373                           
  2374                           ;PIC16F877A_UART.c: 52:     TRISC7 = 1;
  2375     19BA  1787               	bsf	7,7	;volatile
  2376                           
  2377                           ;PIC16F877A_UART.c: 54:     SPEN = 1;
  2378     19BB  1283               	bcf	3,5	;RP0=0, select bank0
  2379     19BC  1798               	bsf	24,7	;volatile
  2380                           
  2381                           ;PIC16F877A_UART.c: 56:     SYNC = 0;
  2382     19BD  1683               	bsf	3,5	;RP0=1, select bank1
  2383     19BE  1218               	bcf	24,4	;volatile
  2384                           
  2385                           ;PIC16F877A_UART.c: 58:     TX9 = 0;
  2386     19BF  1318               	bcf	24,6	;volatile
  2387                           
  2388                           ;PIC16F877A_UART.c: 59:     RX9 = 0;
  2389     19C0  1283               	bcf	3,5	;RP0=0, select bank0
  2390     19C1  1318               	bcf	24,6	;volatile
  2391                           
  2392                           ;PIC16F877A_UART.c: 61:     TXEN = 1;
  2393     19C2  1683               	bsf	3,5	;RP0=1, select bank1
  2394     19C3  1698               	bsf	24,5	;volatile
  2395                           
  2396                           ;PIC16F877A_UART.c: 62:     CREN = 1;
  2397     19C4  1283               	bcf	3,5	;RP0=0, select bank0
  2398     19C5  1618               	bsf	24,4	;volatile
  2399                           
  2400                           ;PIC16F877A_UART.c: 64:     BRGH = 1;
  2401     19C6  1683               	bsf	3,5	;RP0=1, select bank1
  2402     19C7  1518               	bsf	24,2	;volatile
  2403                           
  2404                           ;PIC16F877A_UART.c: 65:     SPBRG = ((16000000) / 57600) / 16 - 1;
  2405     19C8  3010               	movlw	16
  2406     19C9  0099               	movwf	25	;volatile
  2407                           
  2408                           ;PIC16F877A_UART.c: 67:     RCIE = 1;
  2409     19CA  168C               	bsf	12,5	;volatile
  2410                           
  2411                           ;PIC16F877A_UART.c: 68:     PEIE = 1;
  2412     19CB  170B               	bsf	11,6	;volatile
  2413                           
  2414                           ;PIC16F877A_UART.c: 69:     GIE = 1;
  2415     19CC  178B               	bsf	11,7	;volatile
  2416     19CD  0008               	return
  2417     19CE                     __end_of_UARTTransRcvInit:
  2418                           
  2419                           	psect	text5
  2420     1998                     __ptext5:	
  2421 ;; *************** function _compressorMotor_Init *****************
  2422 ;; Defined at:
  2423 ;;		line 51 in file "Compressor_motor.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;		None
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;		None
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  1    wreg      void 
  2430 ;; Registers used:
  2431 ;;		wreg, status,2, status,0, pclath, cstack
  2432 ;; Tracked objects:
  2433 ;;		On entry : B00/100
  2434 ;;		On exit  : 300/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2437 ;;      Params:         0       0       0       0       0
  2438 ;;      Locals:         0       0       0       0       0
  2439 ;;      Temps:          0       0       0       0       0
  2440 ;;      Totals:         0       0       0       0       0
  2441 ;;Total ram usage:        0 bytes
  2442 ;; Hardware stack levels used: 1
  2443 ;; Hardware stack levels required when called: 7
  2444 ;; This function calls:
  2445 ;;		_PWM_Init
  2446 ;;		_Timer2_Init
  2447 ;; This function is called by:
  2448 ;;		_main
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452     1998                     _compressorMotor_Init:	
  2453                           ;psect for function _compressorMotor_Init
  2454                           
  2455                           
  2456                           ;Compressor_motor.c: 54:     TRISD1 = 0;
  2457                           
  2458                           ;incstack = 0
  2459                           ; Regs used in _compressorMotor_Init: [wreg+status,2+status,0+pclath+cstack]
  2460     1998  1088               	bcf	8,1	;volatile
  2461                           
  2462                           ;Compressor_motor.c: 55:     TRISD2 = 0;
  2463     1999  1108               	bcf	8,2	;volatile
  2464                           
  2465                           ;Compressor_motor.c: 56:     RD1 = 0;
  2466     199A  1283               	bcf	3,5	;RP0=0, select bank0
  2467     199B  1088               	bcf	8,1	;volatile
  2468                           
  2469                           ;Compressor_motor.c: 57:     RD2 = 0;
  2470     199C  1108               	bcf	8,2	;volatile
  2471                           
  2472                           ;Compressor_motor.c: 59:     PWM_Init();
  2473     199D  160A  158A  2149  160A  158A  	fcall	_PWM_Init
  2474                           
  2475                           ;Compressor_motor.c: 60:     Timer2_Init();
  2476     19A2  160A  158A  214F   	fcall	_Timer2_Init
  2477     19A5  0008               	return
  2478     19A6                     __end_of_compressorMotor_Init:
  2479                           
  2480                           	psect	text6
  2481     194F                     __ptext6:	
  2482 ;; *************** function _Timer2_Init *****************
  2483 ;; Defined at:
  2484 ;;		line 19 in file "Compressor_motor.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;		None
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;		None
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      void 
  2491 ;; Registers used:
  2492 ;;		wreg
  2493 ;; Tracked objects:
  2494 ;;		On entry : 300/0
  2495 ;;		On exit  : 300/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2498 ;;      Params:         0       0       0       0       0
  2499 ;;      Locals:         0       0       0       0       0
  2500 ;;      Temps:          0       0       0       0       0
  2501 ;;      Totals:         0       0       0       0       0
  2502 ;;Total ram usage:        0 bytes
  2503 ;; Hardware stack levels used: 1
  2504 ;; Hardware stack levels required when called: 6
  2505 ;; This function calls:
  2506 ;;		Nothing
  2507 ;; This function is called by:
  2508 ;;		_compressorMotor_Init
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512     194F                     _Timer2_Init:	
  2513                           ;psect for function _Timer2_Init
  2514                           
  2515                           
  2516                           ;Compressor_motor.c: 21:     PR2 = (16000000/(16*2000) / 4) - 1;
  2517                           
  2518                           ;incstack = 0
  2519                           ; Regs used in _Timer2_Init: [wreg]
  2520     194F  307C               	movlw	124
  2521     1950  1683               	bsf	3,5	;RP0=1, select bank1
  2522     1951  0092               	movwf	18	;volatile
  2523                           
  2524                           ;Compressor_motor.c: 23:     T2CKPS1 = 1;
  2525     1952  1283               	bcf	3,5	;RP0=0, select bank0
  2526     1953  1492               	bsf	18,1	;volatile
  2527                           
  2528                           ;Compressor_motor.c: 24:     T2CKPS0 = 1;
  2529     1954  1412               	bsf	18,0	;volatile
  2530     1955  0008               	return
  2531     1956                     __end_of_Timer2_Init:
  2532                           
  2533                           	psect	text7
  2534     1949                     __ptext7:	
  2535 ;; *************** function _PWM_Init *****************
  2536 ;; Defined at:
  2537 ;;		line 10 in file "Compressor_motor.c"
  2538 ;; Parameters:    Size  Location     Type
  2539 ;;		None
  2540 ;; Auto vars:     Size  Location     Type
  2541 ;;		None
  2542 ;; Return value:  Size  Location     Type
  2543 ;;                  1    wreg      void 
  2544 ;; Registers used:
  2545 ;;		None
  2546 ;; Tracked objects:
  2547 ;;		On entry : B00/0
  2548 ;;		On exit  : B00/0
  2549 ;;		Unchanged: 800/0
  2550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2551 ;;      Params:         0       0       0       0       0
  2552 ;;      Locals:         0       0       0       0       0
  2553 ;;      Temps:          0       0       0       0       0
  2554 ;;      Totals:         0       0       0       0       0
  2555 ;;Total ram usage:        0 bytes
  2556 ;; Hardware stack levels used: 1
  2557 ;; Hardware stack levels required when called: 6
  2558 ;; This function calls:
  2559 ;;		Nothing
  2560 ;; This function is called by:
  2561 ;;		_compressorMotor_Init
  2562 ;; This function uses a non-reentrant model
  2563 ;;
  2564                           
  2565     1949                     _PWM_Init:	
  2566                           ;psect for function _PWM_Init
  2567                           
  2568                           
  2569                           ;Compressor_motor.c: 12:     TRISC2 = 0;
  2570                           
  2571                           ;incstack = 0
  2572                           ; Regs used in _PWM_Init: []
  2573     1949  1683               	bsf	3,5	;RP0=1, select bank1
  2574     194A  1107               	bcf	7,2	;volatile
  2575                           
  2576                           ;Compressor_motor.c: 14:     CCP1M3 = 1;
  2577     194B  1283               	bcf	3,5	;RP0=0, select bank0
  2578     194C  1597               	bsf	23,3	;volatile
  2579                           
  2580                           ;Compressor_motor.c: 15:     CCP1M2 = 1;
  2581     194D  1517               	bsf	23,2	;volatile
  2582     194E  0008               	return
  2583     194F                     __end_of_PWM_Init:
  2584                           
  2585                           	psect	text8
  2586     1166                     __ptext8:	
  2587 ;; *************** function _LCD_Init *****************
  2588 ;; Defined at:
  2589 ;;		line 47 in file "LCD16x2.c"
  2590 ;; Parameters:    Size  Location     Type
  2591 ;;		None
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;		None
  2594 ;; Return value:  Size  Location     Type
  2595 ;;                  1    wreg      void 
  2596 ;; Registers used:
  2597 ;;		wreg, status,2, status,0, pclath, cstack
  2598 ;; Tracked objects:
  2599 ;;		On entry : 300/0
  2600 ;;		On exit  : 300/0
  2601 ;;		Unchanged: 0/0
  2602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2603 ;;      Params:         0       0       0       0       0
  2604 ;;      Locals:         0       0       0       0       0
  2605 ;;      Temps:          0       0       0       2       0
  2606 ;;      Totals:         0       0       0       2       0
  2607 ;;Total ram usage:        2 bytes
  2608 ;; Hardware stack levels used: 1
  2609 ;; Hardware stack levels required when called: 8
  2610 ;; This function calls:
  2611 ;;		_LCD_CMD
  2612 ;;		_LCD_DATA
  2613 ;; This function is called by:
  2614 ;;		_main
  2615 ;; This function uses a non-reentrant model
  2616 ;;
  2617                           
  2618     1166                     _LCD_Init:	
  2619                           ;psect for function _LCD_Init
  2620                           
  2621                           
  2622                           ;LCD16x2.c: 50:   TRISD = 0x00;
  2623                           
  2624                           ;incstack = 0
  2625 ;; hardware stack exceeded
  2626                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  2627     1166  1683               	bsf	3,5	;RP0=1, select bank1
  2628     1167  0188               	clrf	8	;volatile
  2629                           
  2630                           ;LCD16x2.c: 51:   TRISD2 = 0;
  2631     1168  1108               	bcf	8,2	;volatile
  2632                           
  2633                           ;LCD16x2.c: 52:   TRISD3 = 0;
  2634     1169  1188               	bcf	8,3	;volatile
  2635                           
  2636                           ;LCD16x2.c: 54:   LCD_DATA(0x00);
  2637     116A  3000               	movlw	0
  2638     116B  160A  158A  2388  160A  118A  	fcall	_LCD_DATA
  2639                           
  2640                           ;LCD16x2.c: 55:   _delay((unsigned long)((30)*(16000000/4000.0)));
  2641     1170  309C               	movlw	156
  2642     1171  1683               	bsf	3,5	;RP0=1, select bank3
  2643     1172  1703               	bsf	3,6	;RP1=1, select bank3
  2644     1173  00B7               	movwf	(??_LCD_Init^(0+384)+1)
  2645     1174  30D6               	movlw	214
  2646     1175  00B6               	movwf	??_LCD_Init^(0+384)
  2647     1176                     u7257:
  2648     1176  0BB6               	decfsz	??_LCD_Init^(0+384),f
  2649     1177  2976               	goto	u7257
  2650     1178  0BB7               	decfsz	(??_LCD_Init^(0+384)+1),f
  2651     1179  2976               	goto	u7257
  2652     117A  0000               	nop
  2653                           
  2654                           ;LCD16x2.c: 56:   _delay((unsigned long)((500)*(16000000/4000000.0)));
  2655     117B  3003               	movlw	3
  2656     117C  1683               	bsf	3,5	;RP0=1, select bank3
  2657     117D  1703               	bsf	3,6	;RP1=1, select bank3
  2658     117E  00B7               	movwf	(??_LCD_Init^(0+384)+1)
  2659     117F  3097               	movlw	151
  2660     1180  00B6               	movwf	??_LCD_Init^(0+384)
  2661     1181                     u7267:
  2662     1181  0BB6               	decfsz	??_LCD_Init^(0+384),f
  2663     1182  2981               	goto	u7267
  2664     1183  0BB7               	decfsz	(??_LCD_Init^(0+384)+1),f
  2665     1184  2981               	goto	u7267
  2666                           
  2667                           ;LCD16x2.c: 57:   LCD_CMD(0x03);
  2668     1185  3003               	movlw	3
  2669     1186  160A  158A  2239  160A  118A  	fcall	_LCD_CMD
  2670                           
  2671                           ;LCD16x2.c: 58:   _delay((unsigned long)((5)*(16000000/4000.0)));
  2672     118B  301A               	movlw	26
  2673     118C  1683               	bsf	3,5	;RP0=1, select bank3
  2674     118D  1703               	bsf	3,6	;RP1=1, select bank3
  2675     118E  00B7               	movwf	(??_LCD_Init^(0+384)+1)
  2676     118F  30F7               	movlw	247
  2677     1190  00B6               	movwf	??_LCD_Init^(0+384)
  2678     1191                     u7277:
  2679     1191  0BB6               	decfsz	??_LCD_Init^(0+384),f
  2680     1192  2991               	goto	u7277
  2681     1193  0BB7               	decfsz	(??_LCD_Init^(0+384)+1),f
  2682     1194  2991               	goto	u7277
  2683     1195  2996               	nop2
  2684                           
  2685                           ;LCD16x2.c: 59:   LCD_CMD(0x03);
  2686     1196  3003               	movlw	3
  2687     1197  160A  158A  2239  160A  118A  	fcall	_LCD_CMD
  2688                           
  2689                           ;LCD16x2.c: 60:   _delay((unsigned long)((150)*(16000000/4000000.0)));
  2690     119C  30C7               	movlw	199
  2691     119D  1683               	bsf	3,5	;RP0=1, select bank3
  2692     119E  1703               	bsf	3,6	;RP1=1, select bank3
  2693     119F  00B6               	movwf	??_LCD_Init^(0+384)
  2694     11A0                     u7287:
  2695     11A0  0BB6               	decfsz	??_LCD_Init^(0+384),f
  2696     11A1  29A0               	goto	u7287
  2697                           
  2698                           ;LCD16x2.c: 61:   LCD_CMD(0x03);
  2699     11A2  3003               	movlw	3
  2700     11A3  160A  158A  2239  160A  118A  	fcall	_LCD_CMD
  2701                           
  2702                           ;LCD16x2.c: 62:   LCD_CMD(0x02);
  2703     11A8  3002               	movlw	2
  2704     11A9  160A  158A  2239  160A  118A  	fcall	_LCD_CMD
  2705                           
  2706                           ;LCD16x2.c: 63:   LCD_CMD(0x02);
  2707     11AE  3002               	movlw	2
  2708     11AF  160A  158A  2239  160A  118A  	fcall	_LCD_CMD
  2709                           
  2710                           ;LCD16x2.c: 64:   LCD_CMD(0x08);
  2711     11B4  3008               	movlw	8
  2712     11B5  160A  158A  2239  160A  118A  	fcall	_LCD_CMD
  2713                           
  2714                           ;LCD16x2.c: 65:   LCD_CMD(0x00);
  2715     11BA  3000               	movlw	0
  2716     11BB  160A  158A  2239  160A  118A  	fcall	_LCD_CMD
  2717                           
  2718                           ;LCD16x2.c: 66:   LCD_CMD(0x0C);
  2719     11C0  300C               	movlw	12
  2720     11C1  160A  158A  2239  160A  118A  	fcall	_LCD_CMD
  2721                           
  2722                           ;LCD16x2.c: 67:   LCD_CMD(0x00);
  2723     11C6  3000               	movlw	0
  2724     11C7  160A  158A  2239  160A  118A  	fcall	_LCD_CMD
  2725                           
  2726                           ;LCD16x2.c: 68:   LCD_CMD(0x06);
  2727     11CC  3006               	movlw	6
  2728     11CD  160A  158A  2239   	fcall	_LCD_CMD
  2729     11D0  0008               	return
  2730     11D1                     __end_of_LCD_Init:
  2731                           
  2732                           	psect	text9
  2733     1A39                     __ptext9:	
  2734 ;; *************** function _LCD_CMD *****************
  2735 ;; Defined at:
  2736 ;;		line 31 in file "LCD16x2.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;  CMD             1    wreg     unsigned char 
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;  CMD             1    3[BANK3 ] unsigned char 
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  1    wreg      void 
  2743 ;; Registers used:
  2744 ;;		wreg, status,2, status,0, pclath, cstack
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 300/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2750 ;;      Params:         0       0       0       0       0
  2751 ;;      Locals:         0       0       0       1       0
  2752 ;;      Temps:          0       0       0       2       0
  2753 ;;      Totals:         0       0       0       3       0
  2754 ;;Total ram usage:        3 bytes
  2755 ;; Hardware stack levels used: 1
  2756 ;; Hardware stack levels required when called: 7
  2757 ;; This function calls:
  2758 ;;		_LCD_DATA
  2759 ;; This function is called by:
  2760 ;;		_LCD_Init
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764     1A39                     _LCD_CMD:	
  2765                           ;psect for function _LCD_CMD
  2766                           
  2767                           
  2768                           ;incstack = 0
  2769 ;; hardware stack exceeded
  2770                           ; Regs used in _LCD_CMD: [wreg+status,2+status,0+pclath+cstack]
  2771                           ;LCD_CMD@CMD stored from wreg
  2772     1A39  1683               	bsf	3,5	;RP0=1, select bank3
  2773     1A3A  1703               	bsf	3,6	;RP1=1, select bank3
  2774     1A3B  00B5               	movwf	LCD_CMD@CMD^(0+384)
  2775                           
  2776                           ;LCD16x2.c: 31: static void LCD_CMD(uint8_t CMD);LCD16x2.c: 32: {;LCD16x2.c: 34:   RD2 =
      +                           0;
  2777     1A3C  1283               	bcf	3,5	;RP0=0, select bank0
  2778     1A3D  1303               	bcf	3,6	;RP1=0, select bank0
  2779     1A3E  1108               	bcf	8,2	;volatile
  2780                           
  2781                           ;LCD16x2.c: 36:   LCD_DATA(CMD);
  2782     1A3F  1683               	bsf	3,5	;RP0=1, select bank3
  2783     1A40  1703               	bsf	3,6	;RP1=1, select bank3
  2784     1A41  0835               	movf	LCD_CMD@CMD^(0+384),w
  2785     1A42  160A  158A  2388  160A  158A  	fcall	_LCD_DATA
  2786                           
  2787                           ;LCD16x2.c: 38:   RD3 = 1;
  2788     1A47  1588               	bsf	8,3	;volatile
  2789                           
  2790                           ;LCD16x2.c: 39:   _delay((unsigned long)((500)*(16000000/4000000.0)));
  2791     1A48  3003               	movlw	3
  2792     1A49  1683               	bsf	3,5	;RP0=1, select bank3
  2793     1A4A  1703               	bsf	3,6	;RP1=1, select bank3
  2794     1A4B  00B4               	movwf	(??_LCD_CMD^(0+384)+1)
  2795     1A4C  3097               	movlw	151
  2796     1A4D  00B3               	movwf	??_LCD_CMD^(0+384)
  2797     1A4E                     u7297:
  2798     1A4E  0BB3               	decfsz	??_LCD_CMD^(0+384),f
  2799     1A4F  2A4E               	goto	u7297
  2800     1A50  0BB4               	decfsz	(??_LCD_CMD^(0+384)+1),f
  2801     1A51  2A4E               	goto	u7297
  2802                           
  2803                           ;LCD16x2.c: 40:   RD3 = 0;
  2804     1A52  1283               	bcf	3,5	;RP0=0, select bank0
  2805     1A53  1303               	bcf	3,6	;RP1=0, select bank0
  2806     1A54  1188               	bcf	8,3	;volatile
  2807     1A55  0008               	return
  2808     1A56                     __end_of_LCD_CMD:
  2809                           
  2810                           	psect	text10
  2811     1B88                     __ptext10:	
  2812 ;; *************** function _LCD_DATA *****************
  2813 ;; Defined at:
  2814 ;;		line 9 in file "LCD16x2.c"
  2815 ;; Parameters:    Size  Location     Type
  2816 ;;  Data            1    wreg     unsigned char 
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;  Data            1    0[BANK3 ] unsigned char 
  2819 ;; Return value:  Size  Location     Type
  2820 ;;                  1    wreg      void 
  2821 ;; Registers used:
  2822 ;;		wreg
  2823 ;; Tracked objects:
  2824 ;;		On entry : 100/100
  2825 ;;		On exit  : 300/0
  2826 ;;		Unchanged: 0/0
  2827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2828 ;;      Params:         0       0       0       0       0
  2829 ;;      Locals:         0       0       0       1       0
  2830 ;;      Temps:          0       0       0       0       0
  2831 ;;      Totals:         0       0       0       1       0
  2832 ;;Total ram usage:        1 bytes
  2833 ;; Hardware stack levels used: 1
  2834 ;; Hardware stack levels required when called: 6
  2835 ;; This function calls:
  2836 ;;		Nothing
  2837 ;; This function is called by:
  2838 ;;		_LCD_CMD
  2839 ;;		_LCD_Init
  2840 ;; This function uses a non-reentrant model
  2841 ;;
  2842                           
  2843     1B88                     _LCD_DATA:	
  2844                           ;psect for function _LCD_DATA
  2845                           
  2846                           
  2847                           ;incstack = 0
  2848                           ; Regs used in _LCD_DATA: [wreg]
  2849                           ;LCD_DATA@Data stored from wreg
  2850     1B88  1703               	bsf	3,6	;RP1=1, select bank3
  2851     1B89  00B2               	movwf	LCD_DATA@Data^(0+384)
  2852                           
  2853                           ;LCD16x2.c: 9: static void LCD_DATA(uint8_t Data);LCD16x2.c: 10: {;LCD16x2.c: 11:   if(D
      +                          ata & 1)
  2854     1B8A  1C32               	btfss	LCD_DATA@Data^(0+384),0
  2855     1B8B  2B90               	goto	l167
  2856                           
  2857                           ;LCD16x2.c: 12:     RD4 = 1;
  2858     1B8C  1283               	bcf	3,5	;RP0=0, select bank0
  2859     1B8D  1303               	bcf	3,6	;RP1=0, select bank0
  2860     1B8E  1608               	bsf	8,4	;volatile
  2861     1B8F  2B93               	goto	l168
  2862     1B90                     l167:	
  2863                           ;LCD16x2.c: 13:   else
  2864                           
  2865                           
  2866                           ;LCD16x2.c: 14:     RD4 = 0;
  2867     1B90  1283               	bcf	3,5	;RP0=0, select bank0
  2868     1B91  1303               	bcf	3,6	;RP1=0, select bank0
  2869     1B92  1208               	bcf	8,4	;volatile
  2870     1B93                     l168:
  2871                           
  2872                           ;LCD16x2.c: 15:   if(Data & 2)
  2873     1B93  1683               	bsf	3,5	;RP0=1, select bank3
  2874     1B94  1703               	bsf	3,6	;RP1=1, select bank3
  2875     1B95  1CB2               	btfss	LCD_DATA@Data^(0+384),1
  2876     1B96  2B9B               	goto	l169
  2877                           
  2878                           ;LCD16x2.c: 16:     RD5 = 1;
  2879     1B97  1283               	bcf	3,5	;RP0=0, select bank0
  2880     1B98  1303               	bcf	3,6	;RP1=0, select bank0
  2881     1B99  1688               	bsf	8,5	;volatile
  2882     1B9A  2B9E               	goto	l170
  2883     1B9B                     l169:	
  2884                           ;LCD16x2.c: 17:   else
  2885                           
  2886                           
  2887                           ;LCD16x2.c: 18:     RD5 = 0;
  2888     1B9B  1283               	bcf	3,5	;RP0=0, select bank0
  2889     1B9C  1303               	bcf	3,6	;RP1=0, select bank0
  2890     1B9D  1288               	bcf	8,5	;volatile
  2891     1B9E                     l170:
  2892                           
  2893                           ;LCD16x2.c: 19:   if(Data & 4)
  2894     1B9E  1683               	bsf	3,5	;RP0=1, select bank3
  2895     1B9F  1703               	bsf	3,6	;RP1=1, select bank3
  2896     1BA0  1D32               	btfss	LCD_DATA@Data^(0+384),2
  2897     1BA1  2BA6               	goto	l171
  2898                           
  2899                           ;LCD16x2.c: 20:     RD6 = 1;
  2900     1BA2  1283               	bcf	3,5	;RP0=0, select bank0
  2901     1BA3  1303               	bcf	3,6	;RP1=0, select bank0
  2902     1BA4  1708               	bsf	8,6	;volatile
  2903     1BA5  2BA9               	goto	l172
  2904     1BA6                     l171:	
  2905                           ;LCD16x2.c: 21:   else
  2906                           
  2907                           
  2908                           ;LCD16x2.c: 22:     RD6 = 0;
  2909     1BA6  1283               	bcf	3,5	;RP0=0, select bank0
  2910     1BA7  1303               	bcf	3,6	;RP1=0, select bank0
  2911     1BA8  1308               	bcf	8,6	;volatile
  2912     1BA9                     l172:
  2913                           
  2914                           ;LCD16x2.c: 23:   if(Data & 8)
  2915     1BA9  1683               	bsf	3,5	;RP0=1, select bank3
  2916     1BAA  1703               	bsf	3,6	;RP1=1, select bank3
  2917     1BAB  1DB2               	btfss	LCD_DATA@Data^(0+384),3
  2918     1BAC  2BB1               	goto	l173
  2919                           
  2920                           ;LCD16x2.c: 24:     RD7 = 1;
  2921     1BAD  1283               	bcf	3,5	;RP0=0, select bank0
  2922     1BAE  1303               	bcf	3,6	;RP1=0, select bank0
  2923     1BAF  1788               	bsf	8,7	;volatile
  2924     1BB0  0008               	return
  2925     1BB1                     l173:	
  2926                           ;LCD16x2.c: 25:   else
  2927                           
  2928                           
  2929                           ;LCD16x2.c: 26:     RD7 = 0;
  2930     1BB1  1283               	bcf	3,5	;RP0=0, select bank0
  2931     1BB2  1303               	bcf	3,6	;RP1=0, select bank0
  2932     1BB3  1388               	bcf	8,7	;volatile
  2933     1BB4  0008               	return
  2934     1BB5                     __end_of_LCD_DATA:
  2935                           
  2936                           	psect	text11
  2937     1642                     __ptext11:	
  2938 ;; *************** function _ISR *****************
  2939 ;; Defined at:
  2940 ;;		line 23 in file "RS485_Master.c"
  2941 ;; Parameters:    Size  Location     Type
  2942 ;;		None
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;		None
  2945 ;; Return value:  Size  Location     Type
  2946 ;;                  1    wreg      void 
  2947 ;; Registers used:
  2948 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2949 ;; Tracked objects:
  2950 ;;		On entry : 0/0
  2951 ;;		On exit  : 300/100
  2952 ;;		Unchanged: 0/0
  2953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2954 ;;      Params:         0       0       0       0       0
  2955 ;;      Locals:         0       0       0       0       0
  2956 ;;      Temps:          0       0       6       0       0
  2957 ;;      Totals:         0       0       6       0       0
  2958 ;;Total ram usage:        6 bytes
  2959 ;; Hardware stack levels used: 1
  2960 ;; Hardware stack levels required when called: 5
  2961 ;; This function calls:
  2962 ;;		_HCH1000_freqToHumidity
  2963 ;;		_LCD_Clear
  2964 ;;		_LCD_Set_Cursor
  2965 ;;		_LCD_Write_String
  2966 ;;		_Master_DataHandling
  2967 ;;		_Master_SendCommand
  2968 ;;		_SpeedControl
  2969 ;;		_TC72_toFloat
  2970 ;;		_UARTrcvString
  2971 ;;		_displayData
  2972 ;; This function is called by:
  2973 ;;		Interrupt level 1
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977     1642                     _ISR:	
  2978                           ;psect for function _ISR
  2979                           
  2980                           
  2981                           ;RS485_Master.c: 26:     if(TMR0IF){
  2982     1642  1D0B               	btfss	11,2	;volatile
  2983     1643  2E81               	goto	i1l4909
  2984                           
  2985                           ;RS485_Master.c: 27:         TMR0 = 6;
  2986     1644  3006               	movlw	6
  2987     1645  1283               	bcf	3,5	;RP0=0, select bank0
  2988     1646  0081               	movwf	1	;volatile
  2989                           
  2990                           ;RS485_Master.c: 29:         if(count_motor++ == 100)
  2991     1647  3001               	movlw	1
  2992     1648  00FF               	movwf	127
  2993     1649  087F               	movf	127,w
  2994     164A  1683               	bsf	3,5	;RP0=1, select bank1
  2995     164B  07D9               	addwf	_count_motor^(0+128),f
  2996     164C  3065               	movlw	101
  2997     164D  0659               	xorwf	_count_motor^(0+128),w
  2998     164E  1D03               	btfss	3,2
  2999     164F  2E68               	goto	i1l4901
  3000                           
  3001                           ;RS485_Master.c: 30:         {;RS485_Master.c: 31:             count_motor = 0;
  3002     1650  01D9               	clrf	_count_motor^(0+128)
  3003                           
  3004                           ;RS485_Master.c: 32:             SpeedControl(100, targetTemp, ftemp);
  3005     1651  3000               	movlw	0
  3006     1652  00A9               	movwf	SpeedControl@Kp^(0+128)
  3007     1653  30C8               	movlw	200
  3008     1654  00AA               	movwf	(SpeedControl@Kp+1)^(0+128)
  3009     1655  3042               	movlw	66
  3010     1656  00AB               	movwf	(SpeedControl@Kp+2)^(0+128)
  3011     1657  086C               	movf	_targetTemp^(0+128),w
  3012     1658  00AC               	movwf	SpeedControl@targetVal^(0+128)
  3013     1659  086D               	movf	(_targetTemp+1)^(0+128),w
  3014     165A  00AD               	movwf	(SpeedControl@targetVal+1)^(0+128)
  3015     165B  086E               	movf	(_targetTemp+2)^(0+128),w
  3016     165C  00AE               	movwf	(SpeedControl@targetVal+2)^(0+128)
  3017     165D  084E               	movf	_ftemp^(0+128),w
  3018     165E  00AF               	movwf	SpeedControl@nowVal^(0+128)
  3019     165F  084F               	movf	(_ftemp+1)^(0+128),w
  3020     1660  00B0               	movwf	(SpeedControl@nowVal+1)^(0+128)
  3021     1661  0850               	movf	(_ftemp+2)^(0+128),w
  3022     1662  00B1               	movwf	(SpeedControl@nowVal+2)^(0+128)
  3023     1663  160A  158A  2495  160A  118A  	fcall	_SpeedControl
  3024     1668                     i1l4901:
  3025                           
  3026                           ;RS485_Master.c: 35:         if(count_modbus++ == 1000)
  3027     1668  3001               	movlw	1
  3028     1669  1683               	bsf	3,5	;RP0=1, select bank1
  3029     166A  07D5               	addwf	_count_modbus^(0+128),f
  3030     166B  1803               	skipnc
  3031     166C  0AD6               	incf	(_count_modbus+1)^(0+128),f
  3032     166D  3000               	movlw	0
  3033     166E  07D6               	addwf	(_count_modbus+1)^(0+128),f
  3034     166F  30E9               	movlw	233
  3035     1670  0655               	xorwf	_count_modbus^(0+128),w
  3036     1671  3003               	movlw	3
  3037     1672  1903               	skipnz
  3038     1673  0656               	xorwf	(_count_modbus+1)^(0+128),w
  3039     1674  1D03               	btfss	3,2
  3040     1675  2E80               	goto	i1l4907
  3041                           
  3042                           ;RS485_Master.c: 36:         {;RS485_Master.c: 37:             count_modbus = 0;
  3043     1676  01D5               	clrf	_count_modbus^(0+128)
  3044     1677  01D6               	clrf	(_count_modbus+1)^(0+128)
  3045                           
  3046                           ;RS485_Master.c: 38:             Master_SendCommand(0x31, 0x33);
  3047     1678  3033               	movlw	51
  3048     1679  00FC               	movwf	Master_SendCommand@function
  3049     167A  3031               	movlw	49
  3050     167B  160A  118A  20CD  160A  118A  	fcall	_Master_SendCommand
  3051     1680                     i1l4907:
  3052                           
  3053                           ;RS485_Master.c: 41:         TMR0IF = 0;
  3054     1680  110B               	bcf	11,2	;volatile
  3055     1681                     i1l4909:
  3056                           
  3057                           ;RS485_Master.c: 44:     if(RCIF){
  3058     1681  1283               	bcf	3,5	;RP0=0, select bank0
  3059     1682  1E8C               	btfss	12,5	;volatile
  3060     1683  2EF9               	goto	i1l70
  3061                           
  3062                           ;RS485_Master.c: 46:         if (UARTrcvString((char*)rcv_buffer, 4 + 4))
  3063     1684  3008               	movlw	8
  3064     1685  00F1               	movwf	UARTrcvString@length
  3065     1686  3000               	movlw	0
  3066     1687  00F2               	movwf	UARTrcvString@length+1
  3067     1688  30DA               	movlw	(low (_rcv_buffer| 0))& (0+255)
  3068     1689  160A  158A  24D8  160A  118A  	fcall	_UARTrcvString
  3069     168E  0871               	movf	?_UARTrcvString,w
  3070     168F  0472               	iorwf	?_UARTrcvString+1,w
  3071     1690  1903               	btfsc	3,2
  3072     1691  2EF9               	goto	i1l70
  3073                           
  3074                           ;RS485_Master.c: 47:         {;RS485_Master.c: 48:             if(Master_DataHandling(rc
      +                          v_buffer))
  3075     1692  30DA               	movlw	(low (_rcv_buffer| 0))& (0+255)
  3076     1693  160A  158A  23B5  160A  118A  	fcall	_Master_DataHandling
  3077     1698  1C03               	btfss	3,0
  3078     1699  2EE3               	goto	i1l4919
  3079                           
  3080                           ;RS485_Master.c: 49:             {;RS485_Master.c: 50:                 ftemp = TC72_toFl
      +                          oat((rcv_buffer[3] << 8) + rcv_buffer[2]);
  3081     169A  1683               	bsf	3,5	;RP0=1, select bank1
  3082     169B  085D               	movf	(_rcv_buffer^(0+128)+3),w
  3083     169C  00C5               	movwf	??_ISR^(0+128)
  3084     169D  01C6               	clrf	(??_ISR^(0+128)+1)
  3085     169E  0845               	movf	??_ISR^(0+128),w
  3086     169F  00C6               	movwf	(??_ISR^(0+128)+1)
  3087     16A0  01C5               	clrf	??_ISR^(0+128)
  3088     16A1  085C               	movf	(_rcv_buffer^(0+128)+2),w
  3089     16A2  0745               	addwf	??_ISR^(0+128),w
  3090     16A3  1283               	bcf	3,5	;RP0=0, select bank0
  3091     16A4  00C6               	movwf	TC72_toFloat@temp
  3092     16A5  3000               	movlw	0
  3093     16A6  1803               	skipnc
  3094     16A7  3001               	movlw	1
  3095     16A8  1683               	bsf	3,5	;RP0=1, select bank1
  3096     16A9  0746               	addwf	(??_ISR+1)^(0+128),w
  3097     16AA  1283               	bcf	3,5	;RP0=0, select bank0
  3098     16AB  00C7               	movwf	TC72_toFloat@temp+1
  3099     16AC  160A  118A  223D  160A  118A  	fcall	_TC72_toFloat
  3100     16B1  0846               	movf	?_TC72_toFloat,w
  3101     16B2  1683               	bsf	3,5	;RP0=1, select bank1
  3102     16B3  00CE               	movwf	_ftemp^(0+128)
  3103     16B4  1283               	bcf	3,5	;RP0=0, select bank0
  3104     16B5  0847               	movf	?_TC72_toFloat+1,w
  3105     16B6  1683               	bsf	3,5	;RP0=1, select bank1
  3106     16B7  00CF               	movwf	(_ftemp+1)^(0+128)
  3107     16B8  1283               	bcf	3,5	;RP0=0, select bank0
  3108     16B9  0848               	movf	?_TC72_toFloat+2,w
  3109     16BA  1683               	bsf	3,5	;RP0=1, select bank1
  3110     16BB  00D0               	movwf	(_ftemp+2)^(0+128)
  3111                           
  3112                           ;RS485_Master.c: 51:                 fhumid = HCH1000_freqToHumidity((rcv_buffer[5] << 8
      +                          ) + rcv_buffer[4]);
  3113     16BC  085F               	movf	(_rcv_buffer^(0+128)+5),w
  3114     16BD  00C5               	movwf	??_ISR^(0+128)
  3115     16BE  01C6               	clrf	(??_ISR^(0+128)+1)
  3116     16BF  0845               	movf	??_ISR^(0+128),w
  3117     16C0  00C6               	movwf	(??_ISR^(0+128)+1)
  3118     16C1  01C5               	clrf	??_ISR^(0+128)
  3119     16C2  085E               	movf	(_rcv_buffer^(0+128)+4),w
  3120     16C3  0745               	addwf	??_ISR^(0+128),w
  3121     16C4  1283               	bcf	3,5	;RP0=0, select bank0
  3122     16C5  00E8               	movwf	HCH1000_freqToHumidity@freq
  3123     16C6  3000               	movlw	0
  3124     16C7  1803               	skipnc
  3125     16C8  3001               	movlw	1
  3126     16C9  1683               	bsf	3,5	;RP0=1, select bank1
  3127     16CA  0746               	addwf	(??_ISR+1)^(0+128),w
  3128     16CB  1283               	bcf	3,5	;RP0=0, select bank0
  3129     16CC  00E9               	movwf	HCH1000_freqToHumidity@freq+1
  3130     16CD  160A  158A  241C  160A  118A  	fcall	_HCH1000_freqToHumidity
  3131     16D2  0868               	movf	?_HCH1000_freqToHumidity,w
  3132     16D3  1683               	bsf	3,5	;RP0=1, select bank1
  3133     16D4  00CB               	movwf	_fhumid^(0+128)
  3134     16D5  1283               	bcf	3,5	;RP0=0, select bank0
  3135     16D6  0869               	movf	?_HCH1000_freqToHumidity+1,w
  3136     16D7  1683               	bsf	3,5	;RP0=1, select bank1
  3137     16D8  00CC               	movwf	(_fhumid+1)^(0+128)
  3138     16D9  1283               	bcf	3,5	;RP0=0, select bank0
  3139     16DA  086A               	movf	?_HCH1000_freqToHumidity+2,w
  3140     16DB  1683               	bsf	3,5	;RP0=1, select bank1
  3141     16DC  00CD               	movwf	(_fhumid+2)^(0+128)
  3142                           
  3143                           ;RS485_Master.c: 52:                 displayData();
  3144     16DD  160A  158A  279B  160A  118A  	fcall	_displayData
  3145                           
  3146                           ;RS485_Master.c: 53:             }
  3147     16E2  2EF9               	goto	i1l70
  3148     16E3                     i1l4919:
  3149                           
  3150                           ;RS485_Master.c: 55:             {;RS485_Master.c: 56:                 LCD_Clear();
  3151     16E3  160A  158A  217F  160A  118A  	fcall	_LCD_Clear
  3152                           
  3153                           ;RS485_Master.c: 57:                 LCD_Set_Cursor(1,1);
  3154     16E8  01F4               	clrf	LCD_Set_Cursor@c
  3155     16E9  0AF4               	incf	LCD_Set_Cursor@c,f
  3156     16EA  3001               	movlw	1
  3157     16EB  120A  158A  2003  160A  118A  	fcall	_LCD_Set_Cursor
  3158                           
  3159                           ;RS485_Master.c: 58:                 LCD_Write_String("Error! Check");
  3160     16F0  30AD               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3161     16F1  00F6               	movwf	LCD_Write_String@str
  3162     16F2  3080               	movlw	128
  3163     16F3  00F7               	movwf	LCD_Write_String@str+1
  3164     16F4  160A  158A  2458  160A  118A  	fcall	_LCD_Write_String
  3165     16F9                     i1l70:
  3166     16F9  1683               	bsf	3,5	;RP0=1, select bank1
  3167     16FA  084A               	movf	(??_ISR+5)^(0+128),w
  3168     16FB  00FF               	movwf	127
  3169     16FC  0849               	movf	(??_ISR+4)^(0+128),w
  3170     16FD  008A               	movwf	10
  3171     16FE  0848               	movf	(??_ISR+3)^(0+128),w
  3172     16FF  0084               	movwf	4
  3173     1700  0E47               	swapf	(??_ISR+2)^(0+128),w
  3174     1701  0083               	movwf	3
  3175     1702  0EFE               	swapf	126,f
  3176     1703  0E7E               	swapf	126,w
  3177     1704  0009               	retfie
  3178     1705                     __end_of_ISR:
  3179                           
  3180                           	psect	intentry
  3181     0004                     __pintentry:	
  3182                           ;incstack = 0
  3183 ;; hardware stack exceeded
  3184                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3185                           
  3186     0004                     interrupt_function:
  3187     007E                     saved_w	set	btemp
  3188     0004  00FE               	movwf	btemp
  3189     0005  0E03               	swapf	3,w
  3190     0006  1683               	bsf	3,5	;RP0=1, select bank1
  3191     0007  1303               	bcf	3,6	;RP1=0, select bank1
  3192     0008  00C7               	movwf	(??_ISR+2)^(0+128)
  3193     0009  0804               	movf	4,w
  3194     000A  00C8               	movwf	(??_ISR+3)^(0+128)
  3195     000B  080A               	movf	10,w
  3196     000C  00C9               	movwf	(??_ISR+4)^(0+128)
  3197     000D  087F               	movf	btemp+1,w
  3198     000E  00CA               	movwf	(??_ISR+5)^(0+128)
  3199     000F  160A  118A  2E42   	ljmp	_ISR
  3200                           
  3201                           	psect	text12
  3202     1F9B                     __ptext12:	
  3203 ;; *************** function _displayData *****************
  3204 ;; Defined at:
  3205 ;;		line 100 in file "RS485_Master.c"
  3206 ;; Parameters:    Size  Location     Type
  3207 ;;		None
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;		None
  3210 ;; Return value:  Size  Location     Type
  3211 ;;                  1    wreg      void 
  3212 ;; Registers used:
  3213 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3214 ;; Tracked objects:
  3215 ;;		On entry : 300/100
  3216 ;;		On exit  : 300/0
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3219 ;;      Params:         0       0       0       0       0
  3220 ;;      Locals:         0       0       0       0       0
  3221 ;;      Temps:          0       0       4       0       0
  3222 ;;      Totals:         0       0       4       0       0
  3223 ;;Total ram usage:        4 bytes
  3224 ;; Hardware stack levels used: 1
  3225 ;; Hardware stack levels required when called: 4
  3226 ;; This function calls:
  3227 ;;		_LCD_Clear
  3228 ;;		_LCD_Set_Cursor
  3229 ;;		_LCD_Write_String
  3230 ;;		_sprintf
  3231 ;; This function is called by:
  3232 ;;		_ISR
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236     1F9B                     _displayData:	
  3237                           ;psect for function _displayData
  3238                           
  3239                           
  3240                           ;RS485_Master.c: 102:     LCD_Clear();
  3241                           
  3242                           ;incstack = 0
  3243 ;; hardware stack exceeded
  3244                           ; Regs used in _displayData: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3245     1F9B  160A  158A  217F  160A  158A  	fcall	_LCD_Clear
  3246                           
  3247                           ;RS485_Master.c: 103:     sprintf(str1,"Temp: %.2f C", ftemp);
  3248     1FA0  30A0               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3249     1FA1  00E8               	movwf	sprintf@f
  3250     1FA2  1683               	bsf	3,5	;RP0=1, select bank1
  3251     1FA3  0850               	movf	(_ftemp+2)^(0+128),w
  3252     1FA4  00C4               	movwf	(??_displayData^(0+128)+3)
  3253     1FA5  084F               	movf	(_ftemp+1)^(0+128),w
  3254     1FA6  00C3               	movwf	(??_displayData^(0+128)+2)
  3255     1FA7  084E               	movf	_ftemp^(0+128),w
  3256     1FA8  00C2               	movwf	(??_displayData^(0+128)+1)
  3257     1FA9  01C1               	clrf	??_displayData^(0+128)
  3258     1FAA  0844               	movf	(??_displayData+3)^(0+128),w
  3259     1FAB  1283               	bcf	3,5	;RP0=0, select bank0
  3260     1FAC  00EC               	movwf	?_sprintf+4
  3261     1FAD  1683               	bsf	3,5	;RP0=1, select bank1
  3262     1FAE  0843               	movf	(??_displayData+2)^(0+128),w
  3263     1FAF  1283               	bcf	3,5	;RP0=0, select bank0
  3264     1FB0  00EB               	movwf	?_sprintf+3
  3265     1FB1  1683               	bsf	3,5	;RP0=1, select bank1
  3266     1FB2  0842               	movf	(??_displayData+1)^(0+128),w
  3267     1FB3  1283               	bcf	3,5	;RP0=0, select bank0
  3268     1FB4  00EA               	movwf	?_sprintf+2
  3269     1FB5  1683               	bsf	3,5	;RP0=1, select bank1
  3270     1FB6  0841               	movf	??_displayData^(0+128),w
  3271     1FB7  1283               	bcf	3,5	;RP0=0, select bank0
  3272     1FB8  00E9               	movwf	?_sprintf+1
  3273     1FB9  30A1               	movlw	(low (_str1| (0+256)))& (0+255)
  3274     1FBA  120A  118A  2040  160A  158A  	fcall	_sprintf
  3275                           
  3276                           ;RS485_Master.c: 104:     sprintf(str2,"Humid: %.2f %%", fhumid);
  3277     1FBF  3091               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  3278     1FC0  1283               	bcf	3,5	;RP0=0, select bank0
  3279     1FC1  00E8               	movwf	sprintf@f
  3280     1FC2  1683               	bsf	3,5	;RP0=1, select bank1
  3281     1FC3  084D               	movf	(_fhumid+2)^(0+128),w
  3282     1FC4  00C4               	movwf	(??_displayData^(0+128)+3)
  3283     1FC5  084C               	movf	(_fhumid+1)^(0+128),w
  3284     1FC6  00C3               	movwf	(??_displayData^(0+128)+2)
  3285     1FC7  084B               	movf	_fhumid^(0+128),w
  3286     1FC8  00C2               	movwf	(??_displayData^(0+128)+1)
  3287     1FC9  01C1               	clrf	??_displayData^(0+128)
  3288     1FCA  0844               	movf	(??_displayData+3)^(0+128),w
  3289     1FCB  1283               	bcf	3,5	;RP0=0, select bank0
  3290     1FCC  00EC               	movwf	?_sprintf+4
  3291     1FCD  1683               	bsf	3,5	;RP0=1, select bank1
  3292     1FCE  0843               	movf	(??_displayData+2)^(0+128),w
  3293     1FCF  1283               	bcf	3,5	;RP0=0, select bank0
  3294     1FD0  00EB               	movwf	?_sprintf+3
  3295     1FD1  1683               	bsf	3,5	;RP0=1, select bank1
  3296     1FD2  0842               	movf	(??_displayData+1)^(0+128),w
  3297     1FD3  1283               	bcf	3,5	;RP0=0, select bank0
  3298     1FD4  00EA               	movwf	?_sprintf+2
  3299     1FD5  1683               	bsf	3,5	;RP0=1, select bank1
  3300     1FD6  0841               	movf	??_displayData^(0+128),w
  3301     1FD7  1283               	bcf	3,5	;RP0=0, select bank0
  3302     1FD8  00E9               	movwf	?_sprintf+1
  3303     1FD9  3090               	movlw	(low (_str2| (0+256)))& (0+255)
  3304     1FDA  120A  118A  2040  160A  158A  	fcall	_sprintf
  3305                           
  3306                           ;RS485_Master.c: 105:     LCD_Set_Cursor(1,1);
  3307     1FDF  01F4               	clrf	LCD_Set_Cursor@c
  3308     1FE0  0AF4               	incf	LCD_Set_Cursor@c,f
  3309     1FE1  3001               	movlw	1
  3310     1FE2  120A  158A  2003  160A  158A  	fcall	_LCD_Set_Cursor
  3311                           
  3312                           ;RS485_Master.c: 106:     LCD_Write_String(str1);
  3313     1FE7  30A1               	movlw	(low (_str1| (0+256)))& (0+255)
  3314     1FE8  00F6               	movwf	LCD_Write_String@str
  3315     1FE9  3001               	movlw	1
  3316     1FEA  00F7               	movwf	LCD_Write_String@str+1
  3317     1FEB  160A  158A  2458  160A  158A  	fcall	_LCD_Write_String
  3318                           
  3319                           ;RS485_Master.c: 107:     LCD_Set_Cursor(2,1);
  3320     1FF0  01F4               	clrf	LCD_Set_Cursor@c
  3321     1FF1  0AF4               	incf	LCD_Set_Cursor@c,f
  3322     1FF2  3002               	movlw	2
  3323     1FF3  120A  158A  2003  160A  158A  	fcall	_LCD_Set_Cursor
  3324                           
  3325                           ;RS485_Master.c: 108:     LCD_Write_String(str2);
  3326     1FF8  3090               	movlw	(low (_str2| (0+256)))& (0+255)
  3327     1FF9  00F6               	movwf	LCD_Write_String@str
  3328     1FFA  3001               	movlw	1
  3329     1FFB  00F7               	movwf	LCD_Write_String@str+1
  3330     1FFC  160A  158A  2458   	fcall	_LCD_Write_String
  3331     1FFF  0008               	return
  3332     2000                     __end_of_displayData:
  3333                           
  3334                           	psect	text13
  3335     0040                     __ptext13:	
  3336 ;; *************** function _sprintf *****************
  3337 ;; Defined at:
  3338 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
  3339 ;; Parameters:    Size  Location     Type
  3340 ;;  sp              1    wreg     PTR unsigned char 
  3341 ;;		 -> str2(17), str1(17), 
  3342 ;;  f               1   72[BANK0 ] PTR const unsigned char 
  3343 ;;		 -> STR_3(15), STR_2(13), 
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;  sp              1   25[BANK1 ] PTR unsigned char 
  3346 ;;		 -> str2(17), str1(17), 
  3347 ;;  fval            4   26[BANK1 ] PTR unsigned char 
  3348 ;;  tmpval          4   21[BANK1 ] struct .
  3349 ;;  val             4   15[BANK1 ] unsigned long 
  3350 ;;  prec            2   30[BANK1 ] int 
  3351 ;;  eexp            2   19[BANK1 ] int 
  3352 ;;  flag            2   13[BANK1 ] unsigned short 
  3353 ;;  len             2   11[BANK1 ] unsigned int 
  3354 ;;  width           2    0        int 
  3355 ;;  c               1   32[BANK1 ] unsigned char 
  3356 ;;  cp              1   10[BANK1 ] PTR const unsigned char 
  3357 ;;		 -> sprintf@c(1), 
  3358 ;;  ap              1    9[BANK1 ] PTR void [1]
  3359 ;;		 -> ?_sprintf(2), 
  3360 ;;  d               1    0        unsigned char 
  3361 ;; Return value:  Size  Location     Type
  3362 ;;                  2   72[BANK0 ] int 
  3363 ;; Registers used:
  3364 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3365 ;; Tracked objects:
  3366 ;;		On entry : 300/0
  3367 ;;		On exit  : B00/900
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3370 ;;      Params:         0       5       0       0       0
  3371 ;;      Locals:         0       0      28       0       0
  3372 ;;      Temps:          0       0       5       0       0
  3373 ;;      Totals:         0       5      33       0       0
  3374 ;;Total ram usage:       38 bytes
  3375 ;; Hardware stack levels used: 1
  3376 ;; Hardware stack levels required when called: 3
  3377 ;; This function calls:
  3378 ;;		___awdiv
  3379 ;;		___fladd
  3380 ;;		___fleq
  3381 ;;		___flge
  3382 ;;		___flmul
  3383 ;;		___flneg
  3384 ;;		___flsub
  3385 ;;		___fltol
  3386 ;;		___lldiv
  3387 ;;		___llmod
  3388 ;;		___wmul
  3389 ;;		___xxtofl
  3390 ;;		__div_to_l_
  3391 ;;		__tdiv_to_l_
  3392 ;;		_fround
  3393 ;;		_isdigit
  3394 ;;		_scale
  3395 ;; This function is called by:
  3396 ;;		_displayData
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400     0040                     _sprintf:	
  3401                           ;psect for function _sprintf
  3402                           
  3403                           
  3404                           ;incstack = 0
  3405 ;; hardware stack exceeded
  3406                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3407                           ;sprintf@sp stored from wreg
  3408     0040  1683               	bsf	3,5	;RP0=1, select bank1
  3409     0041  00B9               	movwf	sprintf@sp^(0+128)
  3410                           
  3411                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 517:  
      +                          int prec;
  3412     0042  3069               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  3413     0043  00A9               	movwf	sprintf@ap^(0+128)
  3414     0044                     i1l4579:	
  3415                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  3416                           
  3417                           
  3418                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  3419     0044  3001               	movlw	1
  3420     0045  1283               	bcf	3,5	;RP0=0, select bank0
  3421     0046  07E8               	addwf	sprintf@f,f
  3422     0047  30FF               	movlw	-1
  3423     0048  0768               	addwf	sprintf@f,w
  3424     0049  0084               	movwf	4
  3425     004A  160A  118A  200A  120A  118A  	fcall	stringdir
  3426     004F  1683               	bsf	3,5	;RP0=1, select bank1
  3427     0050  00C0               	movwf	sprintf@c^(0+128)
  3428     0051  0840               	movf	sprintf@c^(0+128),w
  3429     0052  1903               	btfsc	3,2
  3430     0053  2DAF               	goto	i1l4581
  3431                           
  3432                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  3433     0054  3025               	movlw	37
  3434     0055  0640               	xorwf	sprintf@c^(0+128),w
  3435     0056  1903               	btfsc	3,2
  3436     0057  285C               	goto	i1l4371
  3437                           
  3438                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  3439     0058  0839               	movf	sprintf@sp^(0+128),w
  3440     0059  0084               	movwf	4
  3441     005A  0840               	movf	sprintf@c^(0+128),w
  3442     005B  2DA8               	goto	L5
  3443     005C                     i1l4371:	
  3444                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 559:    continue;
  3445                           
  3446                           
  3447                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  3448     005C  01AD               	clrf	sprintf@flag^(0+128)
  3449     005D  01AE               	clrf	(sprintf@flag+1)^(0+128)
  3450                           
  3451                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 628:   if(*f == '
      +                          .') {
  3452     005E  1283               	bcf	3,5	;RP0=0, select bank0
  3453     005F  0868               	movf	sprintf@f,w
  3454     0060  0084               	movwf	4
  3455     0061  160A  118A  200A  120A  118A  	fcall	stringdir
  3456     0066  3A2E               	xorlw	46
  3457     0067  1D03               	skipz
  3458     0068  28AF               	goto	i1l4389
  3459                           
  3460                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 629:    flag |= 0
      +                          x4000;
  3461     0069  1683               	bsf	3,5	;RP0=1, select bank1
  3462     006A  172E               	bsf	(sprintf@flag^(0+128)+1),6
  3463                           
  3464                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 630:    f++;
  3465     006B  3001               	movlw	1
  3466     006C  00FF               	movwf	127
  3467     006D  087F               	movf	127,w
  3468     006E  1283               	bcf	3,5	;RP0=0, select bank0
  3469     006F  07E8               	addwf	sprintf@f,f
  3470                           
  3471                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 644:    {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 645:     prec = 0;
  3472     0070  1683               	bsf	3,5	;RP0=1, select bank1
  3473     0071  01BE               	clrf	sprintf@prec^(0+128)
  3474     0072  01BF               	clrf	(sprintf@prec+1)^(0+128)
  3475     0073                     i1l4387:	
  3476                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  3477                           
  3478                           
  3479                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  3480     0073  1283               	bcf	3,5	;RP0=0, select bank0
  3481     0074  0868               	movf	sprintf@f,w
  3482     0075  0084               	movwf	4
  3483     0076  160A  118A  200A  120A  118A  	fcall	stringdir
  3484     007B  160A  158A  218A  120A  118A  	fcall	_isdigit
  3485     0080  1C03               	btfss	3,0
  3486     0081  28F2               	goto	i1l4411
  3487                           
  3488                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 647:      prec *=
      +                           10;
  3489     0082  300A               	movlw	10
  3490     0083  00F0               	movwf	___wmul@multiplier
  3491     0084  3000               	movlw	0
  3492     0085  00F1               	movwf	___wmul@multiplier+1
  3493     0086  1683               	bsf	3,5	;RP0=1, select bank1
  3494     0087  083F               	movf	(sprintf@prec+1)^(0+128),w
  3495     0088  00F3               	movwf	___wmul@multiplicand+1
  3496     0089  083E               	movf	sprintf@prec^(0+128),w
  3497     008A  00F2               	movwf	___wmul@multiplicand
  3498     008B  160A  158A  22CE  120A  118A  	fcall	___wmul
  3499     0090  0871               	movf	?___wmul+1,w
  3500     0091  00BF               	movwf	(sprintf@prec+1)^(0+128)
  3501     0092  0870               	movf	?___wmul,w
  3502     0093  00BE               	movwf	sprintf@prec^(0+128)
  3503                           
  3504                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 648:         prec
      +                           += *f++ - '0';
  3505     0094  1283               	bcf	3,5	;RP0=0, select bank0
  3506     0095  0868               	movf	sprintf@f,w
  3507     0096  0084               	movwf	4
  3508     0097  160A  118A  200A  120A  118A  	fcall	stringdir
  3509     009C  3ED0               	addlw	208
  3510     009D  1683               	bsf	3,5	;RP0=1, select bank1
  3511     009E  00A0               	movwf	??_sprintf^(0+128)
  3512     009F  30FF               	movlw	255
  3513     00A0  1803               	skipnc
  3514     00A1  3000               	movlw	0
  3515     00A2  00A1               	movwf	(??_sprintf^(0+128)+1)
  3516     00A3  0820               	movf	??_sprintf^(0+128),w
  3517     00A4  07BE               	addwf	sprintf@prec^(0+128),f
  3518     00A5  1803               	skipnc
  3519     00A6  0ABF               	incf	(sprintf@prec+1)^(0+128),f
  3520     00A7  0821               	movf	(??_sprintf+1)^(0+128),w
  3521     00A8  07BF               	addwf	(sprintf@prec+1)^(0+128),f
  3522     00A9  3001               	movlw	1
  3523     00AA  00FF               	movwf	127
  3524     00AB  087F               	movf	127,w
  3525     00AC  1283               	bcf	3,5	;RP0=0, select bank0
  3526     00AD  07E8               	addwf	sprintf@f,f
  3527     00AE  2873               	goto	i1l4387
  3528     00AF                     i1l4389:
  3529                           
  3530                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 652:    prec = 0;
  3531     00AF  1683               	bsf	3,5	;RP0=1, select bank1
  3532     00B0  01BE               	clrf	sprintf@prec^(0+128)
  3533     00B1  01BF               	clrf	(sprintf@prec+1)^(0+128)
  3534                           
  3535                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 654:    flag |= 0
      +                          x1000;
  3536     00B2  162E               	bsf	(sprintf@flag^(0+128)+1),4
  3537     00B3  28F2               	goto	i1l4411
  3538     00B4                     i1l491:	
  3539                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 688:   case 'f':
  3540                           
  3541                           
  3542                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 689:    flag |= 0
      +                          x400;
  3543     00B4  152E               	bsf	(sprintf@flag^(0+128)+1),2
  3544                           
  3545                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 690:    break;
  3546     00B5  290E               	goto	i1l4413
  3547     00B6                     i1l4393:
  3548                           
  3549                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 779:    if(prec &
      +                          & (prec < ((int)len)))
  3550     00B6  083E               	movf	sprintf@prec^(0+128),w
  3551     00B7  043F               	iorwf	(sprintf@prec+1)^(0+128),w
  3552     00B8  1903               	btfsc	3,2
  3553     00B9  28CB               	goto	i1l4405
  3554     00BA  083F               	movf	(sprintf@prec+1)^(0+128),w
  3555     00BB  3A80               	xorlw	128
  3556     00BC  00FF               	movwf	127
  3557     00BD  3080               	movlw	128
  3558     00BE  027F               	subwf	127,w
  3559     00BF  1D03               	skipz
  3560     00C0  28C3               	goto	u665_25
  3561     00C1  3001               	movlw	1
  3562     00C2  023E               	subwf	sprintf@prec^(0+128),w
  3563     00C3                     u665_25:
  3564     00C3  1803               	skipnc
  3565     00C4  28CB               	goto	i1l4405
  3566                           
  3567                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 780:     len = (u
      +                          nsigned int)prec;
  3568     00C5  1683               	bsf	3,5	;RP0=1, select bank1
  3569     00C6  1303               	bcf	3,6	;RP1=0, select bank1
  3570     00C7  083F               	movf	(sprintf@prec+1)^(0+128),w
  3571     00C8  00AC               	movwf	(sprintf@len+1)^(0+128)
  3572     00C9  083E               	movf	sprintf@prec^(0+128),w
  3573     00CA  00AB               	movwf	sprintf@len^(0+128)
  3574     00CB                     i1l4405:
  3575                           
  3576                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 793:    while(len
      +                          --)
  3577     00CB  3001               	movlw	1
  3578     00CC  1683               	bsf	3,5	;RP0=1, select bank1
  3579     00CD  1303               	bcf	3,6	;RP1=0, select bank1
  3580     00CE  02AB               	subwf	sprintf@len^(0+128),f
  3581     00CF  3000               	movlw	0
  3582     00D0  1C03               	skipc
  3583     00D1  03AC               	decf	(sprintf@len+1)^(0+128),f
  3584     00D2  02AC               	subwf	(sprintf@len+1)^(0+128),f
  3585     00D3  0A2B               	incf	sprintf@len^(0+128),w
  3586     00D4  1903               	btfsc	3,2
  3587     00D5  0A2C               	incf	(sprintf@len+1)^(0+128),w
  3588     00D6  1903               	btfsc	3,2
  3589     00D7  2844               	goto	i1l4579
  3590                           
  3591                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 794:     ((*sp++ 
      +                          = (*cp++)));
  3592     00D8  082A               	movf	sprintf@cp^(0+128),w
  3593     00D9  0084               	movwf	4
  3594     00DA  1383               	bcf	3,7	;select IRP bank0
  3595     00DB  0800               	movf	0,w
  3596     00DC  00FF               	movwf	127
  3597     00DD  0839               	movf	sprintf@sp^(0+128),w
  3598     00DE  0084               	movwf	4
  3599     00DF  087F               	movf	127,w
  3600     00E0  1783               	bsf	3,7	;select IRP bank2
  3601     00E1  0080               	movwf	0
  3602     00E2  3001               	movlw	1
  3603     00E3  00FF               	movwf	127
  3604     00E4  087F               	movf	127,w
  3605     00E5  07AA               	addwf	sprintf@cp^(0+128),f
  3606     00E6  3001               	movlw	1
  3607     00E7  00FF               	movwf	127
  3608     00E8  087F               	movf	127,w
  3609     00E9  07B9               	addwf	sprintf@sp^(0+128),f
  3610     00EA  28CB               	goto	i1l4405
  3611     00EB                     i1l4407:
  3612                           
  3613                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 831:    cp = (cha
      +                          r *)&c;
  3614     00EB  30C0               	movlw	(low (sprintf@c| 0))& (0+255)
  3615     00EC  00AA               	movwf	sprintf@cp^(0+128)
  3616                           
  3617                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 832:    len = 1;
  3618     00ED  3001               	movlw	1
  3619     00EE  00AB               	movwf	sprintf@len^(0+128)
  3620     00EF  3000               	movlw	0
  3621     00F0  00AC               	movwf	(sprintf@len^(0+128)+1)
  3622                           
  3623                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 833:    goto dost
      +                          ring;
  3624     00F1  28B6               	goto	i1l4393
  3625     00F2                     i1l4411:
  3626     00F2  3001               	movlw	1
  3627     00F3  1283               	bcf	3,5	;RP0=0, select bank0
  3628     00F4  07E8               	addwf	sprintf@f,f
  3629     00F5  30FF               	movlw	-1
  3630     00F6  0768               	addwf	sprintf@f,w
  3631     00F7  0084               	movwf	4
  3632     00F8  160A  118A  200A  120A  118A  	fcall	stringdir
  3633     00FD  1683               	bsf	3,5	;RP0=1, select bank1
  3634     00FE  00C0               	movwf	sprintf@c^(0+128)
  3635     00FF  00A0               	movwf	??_sprintf^(0+128)
  3636     0100  01A1               	clrf	(??_sprintf^(0+128)+1)
  3637                           
  3638                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3639                           ; Switch size 1, requested type "simple"
  3640                           ; Number of cases is 1, Range of values is 0 to 0
  3641                           ; switch strategies available:
  3642                           ; Name         Instructions Cycles
  3643                           ; simple_byte            4     3 (average)
  3644                           ; direct_byte           11     8 (fixed)
  3645                           ; jumptable            260     6 (fixed)
  3646                           ;	Chosen strategy is simple_byte
  3647     0101  0821               	movf	(??_sprintf+1)^(0+128),w
  3648     0102  3A00               	xorlw	0	; case 0
  3649     0103  1903               	skipnz
  3650     0104  2906               	goto	i1l5007
  3651     0105  28EB               	goto	i1l4407
  3652     0106                     i1l5007:
  3653                           
  3654                           ; Switch size 1, requested type "simple"
  3655                           ; Number of cases is 2, Range of values is 0 to 102
  3656                           ; switch strategies available:
  3657                           ; Name         Instructions Cycles
  3658                           ; simple_byte            7     4 (average)
  3659                           ; jumptable            260     6 (fixed)
  3660                           ;	Chosen strategy is simple_byte
  3661     0106  0820               	movf	??_sprintf^(0+128),w
  3662     0107  3A00               	xorlw	0	; case 0
  3663     0108  1903               	skipnz
  3664     0109  2DAF               	goto	i1l4581
  3665     010A  3A66               	xorlw	102	; case 102
  3666     010B  1903               	skipnz
  3667     010C  28B4               	goto	i1l491
  3668     010D  28EB               	goto	i1l4407
  3669     010E                     i1l4413:
  3670                           
  3671                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 851:   if(flag & 
      +                          (0x700)) {
  3672     010E  3000               	movlw	0
  3673     010F  052D               	andwf	sprintf@flag^(0+128),w
  3674     0110  00A0               	movwf	??_sprintf^(0+128)
  3675     0111  3007               	movlw	7
  3676     0112  052E               	andwf	(sprintf@flag+1)^(0+128),w
  3677     0113  00A1               	movwf	(??_sprintf+1)^(0+128)
  3678     0114  0820               	movf	??_sprintf^(0+128),w
  3679     0115  0421               	iorwf	(??_sprintf^(0+128)+1),w
  3680     0116  1903               	btfsc	3,2
  3681     0117  2D79               	goto	i1l4561
  3682                           
  3683                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 853:    if(flag &
      +                           0x1000)
  3684     0118  1E2E               	btfss	(sprintf@flag+1)^(0+128),4
  3685     0119  291E               	goto	i1l4419
  3686                           
  3687                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 855:     prec = 6
      +                          ;
  3688     011A  3006               	movlw	6
  3689     011B  00BE               	movwf	sprintf@prec^(0+128)
  3690     011C  3000               	movlw	0
  3691     011D  00BF               	movwf	(sprintf@prec^(0+128)+1)
  3692     011E                     i1l4419:
  3693                           
  3694                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 856:    fval = (*
      +                          (double *)__va_arg((*(double **)ap), (double)0));
  3695     011E  0829               	movf	sprintf@ap^(0+128),w
  3696     011F  0084               	movwf	4
  3697     0120  1383               	bcf	3,7	;select IRP bank0
  3698     0121  0800               	movf	0,w
  3699     0122  00BA               	movwf	sprintf@fval^(0+128)
  3700     0123  0A84               	incf	4,f
  3701     0124  0800               	movf	0,w
  3702     0125  00BB               	movwf	(sprintf@fval+1)^(0+128)
  3703     0126  0A84               	incf	4,f
  3704     0127  0800               	movf	0,w
  3705     0128  00BC               	movwf	(sprintf@fval+2)^(0+128)
  3706     0129  0A84               	incf	4,f
  3707     012A  0800               	movf	0,w
  3708     012B  00BD               	movwf	(sprintf@fval+3)^(0+128)
  3709     012C  3004               	movlw	4
  3710     012D  00FF               	movwf	127
  3711     012E  087F               	movf	127,w
  3712     012F  07A9               	addwf	sprintf@ap^(0+128),f
  3713                           
  3714                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 857:    if(fval <
      +                           0.0) {
  3715     0130  083D               	movf	(sprintf@fval+3)^(0+128),w
  3716     0131  00F3               	movwf	___flge@ff1+3
  3717     0132  083C               	movf	(sprintf@fval+2)^(0+128),w
  3718     0133  00F2               	movwf	___flge@ff1+2
  3719     0134  083B               	movf	(sprintf@fval+1)^(0+128),w
  3720     0135  00F1               	movwf	___flge@ff1+1
  3721     0136  083A               	movf	sprintf@fval^(0+128),w
  3722     0137  00F0               	movwf	___flge@ff1
  3723     0138  3000               	movlw	0
  3724     0139  00F7               	movwf	___flge@ff2+3
  3725     013A  3000               	movlw	0
  3726     013B  00F6               	movwf	___flge@ff2+2
  3727     013C  3000               	movlw	0
  3728     013D  00F5               	movwf	___flge@ff2+1
  3729     013E  3000               	movlw	0
  3730     013F  00F4               	movwf	___flge@ff2
  3731     0140  160A  118A  2323  120A  118A  	fcall	___flge
  3732     0145  1803               	btfsc	3,0
  3733     0146  2960               	goto	i1l4429
  3734                           
  3735                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 858:     fval = -
      +                          fval;
  3736     0147  083D               	movf	(sprintf@fval+3)^(0+128),w
  3737     0148  00F3               	movwf	___flneg@f1+3
  3738     0149  083C               	movf	(sprintf@fval+2)^(0+128),w
  3739     014A  00F2               	movwf	___flneg@f1+2
  3740     014B  083B               	movf	(sprintf@fval+1)^(0+128),w
  3741     014C  00F1               	movwf	___flneg@f1+1
  3742     014D  083A               	movf	sprintf@fval^(0+128),w
  3743     014E  00F0               	movwf	___flneg@f1
  3744     014F  160A  158A  2176  120A  118A  	fcall	___flneg
  3745     0154  0873               	movf	?___flneg+3,w
  3746     0155  00BD               	movwf	(sprintf@fval+3)^(0+128)
  3747     0156  0872               	movf	?___flneg+2,w
  3748     0157  00BC               	movwf	(sprintf@fval+2)^(0+128)
  3749     0158  0871               	movf	?___flneg+1,w
  3750     0159  00BB               	movwf	(sprintf@fval+1)^(0+128)
  3751     015A  0870               	movf	?___flneg,w
  3752     015B  00BA               	movwf	sprintf@fval^(0+128)
  3753                           
  3754                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 859:     flag |= 
      +                          0x03;
  3755     015C  3003               	movlw	3
  3756     015D  04AD               	iorwf	sprintf@flag^(0+128),f
  3757     015E  3000               	movlw	0
  3758     015F  04AE               	iorwf	(sprintf@flag+1)^(0+128),f
  3759     0160                     i1l4429:
  3760                           
  3761                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 861:    eexp = 0;
  3762     0160  01B3               	clrf	sprintf@eexp^(0+128)
  3763     0161  01B4               	clrf	(sprintf@eexp+1)^(0+128)
  3764                           
  3765                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 862:    if( fval!
      +                          =0) {
  3766     0162  083D               	movf	(sprintf@fval+3)^(0+128),w
  3767     0163  00F3               	movwf	___fleq@ff1+3
  3768     0164  083C               	movf	(sprintf@fval+2)^(0+128),w
  3769     0165  00F2               	movwf	___fleq@ff1+2
  3770     0166  083B               	movf	(sprintf@fval+1)^(0+128),w
  3771     0167  00F1               	movwf	___fleq@ff1+1
  3772     0168  083A               	movf	sprintf@fval^(0+128),w
  3773     0169  00F0               	movwf	___fleq@ff1
  3774     016A  3000               	movlw	0
  3775     016B  00F7               	movwf	___fleq@ff2+3
  3776     016C  3000               	movlw	0
  3777     016D  00F6               	movwf	___fleq@ff2+2
  3778     016E  3000               	movlw	0
  3779     016F  00F5               	movwf	___fleq@ff2+1
  3780     0170  3000               	movlw	0
  3781     0171  00F4               	movwf	___fleq@ff2
  3782     0172  160A  158A  2565  120A  118A  	fcall	___fleq
  3783     0177  1803               	btfsc	3,0
  3784     0178  2A36               	goto	i1l4457
  3785                           
  3786                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 863:     (void)(*
      +                          (&eexp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) - 126);
  3787     0179  1003               	clrc
  3788     017A  0D3C               	rlf	(sprintf@fval+2)^(0+128),w
  3789     017B  0D3D               	rlf	(sprintf@fval+3)^(0+128),w
  3790     017C  3E82               	addlw	130
  3791     017D  00B3               	movwf	sprintf@eexp^(0+128)
  3792     017E  30FF               	movlw	255
  3793     017F  1803               	skipnc
  3794     0180  3000               	movlw	0
  3795     0181  00B4               	movwf	(sprintf@eexp^(0+128)+1)
  3796                           
  3797                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 864:     eexp--;
  3798     0182  30FF               	movlw	255
  3799     0183  07B3               	addwf	sprintf@eexp^(0+128),f
  3800     0184  1803               	skipnc
  3801     0185  0AB4               	incf	(sprintf@eexp+1)^(0+128),f
  3802     0186  30FF               	movlw	255
  3803     0187  07B4               	addwf	(sprintf@eexp+1)^(0+128),f
  3804                           
  3805                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 865:     eexp *= 
      +                          3;
  3806     0188  3003               	movlw	3
  3807     0189  00F0               	movwf	___wmul@multiplier
  3808     018A  3000               	movlw	0
  3809     018B  00F1               	movwf	___wmul@multiplier+1
  3810     018C  0834               	movf	(sprintf@eexp+1)^(0+128),w
  3811     018D  00F3               	movwf	___wmul@multiplicand+1
  3812     018E  0833               	movf	sprintf@eexp^(0+128),w
  3813     018F  00F2               	movwf	___wmul@multiplicand
  3814     0190  160A  158A  22CE  120A  118A  	fcall	___wmul
  3815     0195  0871               	movf	?___wmul+1,w
  3816     0196  00B4               	movwf	(sprintf@eexp+1)^(0+128)
  3817     0197  0870               	movf	?___wmul,w
  3818     0198  00B3               	movwf	sprintf@eexp^(0+128)
  3819                           
  3820                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 866:     eexp /= 
      +                          10;
  3821     0199  300A               	movlw	10
  3822     019A  00F6               	movwf	___awdiv@divisor
  3823     019B  3000               	movlw	0
  3824     019C  00F7               	movwf	___awdiv@divisor+1
  3825     019D  0834               	movf	(sprintf@eexp+1)^(0+128),w
  3826     019E  00F9               	movwf	___awdiv@dividend+1
  3827     019F  0833               	movf	sprintf@eexp^(0+128),w
  3828     01A0  00F8               	movwf	___awdiv@dividend
  3829     01A1  160A  158A  26E4  120A  118A  	fcall	___awdiv
  3830     01A6  0877               	movf	?___awdiv+1,w
  3831     01A7  1683               	bsf	3,5	;RP0=1, select bank1
  3832     01A8  00B4               	movwf	(sprintf@eexp+1)^(0+128)
  3833     01A9  0876               	movf	?___awdiv,w
  3834     01AA  00B3               	movwf	sprintf@eexp^(0+128)
  3835                           
  3836                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 867:     if(eexp 
      +                          < 0)
  3837     01AB  1FB4               	btfss	(sprintf@eexp+1)^(0+128),7
  3838     01AC  29B3               	goto	i1l4445
  3839                           
  3840                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 868:      eexp--;
  3841     01AD  30FF               	movlw	255
  3842     01AE  07B3               	addwf	sprintf@eexp^(0+128),f
  3843     01AF  1803               	skipnc
  3844     01B0  0AB4               	incf	(sprintf@eexp+1)^(0+128),f
  3845     01B1  30FF               	movlw	255
  3846     01B2  07B4               	addwf	(sprintf@eexp+1)^(0+128),f
  3847     01B3                     i1l4445:
  3848                           
  3849                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 872:     tmpval.i
      +                          nteg = scale(-eexp);
  3850     01B3  0333               	decf	sprintf@eexp^(0+128),w
  3851     01B4  3AFF               	xorlw	255
  3852     01B5  120A  158A  24D2  120A  118A  	fcall	_scale
  3853     01BA  083D               	movf	?_scale+3,w
  3854     01BB  1683               	bsf	3,5	;RP0=1, select bank1
  3855     01BC  00B8               	movwf	(sprintf@tmpval+3)^(0+128)
  3856     01BD  1283               	bcf	3,5	;RP0=0, select bank0
  3857     01BE  083C               	movf	?_scale+2,w
  3858     01BF  1683               	bsf	3,5	;RP0=1, select bank1
  3859     01C0  00B7               	movwf	(sprintf@tmpval+2)^(0+128)
  3860     01C1  1283               	bcf	3,5	;RP0=0, select bank0
  3861     01C2  083B               	movf	?_scale+1,w
  3862     01C3  1683               	bsf	3,5	;RP0=1, select bank1
  3863     01C4  00B6               	movwf	(sprintf@tmpval+1)^(0+128)
  3864     01C5  1283               	bcf	3,5	;RP0=0, select bank0
  3865     01C6  083A               	movf	?_scale,w
  3866     01C7  1683               	bsf	3,5	;RP0=1, select bank1
  3867     01C8  00B5               	movwf	sprintf@tmpval^(0+128)
  3868                           
  3869                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 873:     tmpval.i
      +                          nteg *= fval;
  3870     01C9  083D               	movf	(sprintf@fval+3)^(0+128),w
  3871     01CA  1283               	bcf	3,5	;RP0=0, select bank0
  3872     01CB  00A3               	movwf	___flmul@b+3
  3873     01CC  1683               	bsf	3,5	;RP0=1, select bank1
  3874     01CD  083C               	movf	(sprintf@fval+2)^(0+128),w
  3875     01CE  1283               	bcf	3,5	;RP0=0, select bank0
  3876     01CF  00A2               	movwf	___flmul@b+2
  3877     01D0  1683               	bsf	3,5	;RP0=1, select bank1
  3878     01D1  083B               	movf	(sprintf@fval+1)^(0+128),w
  3879     01D2  1283               	bcf	3,5	;RP0=0, select bank0
  3880     01D3  00A1               	movwf	___flmul@b+1
  3881     01D4  1683               	bsf	3,5	;RP0=1, select bank1
  3882     01D5  083A               	movf	sprintf@fval^(0+128),w
  3883     01D6  1283               	bcf	3,5	;RP0=0, select bank0
  3884     01D7  00A0               	movwf	___flmul@b
  3885     01D8  1683               	bsf	3,5	;RP0=1, select bank1
  3886     01D9  0838               	movf	(sprintf@tmpval+3)^(0+128),w
  3887     01DA  1283               	bcf	3,5	;RP0=0, select bank0
  3888     01DB  00A7               	movwf	___flmul@a+3
  3889     01DC  1683               	bsf	3,5	;RP0=1, select bank1
  3890     01DD  0837               	movf	(sprintf@tmpval+2)^(0+128),w
  3891     01DE  1283               	bcf	3,5	;RP0=0, select bank0
  3892     01DF  00A6               	movwf	___flmul@a+2
  3893     01E0  1683               	bsf	3,5	;RP0=1, select bank1
  3894     01E1  0836               	movf	(sprintf@tmpval+1)^(0+128),w
  3895     01E2  1283               	bcf	3,5	;RP0=0, select bank0
  3896     01E3  00A5               	movwf	___flmul@a+1
  3897     01E4  1683               	bsf	3,5	;RP0=1, select bank1
  3898     01E5  0835               	movf	sprintf@tmpval^(0+128),w
  3899     01E6  1283               	bcf	3,5	;RP0=0, select bank0
  3900     01E7  00A4               	movwf	___flmul@a
  3901     01E8  120A  158A  21F9  120A  118A  	fcall	___flmul
  3902     01ED  0823               	movf	?___flmul+3,w
  3903     01EE  1683               	bsf	3,5	;RP0=1, select bank1
  3904     01EF  00B8               	movwf	(sprintf@tmpval+3)^(0+128)
  3905     01F0  1283               	bcf	3,5	;RP0=0, select bank0
  3906     01F1  0822               	movf	?___flmul+2,w
  3907     01F2  1683               	bsf	3,5	;RP0=1, select bank1
  3908     01F3  00B7               	movwf	(sprintf@tmpval+2)^(0+128)
  3909     01F4  1283               	bcf	3,5	;RP0=0, select bank0
  3910     01F5  0821               	movf	?___flmul+1,w
  3911     01F6  1683               	bsf	3,5	;RP0=1, select bank1
  3912     01F7  00B6               	movwf	(sprintf@tmpval+1)^(0+128)
  3913     01F8  1283               	bcf	3,5	;RP0=0, select bank0
  3914     01F9  0820               	movf	?___flmul,w
  3915     01FA  1683               	bsf	3,5	;RP0=1, select bank1
  3916     01FB  00B5               	movwf	sprintf@tmpval^(0+128)
  3917                           
  3918                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 874:     if(tmpva
      +                          l.integ < 1.0)
  3919     01FC  0838               	movf	(sprintf@tmpval+3)^(0+128),w
  3920     01FD  00F3               	movwf	___flge@ff1+3
  3921     01FE  0837               	movf	(sprintf@tmpval+2)^(0+128),w
  3922     01FF  00F2               	movwf	___flge@ff1+2
  3923     0200  0836               	movf	(sprintf@tmpval+1)^(0+128),w
  3924     0201  00F1               	movwf	___flge@ff1+1
  3925     0202  0835               	movf	sprintf@tmpval^(0+128),w
  3926     0203  00F0               	movwf	___flge@ff1
  3927     0204  303F               	movlw	63
  3928     0205  00F7               	movwf	___flge@ff2+3
  3929     0206  3080               	movlw	128
  3930     0207  00F6               	movwf	___flge@ff2+2
  3931     0208  3000               	movlw	0
  3932     0209  00F5               	movwf	___flge@ff2+1
  3933     020A  3000               	movlw	0
  3934     020B  00F4               	movwf	___flge@ff2
  3935     020C  160A  118A  2323  120A  118A  	fcall	___flge
  3936     0211  1803               	btfsc	3,0
  3937     0212  2A19               	goto	i1l4453
  3938                           
  3939                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 875:      eexp--;
  3940     0213  30FF               	movlw	255
  3941     0214  07B3               	addwf	sprintf@eexp^(0+128),f
  3942     0215  1803               	skipnc
  3943     0216  0AB4               	incf	(sprintf@eexp+1)^(0+128),f
  3944     0217  30FF               	movlw	255
  3945     0218  2A35               	goto	L1
  3946     0219                     i1l4453:
  3947     0219  0838               	movf	(sprintf@tmpval+3)^(0+128),w
  3948     021A  00F3               	movwf	___flge@ff1+3
  3949     021B  0837               	movf	(sprintf@tmpval+2)^(0+128),w
  3950     021C  00F2               	movwf	___flge@ff1+2
  3951     021D  0836               	movf	(sprintf@tmpval+1)^(0+128),w
  3952     021E  00F1               	movwf	___flge@ff1+1
  3953     021F  0835               	movf	sprintf@tmpval^(0+128),w
  3954     0220  00F0               	movwf	___flge@ff1
  3955     0221  3041               	movlw	65
  3956     0222  00F7               	movwf	___flge@ff2+3
  3957     0223  3020               	movlw	32
  3958     0224  00F6               	movwf	___flge@ff2+2
  3959     0225  3000               	movlw	0
  3960     0226  00F5               	movwf	___flge@ff2+1
  3961     0227  3000               	movlw	0
  3962     0228  00F4               	movwf	___flge@ff2
  3963     0229  160A  118A  2323  120A  118A  	fcall	___flge
  3964     022E  1C03               	btfss	3,0
  3965     022F  2A36               	goto	i1l4457
  3966                           
  3967                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 877:      eexp++;
  3968     0230  3001               	movlw	1
  3969     0231  07B3               	addwf	sprintf@eexp^(0+128),f
  3970     0232  1803               	skipnc
  3971     0233  0AB4               	incf	(sprintf@eexp+1)^(0+128),f
  3972     0234  3000               	movlw	0
  3973     0235                     L1:
  3974     0235  07B4               	addwf	(sprintf@eexp+1)^(0+128),f
  3975     0236                     i1l4457:
  3976                           
  3977                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1138:      if(pre
      +                          c <= 12)
  3978     0236  083F               	movf	(sprintf@prec+1)^(0+128),w
  3979     0237  3A80               	xorlw	128
  3980     0238  00FF               	movwf	127
  3981     0239  3080               	movlw	128
  3982     023A  027F               	subwf	127,w
  3983     023B  1D03               	skipz
  3984     023C  2A3F               	goto	u674_25
  3985     023D  300D               	movlw	13
  3986     023E  023E               	subwf	sprintf@prec^(0+128),w
  3987     023F                     u674_25:
  3988     023F  1803               	skipnc
  3989     0240  2A75               	goto	i1l4461
  3990                           
  3991                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1139:       fval 
      +                          += fround((unsigned int)prec);
  3992     0241  1683               	bsf	3,5	;RP0=1, select bank1
  3993     0242  1303               	bcf	3,6	;RP1=0, select bank1
  3994     0243  083E               	movf	sprintf@prec^(0+128),w
  3995     0244  120A  158A  2042  120A  118A  	fcall	_fround
  3996     0249  083D               	movf	?_fround+3,w
  3997     024A  00CF               	movwf	___fladd@b+3
  3998     024B  083C               	movf	?_fround+2,w
  3999     024C  00CE               	movwf	___fladd@b+2
  4000     024D  083B               	movf	?_fround+1,w
  4001     024E  00CD               	movwf	___fladd@b+1
  4002     024F  083A               	movf	?_fround,w
  4003     0250  00CC               	movwf	___fladd@b
  4004     0251  1683               	bsf	3,5	;RP0=1, select bank1
  4005     0252  083D               	movf	(sprintf@fval+3)^(0+128),w
  4006     0253  1283               	bcf	3,5	;RP0=0, select bank0
  4007     0254  00D3               	movwf	___fladd@a+3
  4008     0255  1683               	bsf	3,5	;RP0=1, select bank1
  4009     0256  083C               	movf	(sprintf@fval+2)^(0+128),w
  4010     0257  1283               	bcf	3,5	;RP0=0, select bank0
  4011     0258  00D2               	movwf	___fladd@a+2
  4012     0259  1683               	bsf	3,5	;RP0=1, select bank1
  4013     025A  083B               	movf	(sprintf@fval+1)^(0+128),w
  4014     025B  1283               	bcf	3,5	;RP0=0, select bank0
  4015     025C  00D1               	movwf	___fladd@a+1
  4016     025D  1683               	bsf	3,5	;RP0=1, select bank1
  4017     025E  083A               	movf	sprintf@fval^(0+128),w
  4018     025F  1283               	bcf	3,5	;RP0=0, select bank0
  4019     0260  00D0               	movwf	___fladd@a
  4020     0261  120A  118A  25B4  120A  118A  	fcall	___fladd
  4021     0266  084F               	movf	?___fladd+3,w
  4022     0267  1683               	bsf	3,5	;RP0=1, select bank1
  4023     0268  00BD               	movwf	(sprintf@fval+3)^(0+128)
  4024     0269  1283               	bcf	3,5	;RP0=0, select bank0
  4025     026A  084E               	movf	?___fladd+2,w
  4026     026B  1683               	bsf	3,5	;RP0=1, select bank1
  4027     026C  00BC               	movwf	(sprintf@fval+2)^(0+128)
  4028     026D  1283               	bcf	3,5	;RP0=0, select bank0
  4029     026E  084D               	movf	?___fladd+1,w
  4030     026F  1683               	bsf	3,5	;RP0=1, select bank1
  4031     0270  00BB               	movwf	(sprintf@fval+1)^(0+128)
  4032     0271  1283               	bcf	3,5	;RP0=0, select bank0
  4033     0272  084C               	movf	?___fladd,w
  4034     0273  1683               	bsf	3,5	;RP0=1, select bank1
  4035     0274  00BA               	movwf	sprintf@fval^(0+128)
  4036     0275                     i1l4461:
  4037                           
  4038                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1142:     if((eex
      +                          p > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  4039     0275  1683               	bsf	3,5	;RP0=1, select bank1
  4040     0276  1303               	bcf	3,6	;RP1=0, select bank1
  4041     0277  0834               	movf	(sprintf@eexp+1)^(0+128),w
  4042     0278  3A80               	xorlw	128
  4043     0279  00FF               	movwf	127
  4044     027A  3080               	movlw	128
  4045     027B  027F               	subwf	127,w
  4046     027C  1D03               	skipz
  4047     027D  2A80               	goto	u675_25
  4048     027E  300A               	movlw	10
  4049     027F  0233               	subwf	sprintf@eexp^(0+128),w
  4050     0280                     u675_25:
  4051     0280  1803               	skipnc
  4052     0281  2AC1               	goto	i1l4469
  4053     0282  1683               	bsf	3,5	;RP0=1, select bank1
  4054     0283  1303               	bcf	3,6	;RP1=0, select bank1
  4055     0284  083D               	movf	(sprintf@fval+3)^(0+128),w
  4056     0285  00F3               	movwf	___fleq@ff1+3
  4057     0286  083C               	movf	(sprintf@fval+2)^(0+128),w
  4058     0287  00F2               	movwf	___fleq@ff1+2
  4059     0288  083B               	movf	(sprintf@fval+1)^(0+128),w
  4060     0289  00F1               	movwf	___fleq@ff1+1
  4061     028A  083A               	movf	sprintf@fval^(0+128),w
  4062     028B  00F0               	movwf	___fleq@ff1
  4063     028C  3000               	movlw	0
  4064     028D  00F7               	movwf	___fleq@ff2+3
  4065     028E  3000               	movlw	0
  4066     028F  00F6               	movwf	___fleq@ff2+2
  4067     0290  3000               	movlw	0
  4068     0291  00F5               	movwf	___fleq@ff2+1
  4069     0292  3000               	movlw	0
  4070     0293  00F4               	movwf	___fleq@ff2
  4071     0294  160A  158A  2565  120A  118A  	fcall	___fleq
  4072     0299  1803               	btfsc	3,0
  4073     029A  2B1E               	goto	i1l4483
  4074     029B  083D               	movf	(sprintf@fval+3)^(0+128),w
  4075     029C  1283               	bcf	3,5	;RP0=0, select bank0
  4076     029D  00D0               	movwf	___fltol@f1+3
  4077     029E  1683               	bsf	3,5	;RP0=1, select bank1
  4078     029F  083C               	movf	(sprintf@fval+2)^(0+128),w
  4079     02A0  1283               	bcf	3,5	;RP0=0, select bank0
  4080     02A1  00CF               	movwf	___fltol@f1+2
  4081     02A2  1683               	bsf	3,5	;RP0=1, select bank1
  4082     02A3  083B               	movf	(sprintf@fval+1)^(0+128),w
  4083     02A4  1283               	bcf	3,5	;RP0=0, select bank0
  4084     02A5  00CE               	movwf	___fltol@f1+1
  4085     02A6  1683               	bsf	3,5	;RP0=1, select bank1
  4086     02A7  083A               	movf	sprintf@fval^(0+128),w
  4087     02A8  1283               	bcf	3,5	;RP0=0, select bank0
  4088     02A9  00CD               	movwf	___fltol@f1
  4089     02AA  160A  118A  20FF  120A  118A  	fcall	___fltol
  4090     02AF  0850               	movf	?___fltol+3,w
  4091     02B0  044F               	iorwf	?___fltol+2,w
  4092     02B1  044E               	iorwf	?___fltol+1,w
  4093     02B2  044D               	iorwf	?___fltol,w
  4094     02B3  1D03               	skipz
  4095     02B4  2B1E               	goto	i1l4483
  4096     02B5  1683               	bsf	3,5	;RP0=1, select bank1
  4097     02B6  0834               	movf	(sprintf@eexp+1)^(0+128),w
  4098     02B7  3A80               	xorlw	128
  4099     02B8  00FF               	movwf	127
  4100     02B9  3080               	movlw	128
  4101     02BA  027F               	subwf	127,w
  4102     02BB  1D03               	skipz
  4103     02BC  2ABF               	goto	u678_25
  4104     02BD  3002               	movlw	2
  4105     02BE  0233               	subwf	sprintf@eexp^(0+128),w
  4106     02BF                     u678_25:
  4107     02BF  1C03               	skipc
  4108     02C0  2B1E               	goto	i1l4483
  4109     02C1                     i1l4469:
  4110                           
  4111                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1146:      if(tmp
      +                          val.integ < 4.294967296){
  4112     02C1  1683               	bsf	3,5	;RP0=1, select bank1
  4113     02C2  1303               	bcf	3,6	;RP1=0, select bank1
  4114     02C3  0838               	movf	(sprintf@tmpval+3)^(0+128),w
  4115     02C4  00F3               	movwf	___flge@ff1+3
  4116     02C5  0837               	movf	(sprintf@tmpval+2)^(0+128),w
  4117     02C6  00F2               	movwf	___flge@ff1+2
  4118     02C7  0836               	movf	(sprintf@tmpval+1)^(0+128),w
  4119     02C8  00F1               	movwf	___flge@ff1+1
  4120     02C9  0835               	movf	sprintf@tmpval^(0+128),w
  4121     02CA  00F0               	movwf	___flge@ff1
  4122     02CB  3040               	movlw	64
  4123     02CC  00F7               	movwf	___flge@ff2+3
  4124     02CD  3089               	movlw	137
  4125     02CE  00F6               	movwf	___flge@ff2+2
  4126     02CF  3070               	movlw	112
  4127     02D0  00F5               	movwf	___flge@ff2+1
  4128     02D1  305F               	movlw	95
  4129     02D2  00F4               	movwf	___flge@ff2
  4130     02D3  160A  118A  2323  120A  118A  	fcall	___flge
  4131     02D8  1803               	btfsc	3,0
  4132     02D9  2ADC               	goto	i1l4473
  4133                           
  4134                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1147:       eexp 
      +                          -= (sizeof dpowers/sizeof dpowers[0])-1;
  4135     02DA  30F7               	movlw	247
  4136     02DB  2ADD               	goto	L2
  4137     02DC                     i1l4473:	
  4138                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1148:      }else{
  4139                           
  4140                           
  4141                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1149:       eexp 
      +                          -= (sizeof dpowers/sizeof dpowers[0])-2;
  4142     02DC  30F8               	movlw	248
  4143     02DD                     L2:
  4144     02DD  07B3               	addwf	sprintf@eexp^(0+128),f
  4145     02DE  1803               	skipnc
  4146     02DF  0AB4               	incf	(sprintf@eexp+1)^(0+128),f
  4147     02E0  30FF               	movlw	255
  4148     02E1  07B4               	addwf	(sprintf@eexp+1)^(0+128),f
  4149                           
  4150                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1152:      val = 
      +                          ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_l_(fval,tmpval.integ));
  4151     02E2  0833               	movf	sprintf@eexp^(0+128),w
  4152     02E3  120A  158A  24D2  120A  118A  	fcall	_scale
  4153     02E8  083D               	movf	?_scale+3,w
  4154     02E9  1683               	bsf	3,5	;RP0=1, select bank1
  4155     02EA  00B8               	movwf	(sprintf@tmpval+3)^(0+128)
  4156     02EB  1283               	bcf	3,5	;RP0=0, select bank0
  4157     02EC  083C               	movf	?_scale+2,w
  4158     02ED  1683               	bsf	3,5	;RP0=1, select bank1
  4159     02EE  00B7               	movwf	(sprintf@tmpval+2)^(0+128)
  4160     02EF  1283               	bcf	3,5	;RP0=0, select bank0
  4161     02F0  083B               	movf	?_scale+1,w
  4162     02F1  1683               	bsf	3,5	;RP0=1, select bank1
  4163     02F2  00B6               	movwf	(sprintf@tmpval+1)^(0+128)
  4164     02F3  1283               	bcf	3,5	;RP0=0, select bank0
  4165     02F4  083A               	movf	?_scale,w
  4166     02F5  1683               	bsf	3,5	;RP0=1, select bank1
  4167     02F6  00B5               	movwf	sprintf@tmpval^(0+128)
  4168     02F7  083D               	movf	(sprintf@fval+3)^(0+128),w
  4169     02F8  00F3               	movwf	__div_to_l_@f1+3
  4170     02F9  083C               	movf	(sprintf@fval+2)^(0+128),w
  4171     02FA  00F2               	movwf	__div_to_l_@f1+2
  4172     02FB  083B               	movf	(sprintf@fval+1)^(0+128),w
  4173     02FC  00F1               	movwf	__div_to_l_@f1+1
  4174     02FD  083A               	movf	sprintf@fval^(0+128),w
  4175     02FE  00F0               	movwf	__div_to_l_@f1
  4176     02FF  0838               	movf	(sprintf@tmpval+3)^(0+128),w
  4177     0300  00F7               	movwf	__div_to_l_@f2+3
  4178     0301  0837               	movf	(sprintf@tmpval+2)^(0+128),w
  4179     0302  00F6               	movwf	__div_to_l_@f2+2
  4180     0303  0836               	movf	(sprintf@tmpval+1)^(0+128),w
  4181     0304  00F5               	movwf	__div_to_l_@f2+1
  4182     0305  0835               	movf	sprintf@tmpval^(0+128),w
  4183     0306  00F4               	movwf	__div_to_l_@f2
  4184     0307  160A  118A  2457  120A  118A  	fcall	__div_to_l_
  4185     030C  0873               	movf	?__div_to_l_+3,w
  4186     030D  1683               	bsf	3,5	;RP0=1, select bank1
  4187     030E  00B2               	movwf	(sprintf@val+3)^(0+128)
  4188     030F  0872               	movf	?__div_to_l_+2,w
  4189     0310  00B1               	movwf	(sprintf@val+2)^(0+128)
  4190     0311  0871               	movf	?__div_to_l_+1,w
  4191     0312  00B0               	movwf	(sprintf@val+1)^(0+128)
  4192     0313  0870               	movf	?__div_to_l_,w
  4193     0314  00AF               	movwf	sprintf@val^(0+128)
  4194                           
  4195                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1155:      fval =
      +                           0.0;
  4196     0315  3000               	movlw	0
  4197     0316  00BD               	movwf	(sprintf@fval+3)^(0+128)
  4198     0317  3000               	movlw	0
  4199     0318  00BC               	movwf	(sprintf@fval+2)^(0+128)
  4200     0319  3000               	movlw	0
  4201     031A  00BB               	movwf	(sprintf@fval+1)^(0+128)
  4202     031B  3000               	movlw	0
  4203     031C  00BA               	movwf	sprintf@fval^(0+128)
  4204                           
  4205                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1156:     } else 
      +                          {
  4206     031D  2B80               	goto	i1l4487
  4207     031E                     i1l4483:
  4208                           
  4209                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1157:      val = 
      +                          (unsigned long)fval;
  4210     031E  1683               	bsf	3,5	;RP0=1, select bank1
  4211     031F  1303               	bcf	3,6	;RP1=0, select bank1
  4212     0320  083D               	movf	(sprintf@fval+3)^(0+128),w
  4213     0321  1283               	bcf	3,5	;RP0=0, select bank0
  4214     0322  00D0               	movwf	___fltol@f1+3
  4215     0323  1683               	bsf	3,5	;RP0=1, select bank1
  4216     0324  083C               	movf	(sprintf@fval+2)^(0+128),w
  4217     0325  1283               	bcf	3,5	;RP0=0, select bank0
  4218     0326  00CF               	movwf	___fltol@f1+2
  4219     0327  1683               	bsf	3,5	;RP0=1, select bank1
  4220     0328  083B               	movf	(sprintf@fval+1)^(0+128),w
  4221     0329  1283               	bcf	3,5	;RP0=0, select bank0
  4222     032A  00CE               	movwf	___fltol@f1+1
  4223     032B  1683               	bsf	3,5	;RP0=1, select bank1
  4224     032C  083A               	movf	sprintf@fval^(0+128),w
  4225     032D  1283               	bcf	3,5	;RP0=0, select bank0
  4226     032E  00CD               	movwf	___fltol@f1
  4227     032F  160A  118A  20FF  120A  118A  	fcall	___fltol
  4228     0334  0850               	movf	?___fltol+3,w
  4229     0335  1683               	bsf	3,5	;RP0=1, select bank1
  4230     0336  00B2               	movwf	(sprintf@val+3)^(0+128)
  4231     0337  1283               	bcf	3,5	;RP0=0, select bank0
  4232     0338  084F               	movf	?___fltol+2,w
  4233     0339  1683               	bsf	3,5	;RP0=1, select bank1
  4234     033A  00B1               	movwf	(sprintf@val+2)^(0+128)
  4235     033B  1283               	bcf	3,5	;RP0=0, select bank0
  4236     033C  084E               	movf	?___fltol+1,w
  4237     033D  1683               	bsf	3,5	;RP0=1, select bank1
  4238     033E  00B0               	movwf	(sprintf@val+1)^(0+128)
  4239     033F  1283               	bcf	3,5	;RP0=0, select bank0
  4240     0340  084D               	movf	?___fltol,w
  4241     0341  1683               	bsf	3,5	;RP0=1, select bank1
  4242     0342  00AF               	movwf	sprintf@val^(0+128)
  4243                           
  4244                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1158:      fval -
      +                          = (double)val;
  4245     0343  0832               	movf	(sprintf@val+3)^(0+128),w
  4246     0344  00F3               	movwf	___xxtofl@val+3
  4247     0345  0831               	movf	(sprintf@val+2)^(0+128),w
  4248     0346  00F2               	movwf	___xxtofl@val+2
  4249     0347  0830               	movf	(sprintf@val+1)^(0+128),w
  4250     0348  00F1               	movwf	___xxtofl@val+1
  4251     0349  082F               	movf	sprintf@val^(0+128),w
  4252     034A  00F0               	movwf	___xxtofl@val
  4253     034B  3000               	movlw	0
  4254     034C  160A  118A  23B6  120A  118A  	fcall	___xxtofl
  4255     0351  0873               	movf	?___xxtofl+3,w
  4256     0352  1283               	bcf	3,5	;RP0=0, select bank0
  4257     0353  00E3               	movwf	___flsub@a+3
  4258     0354  0872               	movf	?___xxtofl+2,w
  4259     0355  00E2               	movwf	___flsub@a+2
  4260     0356  0871               	movf	?___xxtofl+1,w
  4261     0357  00E1               	movwf	___flsub@a+1
  4262     0358  0870               	movf	?___xxtofl,w
  4263     0359  00E0               	movwf	___flsub@a
  4264     035A  1683               	bsf	3,5	;RP0=1, select bank1
  4265     035B  083D               	movf	(sprintf@fval+3)^(0+128),w
  4266     035C  1283               	bcf	3,5	;RP0=0, select bank0
  4267     035D  00E7               	movwf	___flsub@b+3
  4268     035E  1683               	bsf	3,5	;RP0=1, select bank1
  4269     035F  083C               	movf	(sprintf@fval+2)^(0+128),w
  4270     0360  1283               	bcf	3,5	;RP0=0, select bank0
  4271     0361  00E6               	movwf	___flsub@b+2
  4272     0362  1683               	bsf	3,5	;RP0=1, select bank1
  4273     0363  083B               	movf	(sprintf@fval+1)^(0+128),w
  4274     0364  1283               	bcf	3,5	;RP0=0, select bank0
  4275     0365  00E5               	movwf	___flsub@b+1
  4276     0366  1683               	bsf	3,5	;RP0=1, select bank1
  4277     0367  083A               	movf	sprintf@fval^(0+128),w
  4278     0368  1283               	bcf	3,5	;RP0=0, select bank0
  4279     0369  00E4               	movwf	___flsub@b
  4280     036A  160A  158A  2273  120A  118A  	fcall	___flsub
  4281     036F  0863               	movf	?___flsub+3,w
  4282     0370  1683               	bsf	3,5	;RP0=1, select bank1
  4283     0371  00BD               	movwf	(sprintf@fval+3)^(0+128)
  4284     0372  1283               	bcf	3,5	;RP0=0, select bank0
  4285     0373  0862               	movf	?___flsub+2,w
  4286     0374  1683               	bsf	3,5	;RP0=1, select bank1
  4287     0375  00BC               	movwf	(sprintf@fval+2)^(0+128)
  4288     0376  1283               	bcf	3,5	;RP0=0, select bank0
  4289     0377  0861               	movf	?___flsub+1,w
  4290     0378  1683               	bsf	3,5	;RP0=1, select bank1
  4291     0379  00BB               	movwf	(sprintf@fval+1)^(0+128)
  4292     037A  1283               	bcf	3,5	;RP0=0, select bank0
  4293     037B  0860               	movf	?___flsub,w
  4294     037C  1683               	bsf	3,5	;RP0=1, select bank1
  4295     037D  00BA               	movwf	sprintf@fval^(0+128)
  4296                           
  4297                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1159:      eexp =
      +                           0;
  4298     037E  01B3               	clrf	sprintf@eexp^(0+128)
  4299     037F  01B4               	clrf	(sprintf@eexp+1)^(0+128)
  4300     0380                     i1l4487:
  4301                           
  4302                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1162:     for(c =
      +                           1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4303     0380  01C0               	clrf	sprintf@c^(0+128)
  4304     0381  0AC0               	incf	sprintf@c^(0+128),f
  4305     0382                     i1l4489:
  4306     0382  300A               	movlw	10
  4307     0383  0640               	xorwf	sprintf@c^(0+128),w
  4308     0384  1903               	btfsc	3,2
  4309     0385  2BBF               	goto	i1l4501
  4310                           
  4311                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1163:      if(val
      +                           < dpowers[c])
  4312     0386  0840               	movf	sprintf@c^(0+128),w
  4313     0387  00A0               	movwf	??_sprintf^(0+128)
  4314     0388  3001               	movlw	1
  4315     0389                     u681_25:
  4316     0389  1003               	clrc
  4317     038A  0DA0               	rlf	??_sprintf^(0+128),f
  4318     038B  3EFF               	addlw	-1
  4319     038C  1D03               	skipz
  4320     038D  2B89               	goto	u681_25
  4321     038E  1003               	clrc
  4322     038F  0D20               	rlf	??_sprintf^(0+128),w
  4323     0390  3E69               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4324     0391  0084               	movwf	4
  4325     0392  160A  118A  200A  120A  118A  	fcall	stringdir
  4326     0397  00A1               	movwf	(??_sprintf+1)^(0+128)
  4327     0398  160A  118A  200A  120A  118A  	fcall	stringdir
  4328     039D  00A2               	movwf	((??_sprintf+1)^(0+128)+1)
  4329     039E  160A  118A  200A  120A  118A  	fcall	stringdir
  4330     03A3  00A3               	movwf	((??_sprintf+1)^(0+128)+2)
  4331     03A4  160A  118A  200A  120A  118A  	fcall	stringdir
  4332     03A9  00A4               	movwf	((??_sprintf+1)^(0+128)+3)
  4333     03AA  0824               	movf	(??_sprintf+4)^(0+128),w
  4334     03AB  0232               	subwf	(sprintf@val+3)^(0+128),w
  4335     03AC  1D03               	skipz
  4336     03AD  2BB8               	goto	u682_25
  4337     03AE  0823               	movf	(??_sprintf+3)^(0+128),w
  4338     03AF  0231               	subwf	(sprintf@val+2)^(0+128),w
  4339     03B0  1D03               	skipz
  4340     03B1  2BB8               	goto	u682_25
  4341     03B2  0822               	movf	(??_sprintf+2)^(0+128),w
  4342     03B3  0230               	subwf	(sprintf@val+1)^(0+128),w
  4343     03B4  1D03               	skipz
  4344     03B5  2BB8               	goto	u682_25
  4345     03B6  0821               	movf	(??_sprintf+1)^(0+128),w
  4346     03B7  022F               	subwf	sprintf@val^(0+128),w
  4347     03B8                     u682_25:
  4348     03B8  1C03               	btfss	3,0
  4349     03B9  2BBF               	goto	i1l4501
  4350     03BA  3001               	movlw	1
  4351     03BB  00FF               	movwf	127
  4352     03BC  087F               	movf	127,w
  4353     03BD  07C0               	addwf	sprintf@c^(0+128),f
  4354     03BE  2B82               	goto	i1l4489
  4355     03BF                     i1l4501:
  4356                           
  4357                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1201:     {;C:\Pr
      +                          ogram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1214:     if(flag & 0x0
      +                          3)
  4358     03BF  082D               	movf	sprintf@flag^(0+128),w
  4359     03C0  3903               	andlw	3
  4360     03C1  1903               	btfsc	3,2
  4361     03C2  2BCC               	goto	i1l4515
  4362                           
  4363                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1216:      ((*sp+
      +                          + = ('-')));
  4364     03C3  0839               	movf	sprintf@sp^(0+128),w
  4365     03C4  0084               	movwf	4
  4366     03C5  302D               	movlw	45
  4367     03C6                     L6:
  4368     03C6  1783               	bsf	3,7	;select IRP bank2
  4369     03C7  0080               	movwf	0
  4370     03C8  3001               	movlw	1
  4371     03C9  00FF               	movwf	127
  4372     03CA  087F               	movf	127,w
  4373     03CB  07B9               	addwf	sprintf@sp^(0+128),f
  4374     03CC                     i1l4515:
  4375                           
  4376                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1222:    while(c-
      +                          -) {
  4377     03CC  3001               	movlw	1
  4378     03CD  02C0               	subwf	sprintf@c^(0+128),f
  4379     03CE  0A40               	incf	sprintf@c^(0+128),w
  4380     03CF  1903               	btfsc	3,2
  4381     03D0  2C3D               	goto	i1l4523
  4382                           
  4383                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1226:     {;C:\Pr
      +                          ogram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1227:      tmpval.vd = 
      +                          val/dpowers[c];
  4384     03D1  0840               	movf	sprintf@c^(0+128),w
  4385     03D2  00A0               	movwf	??_sprintf^(0+128)
  4386     03D3  3001               	movlw	1
  4387     03D4                     u684_25:
  4388     03D4  1003               	clrc
  4389     03D5  0DA0               	rlf	??_sprintf^(0+128),f
  4390     03D6  3EFF               	addlw	-1
  4391     03D7  1D03               	skipz
  4392     03D8  2BD4               	goto	u684_25
  4393     03D9  1003               	clrc
  4394     03DA  0D20               	rlf	??_sprintf^(0+128),w
  4395     03DB  3E69               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4396     03DC  0084               	movwf	4
  4397     03DD  160A  118A  200A  120A  118A  	fcall	stringdir
  4398     03E2  00F0               	movwf	___lldiv@divisor
  4399     03E3  160A  118A  200A  120A  118A  	fcall	stringdir
  4400     03E8  00F1               	movwf	___lldiv@divisor+1
  4401     03E9  160A  118A  200A  120A  118A  	fcall	stringdir
  4402     03EE  00F2               	movwf	___lldiv@divisor+2
  4403     03EF  160A  118A  200A  120A  118A  	fcall	stringdir
  4404     03F4  00F3               	movwf	___lldiv@divisor+3
  4405     03F5  0832               	movf	(sprintf@val+3)^(0+128),w
  4406     03F6  00F7               	movwf	___lldiv@dividend+3
  4407     03F7  0831               	movf	(sprintf@val+2)^(0+128),w
  4408     03F8  00F6               	movwf	___lldiv@dividend+2
  4409     03F9  0830               	movf	(sprintf@val+1)^(0+128),w
  4410     03FA  00F5               	movwf	___lldiv@dividend+1
  4411     03FB  082F               	movf	sprintf@val^(0+128),w
  4412     03FC  00F4               	movwf	___lldiv@dividend
  4413     03FD  160A  158A  273D  120A  118A  	fcall	___lldiv
  4414     0402  0873               	movf	?___lldiv+3,w
  4415     0403  00B8               	movwf	(sprintf@tmpval+3)^(0+128)
  4416     0404  0872               	movf	?___lldiv+2,w
  4417     0405  00B7               	movwf	(sprintf@tmpval+2)^(0+128)
  4418     0406  0871               	movf	?___lldiv+1,w
  4419     0407  00B6               	movwf	(sprintf@tmpval+1)^(0+128)
  4420     0408  0870               	movf	?___lldiv,w
  4421     0409  00B5               	movwf	sprintf@tmpval^(0+128)
  4422                           
  4423                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1228:      tmpval
      +                          .vd %= 10;
  4424     040A  3000               	movlw	0
  4425     040B  00F3               	movwf	___llmod@divisor+3
  4426     040C  3000               	movlw	0
  4427     040D  00F2               	movwf	___llmod@divisor+2
  4428     040E  3000               	movlw	0
  4429     040F  00F1               	movwf	___llmod@divisor+1
  4430     0410  300A               	movlw	10
  4431     0411  00F0               	movwf	___llmod@divisor
  4432     0412  0838               	movf	(sprintf@tmpval+3)^(0+128),w
  4433     0413  00F7               	movwf	___llmod@dividend+3
  4434     0414  0837               	movf	(sprintf@tmpval+2)^(0+128),w
  4435     0415  00F6               	movwf	___llmod@dividend+2
  4436     0416  0836               	movf	(sprintf@tmpval+1)^(0+128),w
  4437     0417  00F5               	movwf	___llmod@dividend+1
  4438     0418  0835               	movf	sprintf@tmpval^(0+128),w
  4439     0419  00F4               	movwf	___llmod@dividend
  4440     041A  160A  158A  2641  120A  118A  	fcall	___llmod
  4441     041F  0873               	movf	?___llmod+3,w
  4442     0420  00B8               	movwf	(sprintf@tmpval+3)^(0+128)
  4443     0421  0872               	movf	?___llmod+2,w
  4444     0422  00B7               	movwf	(sprintf@tmpval+2)^(0+128)
  4445     0423  0871               	movf	?___llmod+1,w
  4446     0424  00B6               	movwf	(sprintf@tmpval+1)^(0+128)
  4447     0425  0870               	movf	?___llmod,w
  4448     0426  00B5               	movwf	sprintf@tmpval^(0+128)
  4449                           
  4450                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1229:      ((*sp+
      +                          + = ('0' + tmpval.vd)));
  4451     0427  0839               	movf	sprintf@sp^(0+128),w
  4452     0428  0084               	movwf	4
  4453     0429  0835               	movf	sprintf@tmpval^(0+128),w
  4454     042A  3E30               	addlw	48
  4455     042B  2BC6               	goto	L6
  4456     042C                     i1l4517:
  4457                           
  4458                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1234:     ((*sp++
      +                           = ('0')));
  4459     042C  1683               	bsf	3,5	;RP0=1, select bank1
  4460     042D  1303               	bcf	3,6	;RP1=0, select bank1
  4461     042E  0839               	movf	sprintf@sp^(0+128),w
  4462     042F  0084               	movwf	4
  4463     0430  3030               	movlw	48
  4464     0431  1783               	bsf	3,7	;select IRP bank2
  4465     0432  0080               	movwf	0
  4466     0433  3001               	movlw	1
  4467     0434  00FF               	movwf	127
  4468     0435  087F               	movf	127,w
  4469     0436  07B9               	addwf	sprintf@sp^(0+128),f
  4470                           
  4471                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1235:     eexp--;
  4472     0437  30FF               	movlw	255
  4473     0438  07B3               	addwf	sprintf@eexp^(0+128),f
  4474     0439  1803               	skipnc
  4475     043A  0AB4               	incf	(sprintf@eexp+1)^(0+128),f
  4476     043B  30FF               	movlw	255
  4477     043C  07B4               	addwf	(sprintf@eexp+1)^(0+128),f
  4478     043D                     i1l4523:
  4479                           
  4480                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1233:    while(ee
      +                          xp > 0) {
  4481     043D  0834               	movf	(sprintf@eexp+1)^(0+128),w
  4482     043E  3A80               	xorlw	128
  4483     043F  00FF               	movwf	127
  4484     0440  3080               	movlw	128
  4485     0441  027F               	subwf	127,w
  4486     0442  1D03               	skipz
  4487     0443  2C46               	goto	u686_25
  4488     0444  3001               	movlw	1
  4489     0445  0233               	subwf	sprintf@eexp^(0+128),w
  4490     0446                     u686_25:
  4491     0446  1803               	skipnc
  4492     0447  2C2C               	goto	i1l4517
  4493                           
  4494                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1237:    if(prec 
      +                          > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4495     0448  1683               	bsf	3,5	;RP0=1, select bank1
  4496     0449  1303               	bcf	3,6	;RP1=0, select bank1
  4497     044A  083F               	movf	(sprintf@prec+1)^(0+128),w
  4498     044B  3A80               	xorlw	128
  4499     044C  00FF               	movwf	127
  4500     044D  3080               	movlw	128
  4501     044E  027F               	subwf	127,w
  4502     044F  1D03               	skipz
  4503     0450  2C53               	goto	u687_25
  4504     0451  3009               	movlw	9
  4505     0452  023E               	subwf	sprintf@prec^(0+128),w
  4506     0453                     u687_25:
  4507     0453  1C03               	skipc
  4508     0454  2C59               	goto	i1l4529
  4509                           
  4510                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1238:     c = (si
      +                          zeof dpowers/sizeof dpowers[0])-2;
  4511     0455  3008               	movlw	8
  4512     0456  1683               	bsf	3,5	;RP0=1, select bank1
  4513     0457  1303               	bcf	3,6	;RP1=0, select bank1
  4514     0458  2C5C               	goto	L3
  4515     0459                     i1l4529:
  4516                           
  4517                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1240:     c = (ch
      +                          ar)prec;
  4518     0459  1683               	bsf	3,5	;RP0=1, select bank1
  4519     045A  1303               	bcf	3,6	;RP1=0, select bank1
  4520     045B  083E               	movf	sprintf@prec^(0+128),w
  4521     045C                     L3:
  4522     045C  00C0               	movwf	sprintf@c^(0+128)
  4523                           
  4524                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1241:    prec -= 
      +                          (int)c;
  4525     045D  0840               	movf	sprintf@c^(0+128),w
  4526     045E  00A0               	movwf	??_sprintf^(0+128)
  4527     045F  01A1               	clrf	(??_sprintf^(0+128)+1)
  4528     0460  0820               	movf	??_sprintf^(0+128),w
  4529     0461  02BE               	subwf	sprintf@prec^(0+128),f
  4530     0462  0821               	movf	(??_sprintf+1)^(0+128),w
  4531     0463  1C03               	skipc
  4532     0464  03BF               	decf	(sprintf@prec+1)^(0+128),f
  4533     0465  02BF               	subwf	(sprintf@prec+1)^(0+128),f
  4534                           
  4535                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1245:    if(c)
  4536     0466  0840               	movf	sprintf@c^(0+128),w
  4537     0467  1903               	btfsc	3,2
  4538     0468  2C72               	goto	i1l4537
  4539                           
  4540                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1247:     ((*sp++
      +                           = ('.')));
  4541     0469  0839               	movf	sprintf@sp^(0+128),w
  4542     046A  0084               	movwf	4
  4543     046B  302E               	movlw	46
  4544     046C  1783               	bsf	3,7	;select IRP bank2
  4545     046D  0080               	movwf	0
  4546     046E  3001               	movlw	1
  4547     046F  00FF               	movwf	127
  4548     0470  087F               	movf	127,w
  4549     0471  07B9               	addwf	sprintf@sp^(0+128),f
  4550     0472                     i1l4537:
  4551                           
  4552                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1253:    val = (u
      +                          nsigned long)(fval * scale((signed char)c));
  4553     0472  0840               	movf	sprintf@c^(0+128),w
  4554     0473  120A  158A  24D2  120A  118A  	fcall	_scale
  4555     0478  083D               	movf	?_scale+3,w
  4556     0479  1683               	bsf	3,5	;RP0=1, select bank1
  4557     047A  00A8               	movwf	(_sprintf$1224+3)^(0+128)
  4558     047B  1283               	bcf	3,5	;RP0=0, select bank0
  4559     047C  083C               	movf	?_scale+2,w
  4560     047D  1683               	bsf	3,5	;RP0=1, select bank1
  4561     047E  00A7               	movwf	(_sprintf$1224+2)^(0+128)
  4562     047F  1283               	bcf	3,5	;RP0=0, select bank0
  4563     0480  083B               	movf	?_scale+1,w
  4564     0481  1683               	bsf	3,5	;RP0=1, select bank1
  4565     0482  00A6               	movwf	(_sprintf$1224+1)^(0+128)
  4566     0483  1283               	bcf	3,5	;RP0=0, select bank0
  4567     0484  083A               	movf	?_scale,w
  4568     0485  1683               	bsf	3,5	;RP0=1, select bank1
  4569     0486  00A5               	movwf	_sprintf$1224^(0+128)
  4570                           
  4571                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1253:    val = (u
      +                          nsigned long)(fval * scale((signed char)c));
  4572     0487  0828               	movf	(_sprintf$1224+3)^(0+128),w
  4573     0488  1283               	bcf	3,5	;RP0=0, select bank0
  4574     0489  00A7               	movwf	___flmul@a+3
  4575     048A  1683               	bsf	3,5	;RP0=1, select bank1
  4576     048B  0827               	movf	(_sprintf$1224+2)^(0+128),w
  4577     048C  1283               	bcf	3,5	;RP0=0, select bank0
  4578     048D  00A6               	movwf	___flmul@a+2
  4579     048E  1683               	bsf	3,5	;RP0=1, select bank1
  4580     048F  0826               	movf	(_sprintf$1224+1)^(0+128),w
  4581     0490  1283               	bcf	3,5	;RP0=0, select bank0
  4582     0491  00A5               	movwf	___flmul@a+1
  4583     0492  1683               	bsf	3,5	;RP0=1, select bank1
  4584     0493  0825               	movf	_sprintf$1224^(0+128),w
  4585     0494  1283               	bcf	3,5	;RP0=0, select bank0
  4586     0495  00A4               	movwf	___flmul@a
  4587     0496  1683               	bsf	3,5	;RP0=1, select bank1
  4588     0497  083D               	movf	(sprintf@fval+3)^(0+128),w
  4589     0498  1283               	bcf	3,5	;RP0=0, select bank0
  4590     0499  00A3               	movwf	___flmul@b+3
  4591     049A  1683               	bsf	3,5	;RP0=1, select bank1
  4592     049B  083C               	movf	(sprintf@fval+2)^(0+128),w
  4593     049C  1283               	bcf	3,5	;RP0=0, select bank0
  4594     049D  00A2               	movwf	___flmul@b+2
  4595     049E  1683               	bsf	3,5	;RP0=1, select bank1
  4596     049F  083B               	movf	(sprintf@fval+1)^(0+128),w
  4597     04A0  1283               	bcf	3,5	;RP0=0, select bank0
  4598     04A1  00A1               	movwf	___flmul@b+1
  4599     04A2  1683               	bsf	3,5	;RP0=1, select bank1
  4600     04A3  083A               	movf	sprintf@fval^(0+128),w
  4601     04A4  1283               	bcf	3,5	;RP0=0, select bank0
  4602     04A5  00A0               	movwf	___flmul@b
  4603     04A6  120A  158A  21F9  120A  118A  	fcall	___flmul
  4604     04AB  0823               	movf	?___flmul+3,w
  4605     04AC  00D0               	movwf	___fltol@f1+3
  4606     04AD  0822               	movf	?___flmul+2,w
  4607     04AE  00CF               	movwf	___fltol@f1+2
  4608     04AF  0821               	movf	?___flmul+1,w
  4609     04B0  00CE               	movwf	___fltol@f1+1
  4610     04B1  0820               	movf	?___flmul,w
  4611     04B2  00CD               	movwf	___fltol@f1
  4612     04B3  160A  118A  20FF  120A  118A  	fcall	___fltol
  4613     04B8  0850               	movf	?___fltol+3,w
  4614     04B9  1683               	bsf	3,5	;RP0=1, select bank1
  4615     04BA  00B2               	movwf	(sprintf@val+3)^(0+128)
  4616     04BB  1283               	bcf	3,5	;RP0=0, select bank0
  4617     04BC  084F               	movf	?___fltol+2,w
  4618     04BD  1683               	bsf	3,5	;RP0=1, select bank1
  4619     04BE  00B1               	movwf	(sprintf@val+2)^(0+128)
  4620     04BF  1283               	bcf	3,5	;RP0=0, select bank0
  4621     04C0  084E               	movf	?___fltol+1,w
  4622     04C1  1683               	bsf	3,5	;RP0=1, select bank1
  4623     04C2  00B0               	movwf	(sprintf@val+1)^(0+128)
  4624     04C3  1283               	bcf	3,5	;RP0=0, select bank0
  4625     04C4  084D               	movf	?___fltol,w
  4626     04C5  1683               	bsf	3,5	;RP0=1, select bank1
  4627     04C6                     L4:
  4628     04C6  00AF               	movwf	sprintf@val^(0+128)
  4629                           
  4630                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1254:    while(c-
      +                          -) {
  4631     04C7  3001               	movlw	1
  4632     04C8  02C0               	subwf	sprintf@c^(0+128),f
  4633     04C9  0A40               	incf	sprintf@c^(0+128),w
  4634     04CA  1903               	btfsc	3,2
  4635     04CB  2D74               	goto	i1l4559
  4636                           
  4637                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1255:     tmpval.
      +                          vd = val/dpowers[c];
  4638                           
  4639                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1254:    while(c-
      +                          -) {
  4640     04CC  0840               	movf	sprintf@c^(0+128),w
  4641     04CD  00A0               	movwf	??_sprintf^(0+128)
  4642     04CE  3001               	movlw	1
  4643     04CF                     u689_25:
  4644     04CF  1003               	clrc
  4645     04D0  0DA0               	rlf	??_sprintf^(0+128),f
  4646     04D1  3EFF               	addlw	-1
  4647     04D2  1D03               	skipz
  4648     04D3  2CCF               	goto	u689_25
  4649     04D4  1003               	clrc
  4650     04D5  0D20               	rlf	??_sprintf^(0+128),w
  4651     04D6  3E69               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4652     04D7  0084               	movwf	4
  4653     04D8  160A  118A  200A  120A  118A  	fcall	stringdir
  4654     04DD  00F0               	movwf	___lldiv@divisor
  4655     04DE  160A  118A  200A  120A  118A  	fcall	stringdir
  4656     04E3  00F1               	movwf	___lldiv@divisor+1
  4657     04E4  160A  118A  200A  120A  118A  	fcall	stringdir
  4658     04E9  00F2               	movwf	___lldiv@divisor+2
  4659     04EA  160A  118A  200A  120A  118A  	fcall	stringdir
  4660     04EF  00F3               	movwf	___lldiv@divisor+3
  4661     04F0  0832               	movf	(sprintf@val+3)^(0+128),w
  4662     04F1  00F7               	movwf	___lldiv@dividend+3
  4663     04F2  0831               	movf	(sprintf@val+2)^(0+128),w
  4664     04F3  00F6               	movwf	___lldiv@dividend+2
  4665     04F4  0830               	movf	(sprintf@val+1)^(0+128),w
  4666     04F5  00F5               	movwf	___lldiv@dividend+1
  4667     04F6  082F               	movf	sprintf@val^(0+128),w
  4668     04F7  00F4               	movwf	___lldiv@dividend
  4669     04F8  160A  158A  273D  120A  118A  	fcall	___lldiv
  4670     04FD  0873               	movf	?___lldiv+3,w
  4671     04FE  00B8               	movwf	(sprintf@tmpval+3)^(0+128)
  4672     04FF  0872               	movf	?___lldiv+2,w
  4673     0500  00B7               	movwf	(sprintf@tmpval+2)^(0+128)
  4674     0501  0871               	movf	?___lldiv+1,w
  4675     0502  00B6               	movwf	(sprintf@tmpval+1)^(0+128)
  4676     0503  0870               	movf	?___lldiv,w
  4677     0504  00B5               	movwf	sprintf@tmpval^(0+128)
  4678                           
  4679                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1256:     tmpval.
      +                          vd %= 10;
  4680     0505  3000               	movlw	0
  4681     0506  00F3               	movwf	___llmod@divisor+3
  4682     0507  3000               	movlw	0
  4683     0508  00F2               	movwf	___llmod@divisor+2
  4684     0509  3000               	movlw	0
  4685     050A  00F1               	movwf	___llmod@divisor+1
  4686     050B  300A               	movlw	10
  4687     050C  00F0               	movwf	___llmod@divisor
  4688     050D  0838               	movf	(sprintf@tmpval+3)^(0+128),w
  4689     050E  00F7               	movwf	___llmod@dividend+3
  4690     050F  0837               	movf	(sprintf@tmpval+2)^(0+128),w
  4691     0510  00F6               	movwf	___llmod@dividend+2
  4692     0511  0836               	movf	(sprintf@tmpval+1)^(0+128),w
  4693     0512  00F5               	movwf	___llmod@dividend+1
  4694     0513  0835               	movf	sprintf@tmpval^(0+128),w
  4695     0514  00F4               	movwf	___llmod@dividend
  4696     0515  160A  158A  2641  120A  118A  	fcall	___llmod
  4697     051A  0873               	movf	?___llmod+3,w
  4698     051B  00B8               	movwf	(sprintf@tmpval+3)^(0+128)
  4699     051C  0872               	movf	?___llmod+2,w
  4700     051D  00B7               	movwf	(sprintf@tmpval+2)^(0+128)
  4701     051E  0871               	movf	?___llmod+1,w
  4702     051F  00B6               	movwf	(sprintf@tmpval+1)^(0+128)
  4703     0520  0870               	movf	?___llmod,w
  4704     0521  00B5               	movwf	sprintf@tmpval^(0+128)
  4705                           
  4706                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1257:     ((*sp++
      +                           = ('0' + tmpval.vd)));
  4707     0522  0839               	movf	sprintf@sp^(0+128),w
  4708     0523  0084               	movwf	4
  4709     0524  0835               	movf	sprintf@tmpval^(0+128),w
  4710     0525  3E30               	addlw	48
  4711     0526  1783               	bsf	3,7	;select IRP bank2
  4712     0527  0080               	movwf	0
  4713     0528  3001               	movlw	1
  4714     0529  00FF               	movwf	127
  4715     052A  087F               	movf	127,w
  4716     052B  07B9               	addwf	sprintf@sp^(0+128),f
  4717                           
  4718                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1258:     val %= 
      +                          dpowers[c];
  4719     052C  0840               	movf	sprintf@c^(0+128),w
  4720     052D  00A0               	movwf	??_sprintf^(0+128)
  4721     052E  3001               	movlw	1
  4722     052F                     u690_25:
  4723     052F  1003               	clrc
  4724     0530  0DA0               	rlf	??_sprintf^(0+128),f
  4725     0531  3EFF               	addlw	-1
  4726     0532  1D03               	skipz
  4727     0533  2D2F               	goto	u690_25
  4728     0534  1003               	clrc
  4729     0535  0D20               	rlf	??_sprintf^(0+128),w
  4730     0536  3E69               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4731     0537  0084               	movwf	4
  4732     0538  160A  118A  200A  120A  118A  	fcall	stringdir
  4733     053D  00F0               	movwf	___llmod@divisor
  4734     053E  160A  118A  200A  120A  118A  	fcall	stringdir
  4735     0543  00F1               	movwf	___llmod@divisor+1
  4736     0544  160A  118A  200A  120A  118A  	fcall	stringdir
  4737     0549  00F2               	movwf	___llmod@divisor+2
  4738     054A  160A  118A  200A  120A  118A  	fcall	stringdir
  4739     054F  00F3               	movwf	___llmod@divisor+3
  4740     0550  0832               	movf	(sprintf@val+3)^(0+128),w
  4741     0551  00F7               	movwf	___llmod@dividend+3
  4742     0552  0831               	movf	(sprintf@val+2)^(0+128),w
  4743     0553  00F6               	movwf	___llmod@dividend+2
  4744     0554  0830               	movf	(sprintf@val+1)^(0+128),w
  4745     0555  00F5               	movwf	___llmod@dividend+1
  4746     0556  082F               	movf	sprintf@val^(0+128),w
  4747     0557  00F4               	movwf	___llmod@dividend
  4748     0558  160A  158A  2641  120A  118A  	fcall	___llmod
  4749     055D  0873               	movf	?___llmod+3,w
  4750     055E  00B2               	movwf	(sprintf@val+3)^(0+128)
  4751     055F  0872               	movf	?___llmod+2,w
  4752     0560  00B1               	movwf	(sprintf@val+2)^(0+128)
  4753     0561  0871               	movf	?___llmod+1,w
  4754     0562  00B0               	movwf	(sprintf@val+1)^(0+128)
  4755     0563  0870               	movf	?___llmod,w
  4756     0564  2CC6               	goto	L4
  4757     0565                     i1l4553:
  4758                           
  4759                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1262:     ((*sp++
      +                           = ('0')));
  4760     0565  0839               	movf	sprintf@sp^(0+128),w
  4761     0566  0084               	movwf	4
  4762     0567  3030               	movlw	48
  4763     0568  1783               	bsf	3,7	;select IRP bank2
  4764     0569  0080               	movwf	0
  4765     056A  3001               	movlw	1
  4766     056B  00FF               	movwf	127
  4767     056C  087F               	movf	127,w
  4768     056D  07B9               	addwf	sprintf@sp^(0+128),f
  4769                           
  4770                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1263:     prec--;
  4771     056E  30FF               	movlw	255
  4772     056F  07BE               	addwf	sprintf@prec^(0+128),f
  4773     0570  1803               	skipnc
  4774     0571  0ABF               	incf	(sprintf@prec+1)^(0+128),f
  4775     0572  30FF               	movlw	255
  4776     0573  07BF               	addwf	(sprintf@prec+1)^(0+128),f
  4777     0574                     i1l4559:
  4778                           
  4779                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1261:    while(pr
      +                          ec) {
  4780     0574  083E               	movf	sprintf@prec^(0+128),w
  4781     0575  043F               	iorwf	(sprintf@prec+1)^(0+128),w
  4782     0576  1903               	btfsc	3,2
  4783     0577  2844               	goto	i1l4579
  4784     0578  2D65               	goto	i1l4553
  4785     0579                     i1l4561:
  4786                           
  4787                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1316:   if(prec =
      +                          = 0 && val == 0)
  4788     0579  083E               	movf	sprintf@prec^(0+128),w
  4789     057A  043F               	iorwf	(sprintf@prec+1)^(0+128),w
  4790     057B  1D03               	btfss	3,2
  4791     057C  2D89               	goto	i1l537
  4792     057D  0832               	movf	(sprintf@val+3)^(0+128),w
  4793     057E  0431               	iorwf	(sprintf@val+2)^(0+128),w
  4794     057F  0430               	iorwf	(sprintf@val+1)^(0+128),w
  4795     0580  042F               	iorwf	sprintf@val^(0+128),w
  4796     0581  1D03               	skipz
  4797     0582  2D89               	goto	i1l537
  4798                           
  4799                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1317:    prec++;
  4800     0583  3001               	movlw	1
  4801     0584  07BE               	addwf	sprintf@prec^(0+128),f
  4802     0585  1803               	skipnc
  4803     0586  0ABF               	incf	(sprintf@prec+1)^(0+128),f
  4804     0587  3000               	movlw	0
  4805     0588  07BF               	addwf	(sprintf@prec+1)^(0+128),f
  4806     0589                     i1l537:
  4807                           
  4808                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1365:   if(c < pr
      +                          ec)
  4809     0589  083F               	movf	(sprintf@prec+1)^(0+128),w
  4810     058A  3A80               	xorlw	128
  4811     058B  3C80               	sublw	128
  4812     058C  1D03               	skipz
  4813     058D  2D90               	goto	u695_25
  4814     058E  083E               	movf	sprintf@prec^(0+128),w
  4815     058F  0240               	subwf	sprintf@c^(0+128),w
  4816     0590                     u695_25:
  4817     0590  1C03               	btfss	3,0
  4818     0591  2D9F               	goto	i1l4573
  4819     0592  1683               	bsf	3,5	;RP0=1, select bank1
  4820     0593  1303               	bcf	3,6	;RP1=0, select bank1
  4821     0594  083F               	movf	(sprintf@prec+1)^(0+128),w
  4822     0595  3A80               	xorlw	128
  4823     0596  00A0               	movwf	??_sprintf^(0+128)
  4824     0597  3080               	movlw	128
  4825     0598  0220               	subwf	??_sprintf^(0+128),w
  4826     0599  1D03               	skipz
  4827     059A  2D9D               	goto	u696_25
  4828     059B  0840               	movf	sprintf@c^(0+128),w
  4829     059C  023E               	subwf	sprintf@prec^(0+128),w
  4830     059D                     u696_25:
  4831     059D  1C03               	btfss	3,0
  4832     059E  2D9F               	goto	i1l4573
  4833     059F                     i1l4573:
  4834                           
  4835                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  4836     059F  1683               	bsf	3,5	;RP0=1, select bank1
  4837     05A0  1303               	bcf	3,6	;RP1=0, select bank1
  4838     05A1  082D               	movf	sprintf@flag^(0+128),w
  4839     05A2  3903               	andlw	3
  4840     05A3  1903               	btfsc	3,2
  4841     05A4  2844               	goto	i1l4579
  4842                           
  4843                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  4844     05A5  0839               	movf	sprintf@sp^(0+128),w
  4845     05A6  0084               	movwf	4
  4846     05A7  302D               	movlw	45
  4847     05A8                     L5:
  4848     05A8  1783               	bsf	3,7	;select IRP bank2
  4849     05A9  0080               	movwf	0
  4850     05AA  3001               	movlw	1
  4851     05AB  00FF               	movwf	127
  4852     05AC  087F               	movf	127,w
  4853     05AD  07B9               	addwf	sprintf@sp^(0+128),f
  4854     05AE  2844               	goto	i1l4579
  4855     05AF                     i1l4581:
  4856                           
  4857                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  4858     05AF  0839               	movf	sprintf@sp^(0+128),w
  4859     05B0  0084               	movwf	4
  4860     05B1  1783               	bsf	3,7	;select IRP bank2
  4861     05B2  0180               	clrf	0
  4862     05B3  0008               	return
  4863     05B4                     __end_of_sprintf:
  4864                           
  4865                           	psect	text14
  4866     0CD2                     __ptext14:	
  4867 ;; *************** function _scale *****************
  4868 ;; Defined at:
  4869 ;;		line 433 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
  4870 ;; Parameters:    Size  Location     Type
  4871 ;;  scl             1    wreg     char 
  4872 ;; Auto vars:     Size  Location     Type
  4873 ;;  scl             1   44[BANK0 ] char 
  4874 ;; Return value:  Size  Location     Type
  4875 ;;                  4   26[BANK0 ] char 
  4876 ;; Registers used:
  4877 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4878 ;; Tracked objects:
  4879 ;;		On entry : 300/100
  4880 ;;		On exit  : 300/0
  4881 ;;		Unchanged: 0/0
  4882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4883 ;;      Params:         0       4       0       0       0
  4884 ;;      Locals:         0       5       0       0       0
  4885 ;;      Temps:          0      10       0       0       0
  4886 ;;      Totals:         0      19       0       0       0
  4887 ;;Total ram usage:       19 bytes
  4888 ;; Hardware stack levels used: 1
  4889 ;; Hardware stack levels required when called: 2
  4890 ;; This function calls:
  4891 ;;		___awdiv
  4892 ;;		___awmod
  4893 ;;		___flmul
  4894 ;; This function is called by:
  4895 ;;		_sprintf
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899     0CD2                     _scale:	
  4900                           ;psect for function _scale
  4901                           
  4902                           
  4903                           ;incstack = 0
  4904 ;; hardware stack exceeded
  4905                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4906                           ;scale@scl stored from wreg
  4907     0CD2  1283               	bcf	3,5	;RP0=0, select bank0
  4908     0CD3  00CC               	movwf	scale@scl
  4909                           
  4910                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 433: scale(signed
      +                           char scl);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 434: {;
      +                          C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 436:  if(scl < 0) 
      +                          {
  4911     0CD4  1FCC               	btfss	scale@scl,7
  4912     0CD5  2E6C               	goto	i1l3879
  4913                           
  4914                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 437:   scl = -scl
      +                          ;
  4915     0CD6  09CC               	comf	scale@scl,f
  4916     0CD7  0ACC               	incf	scale@scl,f
  4917                           
  4918                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 438:   if(scl>=11
      +                          0)
  4919     0CD8  084C               	movf	scale@scl,w
  4920     0CD9  3A80               	xorlw	128
  4921     0CDA  3E12               	addlw	-238
  4922     0CDB  1C03               	skipc
  4923     0CDC  2DBB               	goto	i1l3869
  4924                           
  4925                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 439:    return _n
      +                          powers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char)((scl%100)/10+9)] * _npo
      +                          wers_[(unsigned char)(scl%10)];
  4926     0CDD  300A               	movlw	10
  4927     0CDE  00F6               	movwf	___awdiv@divisor
  4928     0CDF  3000               	movlw	0
  4929     0CE0  00F7               	movwf	___awdiv@divisor+1
  4930     0CE1  084C               	movf	scale@scl,w
  4931     0CE2  00F2               	movwf	___awmod@dividend
  4932     0CE3  01F3               	clrf	___awmod@dividend+1
  4933     0CE4  1BF2               	btfsc	___awmod@dividend,7
  4934     0CE5  03F3               	decf	___awmod@dividend+1,f
  4935     0CE6  3064               	movlw	100
  4936     0CE7  00F0               	movwf	___awmod@divisor
  4937     0CE8  3000               	movlw	0
  4938     0CE9  00F1               	movwf	___awmod@divisor+1
  4939     0CEA  160A  158A  25F6  120A  158A  	fcall	___awmod
  4940     0CEF  0871               	movf	?___awmod+1,w
  4941     0CF0  00F9               	movwf	___awdiv@dividend+1
  4942     0CF1  0870               	movf	?___awmod,w
  4943     0CF2  00F8               	movwf	___awdiv@dividend
  4944     0CF3  160A  158A  26E4  120A  158A  	fcall	___awdiv
  4945     0CF8  0876               	movf	?___awdiv,w
  4946     0CF9  1283               	bcf	3,5	;RP0=0, select bank0
  4947     0CFA  00BE               	movwf	??_scale
  4948     0CFB  3001               	movlw	1
  4949     0CFC                     u536_25:
  4950     0CFC  1003               	clrc
  4951     0CFD  0DBE               	rlf	??_scale,f
  4952     0CFE  3EFF               	addlw	-1
  4953     0CFF  1D03               	skipz
  4954     0D00  2CFC               	goto	u536_25
  4955     0D01  1003               	clrc
  4956     0D02  0D3E               	rlf	??_scale,w
  4957     0D03  3E59               	addlw	low (((__npowers_-__stringbase)| (0+32768)+36))
  4958     0D04  0084               	movwf	4
  4959     0D05  160A  118A  200A  120A  158A  	fcall	stringdir
  4960     0D0A  00BF               	movwf	??_scale+1
  4961     0D0B  160A  118A  200A  120A  158A  	fcall	stringdir
  4962     0D10  00C0               	movwf	??_scale+2
  4963     0D11  160A  118A  200A  120A  158A  	fcall	stringdir
  4964     0D16  00C1               	movwf	??_scale+3
  4965     0D17  160A  118A  200A  120A  158A  	fcall	stringdir
  4966     0D1C  00C2               	movwf	??_scale+4
  4967     0D1D  0842               	movf	??_scale+4,w
  4968     0D1E  00A3               	movwf	___flmul@b+3
  4969     0D1F  0841               	movf	??_scale+3,w
  4970     0D20  00A2               	movwf	___flmul@b+2
  4971     0D21  0840               	movf	??_scale+2,w
  4972     0D22  00A1               	movwf	___flmul@b+1
  4973     0D23  083F               	movf	??_scale+1,w
  4974     0D24  00A0               	movwf	___flmul@b
  4975     0D25  3064               	movlw	100
  4976     0D26  00F6               	movwf	___awdiv@divisor
  4977     0D27  3000               	movlw	0
  4978     0D28  00F7               	movwf	___awdiv@divisor+1
  4979     0D29  084C               	movf	scale@scl,w
  4980     0D2A  00F8               	movwf	___awdiv@dividend
  4981     0D2B  01F9               	clrf	___awdiv@dividend+1
  4982     0D2C  1BF8               	btfsc	___awdiv@dividend,7
  4983     0D2D  03F9               	decf	___awdiv@dividend+1,f
  4984     0D2E  160A  158A  26E4  120A  158A  	fcall	___awdiv
  4985     0D33  0876               	movf	?___awdiv,w
  4986     0D34  1283               	bcf	3,5	;RP0=0, select bank0
  4987     0D35  00C3               	movwf	??_scale+5
  4988     0D36  3001               	movlw	1
  4989     0D37                     u537_25:
  4990     0D37  1003               	clrc
  4991     0D38  0DC3               	rlf	??_scale+5,f
  4992     0D39  3EFF               	addlw	-1
  4993     0D3A  1D03               	skipz
  4994     0D3B  2D37               	goto	u537_25
  4995     0D3C  1003               	clrc
  4996     0D3D  0D43               	rlf	??_scale+5,w
  4997     0D3E  3E7D               	addlw	low (((__npowers_-__stringbase)| (0+32768)+72))
  4998     0D3F  0084               	movwf	4
  4999     0D40  160A  118A  200A  120A  158A  	fcall	stringdir
  5000     0D45  00C4               	movwf	??_scale+6
  5001     0D46  160A  118A  200A  120A  158A  	fcall	stringdir
  5002     0D4B  00C5               	movwf	??_scale+7
  5003     0D4C  160A  118A  200A  120A  158A  	fcall	stringdir
  5004     0D51  00C6               	movwf	??_scale+8
  5005     0D52  160A  118A  200A  120A  158A  	fcall	stringdir
  5006     0D57  00C7               	movwf	??_scale+9
  5007     0D58  0847               	movf	??_scale+9,w
  5008     0D59  00A7               	movwf	___flmul@a+3
  5009     0D5A  0846               	movf	??_scale+8,w
  5010     0D5B  00A6               	movwf	___flmul@a+2
  5011     0D5C  0845               	movf	??_scale+7,w
  5012     0D5D  00A5               	movwf	___flmul@a+1
  5013     0D5E  0844               	movf	??_scale+6,w
  5014     0D5F  00A4               	movwf	___flmul@a
  5015     0D60  120A  158A  21F9  120A  158A  	fcall	___flmul
  5016     0D65  0823               	movf	?___flmul+3,w
  5017     0D66  00CB               	movwf	_scale$1223+3
  5018     0D67  0822               	movf	?___flmul+2,w
  5019     0D68  00CA               	movwf	_scale$1223+2
  5020     0D69  0821               	movf	?___flmul+1,w
  5021     0D6A  00C9               	movwf	_scale$1223+1
  5022     0D6B  0820               	movf	?___flmul,w
  5023     0D6C  00C8               	movwf	_scale$1223
  5024                           
  5025                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 439:    return _n
      +                          powers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char)((scl%100)/10+9)] * _npo
      +                          wers_[(unsigned char)(scl%10)];
  5026     0D6D  300A               	movlw	10
  5027     0D6E  00F0               	movwf	___awmod@divisor
  5028     0D6F  3000               	movlw	0
  5029     0D70  00F1               	movwf	___awmod@divisor+1
  5030     0D71  084C               	movf	scale@scl,w
  5031     0D72  00F2               	movwf	___awmod@dividend
  5032     0D73  01F3               	clrf	___awmod@dividend+1
  5033     0D74  1BF2               	btfsc	___awmod@dividend,7
  5034     0D75  03F3               	decf	___awmod@dividend+1,f
  5035     0D76  160A  158A  25F6  120A  158A  	fcall	___awmod
  5036     0D7B  0870               	movf	?___awmod,w
  5037     0D7C  00BE               	movwf	??_scale
  5038     0D7D  3001               	movlw	1
  5039     0D7E                     u538_25:
  5040     0D7E  1003               	clrc
  5041     0D7F  0DBE               	rlf	??_scale,f
  5042     0D80  3EFF               	addlw	-1
  5043     0D81  1D03               	skipz
  5044     0D82  2D7E               	goto	u538_25
  5045     0D83  1003               	clrc
  5046     0D84  0D3E               	rlf	??_scale,w
  5047     0D85  3E35               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  5048     0D86  0084               	movwf	4
  5049     0D87  160A  118A  200A  120A  158A  	fcall	stringdir
  5050     0D8C  00BF               	movwf	??_scale+1
  5051     0D8D  160A  118A  200A  120A  158A  	fcall	stringdir
  5052     0D92  00C0               	movwf	??_scale+2
  5053     0D93  160A  118A  200A  120A  158A  	fcall	stringdir
  5054     0D98  00C1               	movwf	??_scale+3
  5055     0D99  160A  118A  200A  120A  158A  	fcall	stringdir
  5056     0D9E  00C2               	movwf	??_scale+4
  5057     0D9F  0842               	movf	??_scale+4,w
  5058     0DA0  00A3               	movwf	___flmul@b+3
  5059     0DA1  0841               	movf	??_scale+3,w
  5060     0DA2  00A2               	movwf	___flmul@b+2
  5061     0DA3  0840               	movf	??_scale+2,w
  5062     0DA4  00A1               	movwf	___flmul@b+1
  5063     0DA5  083F               	movf	??_scale+1,w
  5064     0DA6  00A0               	movwf	___flmul@b
  5065     0DA7  084B               	movf	_scale$1223+3,w
  5066     0DA8  00A7               	movwf	___flmul@a+3
  5067     0DA9  084A               	movf	_scale$1223+2,w
  5068     0DAA  00A6               	movwf	___flmul@a+2
  5069     0DAB  0849               	movf	_scale$1223+1,w
  5070     0DAC  00A5               	movwf	___flmul@a+1
  5071     0DAD  0848               	movf	_scale$1223,w
  5072     0DAE  00A4               	movwf	___flmul@a
  5073     0DAF  120A  158A  21F9   	fcall	___flmul
  5074     0DB2  0823               	movf	?___flmul+3,w
  5075     0DB3  00BD               	movwf	?_scale+3
  5076     0DB4  0822               	movf	?___flmul+2,w
  5077     0DB5  00BC               	movwf	?_scale+2
  5078     0DB6  0821               	movf	?___flmul+1,w
  5079     0DB7  00BB               	movwf	?_scale+1
  5080     0DB8  0820               	movf	?___flmul,w
  5081     0DB9  00BA               	movwf	?_scale
  5082     0DBA  0008               	return
  5083     0DBB                     i1l3869:
  5084     0DBB  084C               	movf	scale@scl,w
  5085     0DBC  3A80               	xorlw	128
  5086     0DBD  3E75               	addlw	-139
  5087     0DBE  1C03               	skipc
  5088     0DBF  2E41               	goto	i1l3875
  5089                           
  5090                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 441:    return _n
      +                          powers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(scl%10)];
  5091     0DC0  300A               	movlw	10
  5092     0DC1  00F0               	movwf	___awmod@divisor
  5093     0DC2  3000               	movlw	0
  5094     0DC3  00F1               	movwf	___awmod@divisor+1
  5095     0DC4  084C               	movf	scale@scl,w
  5096     0DC5  00F2               	movwf	___awmod@dividend
  5097     0DC6  01F3               	clrf	___awmod@dividend+1
  5098     0DC7  1BF2               	btfsc	___awmod@dividend,7
  5099     0DC8  03F3               	decf	___awmod@dividend+1,f
  5100     0DC9  160A  158A  25F6  120A  158A  	fcall	___awmod
  5101     0DCE  0870               	movf	?___awmod,w
  5102     0DCF  00BE               	movwf	??_scale
  5103     0DD0  3001               	movlw	1
  5104     0DD1                     u540_25:
  5105     0DD1  1003               	clrc
  5106     0DD2  0DBE               	rlf	??_scale,f
  5107     0DD3  3EFF               	addlw	-1
  5108     0DD4  1D03               	skipz
  5109     0DD5  2DD1               	goto	u540_25
  5110     0DD6  1003               	clrc
  5111     0DD7  0D3E               	rlf	??_scale,w
  5112     0DD8  3E35               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  5113     0DD9  0084               	movwf	4
  5114     0DDA  160A  118A  200A  120A  158A  	fcall	stringdir
  5115     0DDF  00BF               	movwf	??_scale+1
  5116     0DE0  160A  118A  200A  120A  158A  	fcall	stringdir
  5117     0DE5  00C0               	movwf	??_scale+2
  5118     0DE6  160A  118A  200A  120A  158A  	fcall	stringdir
  5119     0DEB  00C1               	movwf	??_scale+3
  5120     0DEC  160A  118A  200A  120A  158A  	fcall	stringdir
  5121     0DF1  00C2               	movwf	??_scale+4
  5122     0DF2  0842               	movf	??_scale+4,w
  5123     0DF3  00A3               	movwf	___flmul@b+3
  5124     0DF4  0841               	movf	??_scale+3,w
  5125     0DF5  00A2               	movwf	___flmul@b+2
  5126     0DF6  0840               	movf	??_scale+2,w
  5127     0DF7  00A1               	movwf	___flmul@b+1
  5128     0DF8  083F               	movf	??_scale+1,w
  5129     0DF9  00A0               	movwf	___flmul@b
  5130     0DFA  300A               	movlw	10
  5131     0DFB  00F6               	movwf	___awdiv@divisor
  5132     0DFC  3000               	movlw	0
  5133     0DFD  00F7               	movwf	___awdiv@divisor+1
  5134     0DFE  084C               	movf	scale@scl,w
  5135     0DFF  00F8               	movwf	___awdiv@dividend
  5136     0E00  01F9               	clrf	___awdiv@dividend+1
  5137     0E01  1BF8               	btfsc	___awdiv@dividend,7
  5138     0E02  03F9               	decf	___awdiv@dividend+1,f
  5139     0E03  160A  158A  26E4  120A  158A  	fcall	___awdiv
  5140     0E08  0876               	movf	?___awdiv,w
  5141     0E09  1283               	bcf	3,5	;RP0=0, select bank0
  5142     0E0A  00C3               	movwf	??_scale+5
  5143     0E0B  3001               	movlw	1
  5144     0E0C                     u541_25:
  5145     0E0C  1003               	clrc
  5146     0E0D  0DC3               	rlf	??_scale+5,f
  5147     0E0E  3EFF               	addlw	-1
  5148     0E0F  1D03               	skipz
  5149     0E10  2E0C               	goto	u541_25
  5150     0E11  1003               	clrc
  5151     0E12  0D43               	rlf	??_scale+5,w
  5152     0E13  3E59               	addlw	low (((__npowers_-__stringbase)| (0+32768)+36))
  5153     0E14  0084               	movwf	4
  5154     0E15  160A  118A  200A  120A  158A  	fcall	stringdir
  5155     0E1A  00C4               	movwf	??_scale+6
  5156     0E1B  160A  118A  200A  120A  158A  	fcall	stringdir
  5157     0E20  00C5               	movwf	??_scale+7
  5158     0E21  160A  118A  200A  120A  158A  	fcall	stringdir
  5159     0E26  00C6               	movwf	??_scale+8
  5160     0E27  160A  118A  200A  120A  158A  	fcall	stringdir
  5161     0E2C  00C7               	movwf	??_scale+9
  5162     0E2D  0847               	movf	??_scale+9,w
  5163     0E2E  00A7               	movwf	___flmul@a+3
  5164     0E2F  0846               	movf	??_scale+8,w
  5165     0E30  00A6               	movwf	___flmul@a+2
  5166     0E31  0845               	movf	??_scale+7,w
  5167     0E32  00A5               	movwf	___flmul@a+1
  5168     0E33  0844               	movf	??_scale+6,w
  5169     0E34  00A4               	movwf	___flmul@a
  5170     0E35  120A  158A  21F9   	fcall	___flmul
  5171     0E38  0823               	movf	?___flmul+3,w
  5172     0E39  00BD               	movwf	?_scale+3
  5173     0E3A  0822               	movf	?___flmul+2,w
  5174     0E3B  00BC               	movwf	?_scale+2
  5175     0E3C  0821               	movf	?___flmul+1,w
  5176     0E3D  00BB               	movwf	?_scale+1
  5177     0E3E  0820               	movf	?___flmul,w
  5178     0E3F  00BA               	movwf	?_scale
  5179     0E40  0008               	return
  5180     0E41                     i1l3875:
  5181                           
  5182                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 442:   return _np
      +                          owers_[(unsigned char)scl];
  5183     0E41  084C               	movf	scale@scl,w
  5184     0E42  00BE               	movwf	??_scale
  5185     0E43  3001               	movlw	1
  5186     0E44                     u542_25:
  5187     0E44  1003               	clrc
  5188     0E45  0DBE               	rlf	??_scale,f
  5189     0E46  3EFF               	addlw	-1
  5190     0E47  1D03               	skipz
  5191     0E48  2E44               	goto	u542_25
  5192     0E49  1003               	clrc
  5193     0E4A  0D3E               	rlf	??_scale,w
  5194     0E4B  3E35               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  5195     0E4C  0084               	movwf	4
  5196     0E4D  160A  118A  200A  120A  158A  	fcall	stringdir
  5197     0E52  00BF               	movwf	??_scale+1
  5198     0E53  160A  118A  200A  120A  158A  	fcall	stringdir
  5199     0E58  00C0               	movwf	??_scale+2
  5200     0E59  160A  118A  200A  120A  158A  	fcall	stringdir
  5201     0E5E  00C1               	movwf	??_scale+3
  5202     0E5F  160A  118A  200A   	fcall	stringdir
  5203     0E62  00C2               	movwf	??_scale+4
  5204     0E63  0842               	movf	??_scale+4,w
  5205     0E64  00BD               	movwf	?_scale+3
  5206     0E65  0841               	movf	??_scale+3,w
  5207     0E66  00BC               	movwf	?_scale+2
  5208     0E67  0840               	movf	??_scale+2,w
  5209     0E68  00BB               	movwf	?_scale+1
  5210     0E69  083F               	movf	??_scale+1,w
  5211     0E6A  00BA               	movwf	?_scale
  5212     0E6B  0008               	return
  5213     0E6C                     i1l3879:
  5214                           
  5215                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 444:  if(scl>=110
      +                          )
  5216     0E6C  084C               	movf	scale@scl,w
  5217     0E6D  3A80               	xorlw	128
  5218     0E6E  3E12               	addlw	-238
  5219     0E6F  1C03               	skipc
  5220     0E70  2F4F               	goto	i1l3887
  5221                           
  5222                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 445:   return _po
      +                          wers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)((scl%100)/10+9)] * _powers
      +                          _[(unsigned char)(scl%10)];
  5223     0E71  300A               	movlw	10
  5224     0E72  00F6               	movwf	___awdiv@divisor
  5225     0E73  3000               	movlw	0
  5226     0E74  00F7               	movwf	___awdiv@divisor+1
  5227     0E75  084C               	movf	scale@scl,w
  5228     0E76  00F2               	movwf	___awmod@dividend
  5229     0E77  01F3               	clrf	___awmod@dividend+1
  5230     0E78  1BF2               	btfsc	___awmod@dividend,7
  5231     0E79  03F3               	decf	___awmod@dividend+1,f
  5232     0E7A  3064               	movlw	100
  5233     0E7B  00F0               	movwf	___awmod@divisor
  5234     0E7C  3000               	movlw	0
  5235     0E7D  00F1               	movwf	___awmod@divisor+1
  5236     0E7E  160A  158A  25F6  120A  158A  	fcall	___awmod
  5237     0E83  0871               	movf	?___awmod+1,w
  5238     0E84  00F9               	movwf	___awdiv@dividend+1
  5239     0E85  0870               	movf	?___awmod,w
  5240     0E86  00F8               	movwf	___awdiv@dividend
  5241     0E87  160A  158A  26E4  120A  158A  	fcall	___awdiv
  5242     0E8C  0876               	movf	?___awdiv,w
  5243     0E8D  1283               	bcf	3,5	;RP0=0, select bank0
  5244     0E8E  00BE               	movwf	??_scale
  5245     0E8F  3001               	movlw	1
  5246     0E90                     u544_25:
  5247     0E90  1003               	clrc
  5248     0E91  0DBE               	rlf	??_scale,f
  5249     0E92  3EFF               	addlw	-1
  5250     0E93  1D03               	skipz
  5251     0E94  2E90               	goto	u544_25
  5252     0E95  1003               	clrc
  5253     0E96  0D3E               	rlf	??_scale,w
  5254     0E97  3E25               	addlw	low (((__powers_-__stringbase)| (0+32768)+36))
  5255     0E98  0084               	movwf	4
  5256     0E99  160A  118A  200A  120A  158A  	fcall	stringdir
  5257     0E9E  00BF               	movwf	??_scale+1
  5258     0E9F  160A  118A  200A  120A  158A  	fcall	stringdir
  5259     0EA4  00C0               	movwf	??_scale+2
  5260     0EA5  160A  118A  200A  120A  158A  	fcall	stringdir
  5261     0EAA  00C1               	movwf	??_scale+3
  5262     0EAB  160A  118A  200A  120A  158A  	fcall	stringdir
  5263     0EB0  00C2               	movwf	??_scale+4
  5264     0EB1  0842               	movf	??_scale+4,w
  5265     0EB2  00A3               	movwf	___flmul@b+3
  5266     0EB3  0841               	movf	??_scale+3,w
  5267     0EB4  00A2               	movwf	___flmul@b+2
  5268     0EB5  0840               	movf	??_scale+2,w
  5269     0EB6  00A1               	movwf	___flmul@b+1
  5270     0EB7  083F               	movf	??_scale+1,w
  5271     0EB8  00A0               	movwf	___flmul@b
  5272     0EB9  3064               	movlw	100
  5273     0EBA  00F6               	movwf	___awdiv@divisor
  5274     0EBB  3000               	movlw	0
  5275     0EBC  00F7               	movwf	___awdiv@divisor+1
  5276     0EBD  084C               	movf	scale@scl,w
  5277     0EBE  00F8               	movwf	___awdiv@dividend
  5278     0EBF  01F9               	clrf	___awdiv@dividend+1
  5279     0EC0  1BF8               	btfsc	___awdiv@dividend,7
  5280     0EC1  03F9               	decf	___awdiv@dividend+1,f
  5281     0EC2  160A  158A  26E4  120A  158A  	fcall	___awdiv
  5282     0EC7  0876               	movf	?___awdiv,w
  5283     0EC8  1283               	bcf	3,5	;RP0=0, select bank0
  5284     0EC9  00C3               	movwf	??_scale+5
  5285     0ECA  3001               	movlw	1
  5286     0ECB                     u545_25:
  5287     0ECB  1003               	clrc
  5288     0ECC  0DC3               	rlf	??_scale+5,f
  5289     0ECD  3EFF               	addlw	-1
  5290     0ECE  1D03               	skipz
  5291     0ECF  2ECB               	goto	u545_25
  5292     0ED0  1003               	clrc
  5293     0ED1  0D43               	rlf	??_scale+5,w
  5294     0ED2  3E49               	addlw	low (((__powers_-__stringbase)| (0+32768)+72))
  5295     0ED3  0084               	movwf	4
  5296     0ED4  160A  118A  200A  120A  158A  	fcall	stringdir
  5297     0ED9  00C4               	movwf	??_scale+6
  5298     0EDA  160A  118A  200A  120A  158A  	fcall	stringdir
  5299     0EDF  00C5               	movwf	??_scale+7
  5300     0EE0  160A  118A  200A  120A  158A  	fcall	stringdir
  5301     0EE5  00C6               	movwf	??_scale+8
  5302     0EE6  160A  118A  200A  120A  158A  	fcall	stringdir
  5303     0EEB  00C7               	movwf	??_scale+9
  5304     0EEC  0847               	movf	??_scale+9,w
  5305     0EED  00A7               	movwf	___flmul@a+3
  5306     0EEE  0846               	movf	??_scale+8,w
  5307     0EEF  00A6               	movwf	___flmul@a+2
  5308     0EF0  0845               	movf	??_scale+7,w
  5309     0EF1  00A5               	movwf	___flmul@a+1
  5310     0EF2  0844               	movf	??_scale+6,w
  5311     0EF3  00A4               	movwf	___flmul@a
  5312     0EF4  120A  158A  21F9  120A  158A  	fcall	___flmul
  5313     0EF9  0823               	movf	?___flmul+3,w
  5314     0EFA  00CB               	movwf	_scale$1223+3
  5315     0EFB  0822               	movf	?___flmul+2,w
  5316     0EFC  00CA               	movwf	_scale$1223+2
  5317     0EFD  0821               	movf	?___flmul+1,w
  5318     0EFE  00C9               	movwf	_scale$1223+1
  5319     0EFF  0820               	movf	?___flmul,w
  5320     0F00  00C8               	movwf	_scale$1223
  5321                           
  5322                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 445:   return _po
      +                          wers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)((scl%100)/10+9)] * _powers
      +                          _[(unsigned char)(scl%10)];
  5323     0F01  300A               	movlw	10
  5324     0F02  00F0               	movwf	___awmod@divisor
  5325     0F03  3000               	movlw	0
  5326     0F04  00F1               	movwf	___awmod@divisor+1
  5327     0F05  084C               	movf	scale@scl,w
  5328     0F06  00F2               	movwf	___awmod@dividend
  5329     0F07  01F3               	clrf	___awmod@dividend+1
  5330     0F08  1BF2               	btfsc	___awmod@dividend,7
  5331     0F09  03F3               	decf	___awmod@dividend+1,f
  5332     0F0A  160A  158A  25F6  120A  158A  	fcall	___awmod
  5333     0F0F  0870               	movf	?___awmod,w
  5334     0F10  00BE               	movwf	??_scale
  5335     0F11  3001               	movlw	1
  5336     0F12                     u546_25:
  5337     0F12  1003               	clrc
  5338     0F13  0DBE               	rlf	??_scale,f
  5339     0F14  3EFF               	addlw	-1
  5340     0F15  1D03               	skipz
  5341     0F16  2F12               	goto	u546_25
  5342     0F17  1003               	clrc
  5343     0F18  0D3E               	rlf	??_scale,w
  5344     0F19  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  5345     0F1A  0084               	movwf	4
  5346     0F1B  160A  118A  200A  120A  158A  	fcall	stringdir
  5347     0F20  00BF               	movwf	??_scale+1
  5348     0F21  160A  118A  200A  120A  158A  	fcall	stringdir
  5349     0F26  00C0               	movwf	??_scale+2
  5350     0F27  160A  118A  200A  120A  158A  	fcall	stringdir
  5351     0F2C  00C1               	movwf	??_scale+3
  5352     0F2D  160A  118A  200A  120A  158A  	fcall	stringdir
  5353     0F32  00C2               	movwf	??_scale+4
  5354     0F33  0842               	movf	??_scale+4,w
  5355     0F34  00A3               	movwf	___flmul@b+3
  5356     0F35  0841               	movf	??_scale+3,w
  5357     0F36  00A2               	movwf	___flmul@b+2
  5358     0F37  0840               	movf	??_scale+2,w
  5359     0F38  00A1               	movwf	___flmul@b+1
  5360     0F39  083F               	movf	??_scale+1,w
  5361     0F3A  00A0               	movwf	___flmul@b
  5362     0F3B  084B               	movf	_scale$1223+3,w
  5363     0F3C  00A7               	movwf	___flmul@a+3
  5364     0F3D  084A               	movf	_scale$1223+2,w
  5365     0F3E  00A6               	movwf	___flmul@a+2
  5366     0F3F  0849               	movf	_scale$1223+1,w
  5367     0F40  00A5               	movwf	___flmul@a+1
  5368     0F41  0848               	movf	_scale$1223,w
  5369     0F42  00A4               	movwf	___flmul@a
  5370     0F43  120A  158A  21F9   	fcall	___flmul
  5371     0F46  0823               	movf	?___flmul+3,w
  5372     0F47  00BD               	movwf	?_scale+3
  5373     0F48  0822               	movf	?___flmul+2,w
  5374     0F49  00BC               	movwf	?_scale+2
  5375     0F4A  0821               	movf	?___flmul+1,w
  5376     0F4B  00BB               	movwf	?_scale+1
  5377     0F4C  0820               	movf	?___flmul,w
  5378     0F4D  00BA               	movwf	?_scale
  5379     0F4E  0008               	return
  5380     0F4F                     i1l3887:
  5381     0F4F  084C               	movf	scale@scl,w
  5382     0F50  3A80               	xorlw	128
  5383     0F51  3E75               	addlw	-139
  5384     0F52  1C03               	skipc
  5385     0F53  2FD5               	goto	i1l3893
  5386                           
  5387                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 447:   return _po
      +                          wers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(scl%10)];
  5388     0F54  300A               	movlw	10
  5389     0F55  00F0               	movwf	___awmod@divisor
  5390     0F56  3000               	movlw	0
  5391     0F57  00F1               	movwf	___awmod@divisor+1
  5392     0F58  084C               	movf	scale@scl,w
  5393     0F59  00F2               	movwf	___awmod@dividend
  5394     0F5A  01F3               	clrf	___awmod@dividend+1
  5395     0F5B  1BF2               	btfsc	___awmod@dividend,7
  5396     0F5C  03F3               	decf	___awmod@dividend+1,f
  5397     0F5D  160A  158A  25F6  120A  158A  	fcall	___awmod
  5398     0F62  0870               	movf	?___awmod,w
  5399     0F63  00BE               	movwf	??_scale
  5400     0F64  3001               	movlw	1
  5401     0F65                     u548_25:
  5402     0F65  1003               	clrc
  5403     0F66  0DBE               	rlf	??_scale,f
  5404     0F67  3EFF               	addlw	-1
  5405     0F68  1D03               	skipz
  5406     0F69  2F65               	goto	u548_25
  5407     0F6A  1003               	clrc
  5408     0F6B  0D3E               	rlf	??_scale,w
  5409     0F6C  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  5410     0F6D  0084               	movwf	4
  5411     0F6E  160A  118A  200A  120A  158A  	fcall	stringdir
  5412     0F73  00BF               	movwf	??_scale+1
  5413     0F74  160A  118A  200A  120A  158A  	fcall	stringdir
  5414     0F79  00C0               	movwf	??_scale+2
  5415     0F7A  160A  118A  200A  120A  158A  	fcall	stringdir
  5416     0F7F  00C1               	movwf	??_scale+3
  5417     0F80  160A  118A  200A  120A  158A  	fcall	stringdir
  5418     0F85  00C2               	movwf	??_scale+4
  5419     0F86  0842               	movf	??_scale+4,w
  5420     0F87  00A3               	movwf	___flmul@b+3
  5421     0F88  0841               	movf	??_scale+3,w
  5422     0F89  00A2               	movwf	___flmul@b+2
  5423     0F8A  0840               	movf	??_scale+2,w
  5424     0F8B  00A1               	movwf	___flmul@b+1
  5425     0F8C  083F               	movf	??_scale+1,w
  5426     0F8D  00A0               	movwf	___flmul@b
  5427     0F8E  300A               	movlw	10
  5428     0F8F  00F6               	movwf	___awdiv@divisor
  5429     0F90  3000               	movlw	0
  5430     0F91  00F7               	movwf	___awdiv@divisor+1
  5431     0F92  084C               	movf	scale@scl,w
  5432     0F93  00F8               	movwf	___awdiv@dividend
  5433     0F94  01F9               	clrf	___awdiv@dividend+1
  5434     0F95  1BF8               	btfsc	___awdiv@dividend,7
  5435     0F96  03F9               	decf	___awdiv@dividend+1,f
  5436     0F97  160A  158A  26E4  120A  158A  	fcall	___awdiv
  5437     0F9C  0876               	movf	?___awdiv,w
  5438     0F9D  1283               	bcf	3,5	;RP0=0, select bank0
  5439     0F9E  00C3               	movwf	??_scale+5
  5440     0F9F  3001               	movlw	1
  5441     0FA0                     u549_25:
  5442     0FA0  1003               	clrc
  5443     0FA1  0DC3               	rlf	??_scale+5,f
  5444     0FA2  3EFF               	addlw	-1
  5445     0FA3  1D03               	skipz
  5446     0FA4  2FA0               	goto	u549_25
  5447     0FA5  1003               	clrc
  5448     0FA6  0D43               	rlf	??_scale+5,w
  5449     0FA7  3E25               	addlw	low (((__powers_-__stringbase)| (0+32768)+36))
  5450     0FA8  0084               	movwf	4
  5451     0FA9  160A  118A  200A  120A  158A  	fcall	stringdir
  5452     0FAE  00C4               	movwf	??_scale+6
  5453     0FAF  160A  118A  200A  120A  158A  	fcall	stringdir
  5454     0FB4  00C5               	movwf	??_scale+7
  5455     0FB5  160A  118A  200A  120A  158A  	fcall	stringdir
  5456     0FBA  00C6               	movwf	??_scale+8
  5457     0FBB  160A  118A  200A  120A  158A  	fcall	stringdir
  5458     0FC0  00C7               	movwf	??_scale+9
  5459     0FC1  0847               	movf	??_scale+9,w
  5460     0FC2  00A7               	movwf	___flmul@a+3
  5461     0FC3  0846               	movf	??_scale+8,w
  5462     0FC4  00A6               	movwf	___flmul@a+2
  5463     0FC5  0845               	movf	??_scale+7,w
  5464     0FC6  00A5               	movwf	___flmul@a+1
  5465     0FC7  0844               	movf	??_scale+6,w
  5466     0FC8  00A4               	movwf	___flmul@a
  5467     0FC9  120A  158A  21F9   	fcall	___flmul
  5468     0FCC  0823               	movf	?___flmul+3,w
  5469     0FCD  00BD               	movwf	?_scale+3
  5470     0FCE  0822               	movf	?___flmul+2,w
  5471     0FCF  00BC               	movwf	?_scale+2
  5472     0FD0  0821               	movf	?___flmul+1,w
  5473     0FD1  00BB               	movwf	?_scale+1
  5474     0FD2  0820               	movf	?___flmul,w
  5475     0FD3  00BA               	movwf	?_scale
  5476     0FD4  0008               	return
  5477     0FD5                     i1l3893:
  5478                           
  5479                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 448:  return _pow
      +                          ers_[(unsigned char)scl];
  5480     0FD5  084C               	movf	scale@scl,w
  5481     0FD6  00BE               	movwf	??_scale
  5482     0FD7  3001               	movlw	1
  5483     0FD8                     u550_25:
  5484     0FD8  1003               	clrc
  5485     0FD9  0DBE               	rlf	??_scale,f
  5486     0FDA  3EFF               	addlw	-1
  5487     0FDB  1D03               	skipz
  5488     0FDC  2FD8               	goto	u550_25
  5489     0FDD  1003               	clrc
  5490     0FDE  0D3E               	rlf	??_scale,w
  5491     0FDF  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  5492     0FE0  0084               	movwf	4
  5493     0FE1  160A  118A  200A  120A  158A  	fcall	stringdir
  5494     0FE6  00BF               	movwf	??_scale+1
  5495     0FE7  160A  118A  200A  120A  158A  	fcall	stringdir
  5496     0FEC  00C0               	movwf	??_scale+2
  5497     0FED  160A  118A  200A  120A  158A  	fcall	stringdir
  5498     0FF2  00C1               	movwf	??_scale+3
  5499     0FF3  160A  118A  200A   	fcall	stringdir
  5500     0FF6  00C2               	movwf	??_scale+4
  5501     0FF7  0842               	movf	??_scale+4,w
  5502     0FF8  00BD               	movwf	?_scale+3
  5503     0FF9  0841               	movf	??_scale+3,w
  5504     0FFA  00BC               	movwf	?_scale+2
  5505     0FFB  0840               	movf	??_scale+2,w
  5506     0FFC  00BB               	movwf	?_scale+1
  5507     0FFD  083F               	movf	??_scale+1,w
  5508     0FFE  00BA               	movwf	?_scale
  5509     0FFF  0008               	return
  5510     1000                     __end_of_scale:
  5511                           
  5512                           	psect	text15
  5513     1DF6                     __ptext15:	
  5514 ;; *************** function ___awmod *****************
  5515 ;; Defined at:
  5516 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\awmod.c"
  5517 ;; Parameters:    Size  Location     Type
  5518 ;;  divisor         2    0[COMMON] int 
  5519 ;;  dividend        2    2[COMMON] int 
  5520 ;; Auto vars:     Size  Location     Type
  5521 ;;  sign            1    5[COMMON] unsigned char 
  5522 ;;  counter         1    4[COMMON] unsigned char 
  5523 ;; Return value:  Size  Location     Type
  5524 ;;                  2    0[COMMON] int 
  5525 ;; Registers used:
  5526 ;;		wreg, status,2, status,0, btemp+1
  5527 ;; Tracked objects:
  5528 ;;		On entry : 300/0
  5529 ;;		On exit  : 300/0
  5530 ;;		Unchanged: 300/0
  5531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5532 ;;      Params:         4       0       0       0       0
  5533 ;;      Locals:         2       0       0       0       0
  5534 ;;      Temps:          0       0       0       0       0
  5535 ;;      Totals:         6       0       0       0       0
  5536 ;;Total ram usage:        6 bytes
  5537 ;; Hardware stack levels used: 1
  5538 ;; This function calls:
  5539 ;;		Nothing
  5540 ;; This function is called by:
  5541 ;;		_scale
  5542 ;; This function uses a non-reentrant model
  5543 ;;
  5544                           
  5545     1DF6                     ___awmod:	
  5546                           ;psect for function ___awmod
  5547                           
  5548                           
  5549                           ;incstack = 0
  5550                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  5551     1DF6  01F5               	clrf	___awmod@sign
  5552     1DF7  1FF3               	btfss	___awmod@dividend+1,7
  5553     1DF8  2E00               	goto	i1l3271
  5554     1DF9  09F2               	comf	___awmod@dividend,f
  5555     1DFA  09F3               	comf	___awmod@dividend+1,f
  5556     1DFB  0AF2               	incf	___awmod@dividend,f
  5557     1DFC  1903               	skipnz
  5558     1DFD  0AF3               	incf	___awmod@dividend+1,f
  5559     1DFE  01F5               	clrf	___awmod@sign
  5560     1DFF  0AF5               	incf	___awmod@sign,f
  5561     1E00                     i1l3271:
  5562     1E00  1FF1               	btfss	___awmod@divisor+1,7
  5563     1E01  2E07               	goto	i1l3275
  5564     1E02  09F0               	comf	___awmod@divisor,f
  5565     1E03  09F1               	comf	___awmod@divisor+1,f
  5566     1E04  0AF0               	incf	___awmod@divisor,f
  5567     1E05  1903               	skipnz
  5568     1E06  0AF1               	incf	___awmod@divisor+1,f
  5569     1E07                     i1l3275:
  5570     1E07  0870               	movf	___awmod@divisor,w
  5571     1E08  0471               	iorwf	___awmod@divisor+1,w
  5572     1E09  1903               	btfsc	3,2
  5573     1E0A  2E34               	goto	i1l3293
  5574     1E0B  01F4               	clrf	___awmod@counter
  5575     1E0C  0AF4               	incf	___awmod@counter,f
  5576     1E0D                     i1l3283:
  5577     1E0D  1BF1               	btfsc	___awmod@divisor+1,7
  5578     1E0E  2E1B               	goto	i1l3285
  5579     1E0F  3001               	movlw	1
  5580     1E10                     u392_25:
  5581     1E10  1003               	clrc
  5582     1E11  0DF0               	rlf	___awmod@divisor,f
  5583     1E12  0DF1               	rlf	___awmod@divisor+1,f
  5584     1E13  3EFF               	addlw	-1
  5585     1E14  1D03               	skipz
  5586     1E15  2E10               	goto	u392_25
  5587     1E16  3001               	movlw	1
  5588     1E17  00FF               	movwf	127
  5589     1E18  087F               	movf	127,w
  5590     1E19  07F4               	addwf	___awmod@counter,f
  5591     1E1A  2E0D               	goto	i1l3283
  5592     1E1B                     i1l3285:
  5593     1E1B  0871               	movf	___awmod@divisor+1,w
  5594     1E1C  0273               	subwf	___awmod@dividend+1,w
  5595     1E1D  1D03               	skipz
  5596     1E1E  2E21               	goto	u394_25
  5597     1E1F  0870               	movf	___awmod@divisor,w
  5598     1E20  0272               	subwf	___awmod@dividend,w
  5599     1E21                     u394_25:
  5600     1E21  1C03               	skipc
  5601     1E22  2E29               	goto	i1l3289
  5602     1E23  0870               	movf	___awmod@divisor,w
  5603     1E24  02F2               	subwf	___awmod@dividend,f
  5604     1E25  0871               	movf	___awmod@divisor+1,w
  5605     1E26  1C03               	skipc
  5606     1E27  03F3               	decf	___awmod@dividend+1,f
  5607     1E28  02F3               	subwf	___awmod@dividend+1,f
  5608     1E29                     i1l3289:
  5609     1E29  3001               	movlw	1
  5610     1E2A                     u395_25:
  5611     1E2A  1003               	clrc
  5612     1E2B  0CF1               	rrf	___awmod@divisor+1,f
  5613     1E2C  0CF0               	rrf	___awmod@divisor,f
  5614     1E2D  3EFF               	addlw	-1
  5615     1E2E  1D03               	skipz
  5616     1E2F  2E2A               	goto	u395_25
  5617     1E30  3001               	movlw	1
  5618     1E31  02F4               	subwf	___awmod@counter,f
  5619     1E32  1D03               	btfss	3,2
  5620     1E33  2E1B               	goto	i1l3285
  5621     1E34                     i1l3293:
  5622     1E34  0875               	movf	___awmod@sign,w
  5623     1E35  1903               	btfsc	3,2
  5624     1E36  2E3C               	goto	i1l3297
  5625     1E37  09F2               	comf	___awmod@dividend,f
  5626     1E38  09F3               	comf	___awmod@dividend+1,f
  5627     1E39  0AF2               	incf	___awmod@dividend,f
  5628     1E3A  1903               	skipnz
  5629     1E3B  0AF3               	incf	___awmod@dividend+1,f
  5630     1E3C                     i1l3297:
  5631     1E3C  0873               	movf	___awmod@dividend+1,w
  5632     1E3D  00F1               	movwf	?___awmod+1
  5633     1E3E  0872               	movf	___awmod@dividend,w
  5634     1E3F  00F0               	movwf	?___awmod
  5635     1E40  0008               	return
  5636     1E41                     __end_of___awmod:
  5637                           
  5638                           	psect	text16
  5639     1EE4                     __ptext16:	
  5640 ;; *************** function ___awdiv *****************
  5641 ;; Defined at:
  5642 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\awdiv.c"
  5643 ;; Parameters:    Size  Location     Type
  5644 ;;  divisor         2    6[COMMON] int 
  5645 ;;  dividend        2    8[COMMON] int 
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;  quotient        2   12[COMMON] int 
  5648 ;;  sign            1   11[COMMON] unsigned char 
  5649 ;;  counter         1   10[COMMON] unsigned char 
  5650 ;; Return value:  Size  Location     Type
  5651 ;;                  2    6[COMMON] int 
  5652 ;; Registers used:
  5653 ;;		wreg, status,2, status,0, btemp+1
  5654 ;; Tracked objects:
  5655 ;;		On entry : 200/100
  5656 ;;		On exit  : 200/0
  5657 ;;		Unchanged: 200/0
  5658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5659 ;;      Params:         4       0       0       0       0
  5660 ;;      Locals:         4       0       0       0       0
  5661 ;;      Temps:          0       0       0       0       0
  5662 ;;      Totals:         8       0       0       0       0
  5663 ;;Total ram usage:        8 bytes
  5664 ;; Hardware stack levels used: 1
  5665 ;; This function calls:
  5666 ;;		Nothing
  5667 ;; This function is called by:
  5668 ;;		_scale
  5669 ;;		_sprintf
  5670 ;; This function uses a non-reentrant model
  5671 ;;
  5672                           
  5673     1EE4                     ___awdiv:	
  5674                           ;psect for function ___awdiv
  5675                           
  5676                           
  5677                           ;incstack = 0
  5678                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  5679     1EE4  01FB               	clrf	___awdiv@sign
  5680     1EE5  1FF7               	btfss	___awdiv@divisor+1,7
  5681     1EE6  2EEE               	goto	i1l3227
  5682     1EE7  09F6               	comf	___awdiv@divisor,f
  5683     1EE8  09F7               	comf	___awdiv@divisor+1,f
  5684     1EE9  0AF6               	incf	___awdiv@divisor,f
  5685     1EEA  1903               	skipnz
  5686     1EEB  0AF7               	incf	___awdiv@divisor+1,f
  5687     1EEC  01FB               	clrf	___awdiv@sign
  5688     1EED  0AFB               	incf	___awdiv@sign,f
  5689     1EEE                     i1l3227:
  5690     1EEE  1FF9               	btfss	___awdiv@dividend+1,7
  5691     1EEF  2EF9               	goto	i1l3233
  5692     1EF0  09F8               	comf	___awdiv@dividend,f
  5693     1EF1  09F9               	comf	___awdiv@dividend+1,f
  5694     1EF2  0AF8               	incf	___awdiv@dividend,f
  5695     1EF3  1903               	skipnz
  5696     1EF4  0AF9               	incf	___awdiv@dividend+1,f
  5697     1EF5  3001               	movlw	1
  5698     1EF6  00FF               	movwf	127
  5699     1EF7  087F               	movf	127,w
  5700     1EF8  06FB               	xorwf	___awdiv@sign,f
  5701     1EF9                     i1l3233:
  5702     1EF9  01FC               	clrf	___awdiv@quotient
  5703     1EFA  01FD               	clrf	___awdiv@quotient+1
  5704     1EFB  0876               	movf	___awdiv@divisor,w
  5705     1EFC  0477               	iorwf	___awdiv@divisor+1,w
  5706     1EFD  1903               	btfsc	3,2
  5707     1EFE  2F30               	goto	i1l3255
  5708     1EFF  01FA               	clrf	___awdiv@counter
  5709     1F00  0AFA               	incf	___awdiv@counter,f
  5710     1F01                     i1l3243:
  5711     1F01  1BF7               	btfsc	___awdiv@divisor+1,7
  5712     1F02  2F0F               	goto	i1l3245
  5713     1F03  3001               	movlw	1
  5714     1F04                     u382_25:
  5715     1F04  1003               	clrc
  5716     1F05  0DF6               	rlf	___awdiv@divisor,f
  5717     1F06  0DF7               	rlf	___awdiv@divisor+1,f
  5718     1F07  3EFF               	addlw	-1
  5719     1F08  1D03               	skipz
  5720     1F09  2F04               	goto	u382_25
  5721     1F0A  3001               	movlw	1
  5722     1F0B  00FF               	movwf	127
  5723     1F0C  087F               	movf	127,w
  5724     1F0D  07FA               	addwf	___awdiv@counter,f
  5725     1F0E  2F01               	goto	i1l3243
  5726     1F0F                     i1l3245:
  5727     1F0F  3001               	movlw	1
  5728     1F10                     u384_25:
  5729     1F10  1003               	clrc
  5730     1F11  0DFC               	rlf	___awdiv@quotient,f
  5731     1F12  0DFD               	rlf	___awdiv@quotient+1,f
  5732     1F13  3EFF               	addlw	-1
  5733     1F14  1D03               	skipz
  5734     1F15  2F10               	goto	u384_25
  5735     1F16  0877               	movf	___awdiv@divisor+1,w
  5736     1F17  0279               	subwf	___awdiv@dividend+1,w
  5737     1F18  1D03               	skipz
  5738     1F19  2F1C               	goto	u385_25
  5739     1F1A  0876               	movf	___awdiv@divisor,w
  5740     1F1B  0278               	subwf	___awdiv@dividend,w
  5741     1F1C                     u385_25:
  5742     1F1C  1C03               	skipc
  5743     1F1D  2F25               	goto	i1l3251
  5744     1F1E  0876               	movf	___awdiv@divisor,w
  5745     1F1F  02F8               	subwf	___awdiv@dividend,f
  5746     1F20  0877               	movf	___awdiv@divisor+1,w
  5747     1F21  1C03               	skipc
  5748     1F22  03F9               	decf	___awdiv@dividend+1,f
  5749     1F23  02F9               	subwf	___awdiv@dividend+1,f
  5750     1F24  147C               	bsf	___awdiv@quotient,0
  5751     1F25                     i1l3251:
  5752     1F25  3001               	movlw	1
  5753     1F26                     u386_25:
  5754     1F26  1003               	clrc
  5755     1F27  0CF7               	rrf	___awdiv@divisor+1,f
  5756     1F28  0CF6               	rrf	___awdiv@divisor,f
  5757     1F29  3EFF               	addlw	-1
  5758     1F2A  1D03               	skipz
  5759     1F2B  2F26               	goto	u386_25
  5760     1F2C  3001               	movlw	1
  5761     1F2D  02FA               	subwf	___awdiv@counter,f
  5762     1F2E  1D03               	btfss	3,2
  5763     1F2F  2F0F               	goto	i1l3245
  5764     1F30                     i1l3255:
  5765     1F30  087B               	movf	___awdiv@sign,w
  5766     1F31  1903               	btfsc	3,2
  5767     1F32  2F38               	goto	i1l3259
  5768     1F33  09FC               	comf	___awdiv@quotient,f
  5769     1F34  09FD               	comf	___awdiv@quotient+1,f
  5770     1F35  0AFC               	incf	___awdiv@quotient,f
  5771     1F36  1903               	skipnz
  5772     1F37  0AFD               	incf	___awdiv@quotient+1,f
  5773     1F38                     i1l3259:
  5774     1F38  087D               	movf	___awdiv@quotient+1,w
  5775     1F39  00F7               	movwf	?___awdiv+1
  5776     1F3A  087C               	movf	___awdiv@quotient,w
  5777     1F3B  00F6               	movwf	?___awdiv
  5778     1F3C  0008               	return
  5779     1F3D                     __end_of___awdiv:
  5780                           
  5781                           	psect	text17
  5782     198A                     __ptext17:	
  5783 ;; *************** function _isdigit *****************
  5784 ;; Defined at:
  5785 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\isdigit.c"
  5786 ;; Parameters:    Size  Location     Type
  5787 ;;  c               1    wreg     unsigned char 
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;  c               1    1[COMMON] unsigned char 
  5790 ;; Return value:  Size  Location     Type
  5791 ;;		None               void
  5792 ;; Registers used:
  5793 ;;		wreg, status,2, status,0
  5794 ;; Tracked objects:
  5795 ;;		On entry : 300/0
  5796 ;;		On exit  : 300/0
  5797 ;;		Unchanged: 300/0
  5798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5799 ;;      Params:         0       0       0       0       0
  5800 ;;      Locals:         2       0       0       0       0
  5801 ;;      Temps:          0       0       0       0       0
  5802 ;;      Totals:         2       0       0       0       0
  5803 ;;Total ram usage:        2 bytes
  5804 ;; Hardware stack levels used: 1
  5805 ;; This function calls:
  5806 ;;		Nothing
  5807 ;; This function is called by:
  5808 ;;		_sprintf
  5809 ;; This function uses a non-reentrant model
  5810 ;;
  5811                           
  5812     198A                     _isdigit:	
  5813                           ;psect for function _isdigit
  5814                           
  5815                           
  5816                           ;incstack = 0
  5817                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5818                           ;isdigit@c stored from wreg
  5819     198A  00F1               	movwf	isdigit@c
  5820     198B  01F0               	clrf	_isdigit$961
  5821     198C  303A               	movlw	58
  5822     198D  0271               	subwf	isdigit@c,w
  5823     198E  1803               	skipnc
  5824     198F  2996               	goto	i1l3905
  5825     1990  3030               	movlw	48
  5826     1991  0271               	subwf	isdigit@c,w
  5827     1992  1C03               	skipc
  5828     1993  2996               	goto	i1l3905
  5829     1994  01F0               	clrf	_isdigit$961
  5830     1995  0AF0               	incf	_isdigit$961,f
  5831     1996                     i1l3905:
  5832     1996  0C70               	rrf	_isdigit$961,w
  5833     1997  0008               	return
  5834     1998                     __end_of_isdigit:
  5835                           
  5836                           	psect	text18
  5837     0842                     __ptext18:	
  5838 ;; *************** function _fround *****************
  5839 ;; Defined at:
  5840 ;;		line 417 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
  5841 ;; Parameters:    Size  Location     Type
  5842 ;;  prec            1    wreg     unsigned char 
  5843 ;; Auto vars:     Size  Location     Type
  5844 ;;  prec            1   43[BANK0 ] unsigned char 
  5845 ;; Return value:  Size  Location     Type
  5846 ;;                  4   26[BANK0 ] unsigned char 
  5847 ;; Registers used:
  5848 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5849 ;; Tracked objects:
  5850 ;;		On entry : 300/100
  5851 ;;		On exit  : 300/0
  5852 ;;		Unchanged: 0/0
  5853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5854 ;;      Params:         0       4       0       0       0
  5855 ;;      Locals:         0       9       0       0       0
  5856 ;;      Temps:          0       5       0       0       0
  5857 ;;      Totals:         0      18       0       0       0
  5858 ;;Total ram usage:       18 bytes
  5859 ;; Hardware stack levels used: 1
  5860 ;; Hardware stack levels required when called: 2
  5861 ;; This function calls:
  5862 ;;		___flmul
  5863 ;;		___lbdiv
  5864 ;;		___lbmod
  5865 ;; This function is called by:
  5866 ;;		_sprintf
  5867 ;; This function uses a non-reentrant model
  5868 ;;
  5869                           
  5870     0842                     _fround:	
  5871                           ;psect for function _fround
  5872                           
  5873                           
  5874                           ;incstack = 0
  5875 ;; hardware stack exceeded
  5876                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5877                           ;fround@prec stored from wreg
  5878     0842  1283               	bcf	3,5	;RP0=0, select bank0
  5879     0843  00CB               	movwf	fround@prec
  5880                           
  5881                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 417: fround(unsig
      +                          ned char prec);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 418
      +                          : {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 421:  if(prec>
      +                          =110)
  5882     0844  306E               	movlw	110
  5883     0845  024B               	subwf	fround@prec,w
  5884     0846  1C03               	skipc
  5885     0847  2926               	goto	i1l3847
  5886                           
  5887                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 422:   return 0.5
      +                           * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
  5888     0848  303F               	movlw	63
  5889     0849  00A3               	movwf	___flmul@b+3
  5890     084A  3000               	movlw	0
  5891     084B  00A2               	movwf	___flmul@b+2
  5892     084C  3000               	movlw	0
  5893     084D  00A1               	movwf	___flmul@b+1
  5894     084E  3000               	movlw	0
  5895     084F  00A0               	movwf	___flmul@b
  5896     0850  3064               	movlw	100
  5897     0851  00F6               	movwf	___lbdiv@divisor
  5898     0852  084B               	movf	fround@prec,w
  5899     0853  160A  158A  22EF  120A  158A  	fcall	___lbdiv
  5900     0858  00BE               	movwf	??_fround
  5901     0859  3001               	movlw	1
  5902     085A                     u527_25:
  5903     085A  1003               	clrc
  5904     085B  0DBE               	rlf	??_fround,f
  5905     085C  3EFF               	addlw	-1
  5906     085D  1D03               	skipz
  5907     085E  285A               	goto	u527_25
  5908     085F  1003               	clrc
  5909     0860  0D3E               	rlf	??_fround,w
  5910     0861  3E7D               	addlw	low (((__npowers_-__stringbase)| (0+32768)+72))
  5911     0862  0084               	movwf	4
  5912     0863  160A  118A  200A  120A  158A  	fcall	stringdir
  5913     0868  00BF               	movwf	??_fround+1
  5914     0869  160A  118A  200A  120A  158A  	fcall	stringdir
  5915     086E  00C0               	movwf	??_fround+2
  5916     086F  160A  118A  200A  120A  158A  	fcall	stringdir
  5917     0874  00C1               	movwf	??_fround+3
  5918     0875  160A  118A  200A  120A  158A  	fcall	stringdir
  5919     087A  00C2               	movwf	??_fround+4
  5920     087B  0842               	movf	??_fround+4,w
  5921     087C  00A7               	movwf	___flmul@a+3
  5922     087D  0841               	movf	??_fround+3,w
  5923     087E  00A6               	movwf	___flmul@a+2
  5924     087F  0840               	movf	??_fround+2,w
  5925     0880  00A5               	movwf	___flmul@a+1
  5926     0881  083F               	movf	??_fround+1,w
  5927     0882  00A4               	movwf	___flmul@a
  5928     0883  120A  158A  21F9  120A  158A  	fcall	___flmul
  5929     0888  0823               	movf	?___flmul+3,w
  5930     0889  00CA               	movwf	_fround$1221+3
  5931     088A  0822               	movf	?___flmul+2,w
  5932     088B  00C9               	movwf	_fround$1221+2
  5933     088C  0821               	movf	?___flmul+1,w
  5934     088D  00C8               	movwf	_fround$1221+1
  5935     088E  0820               	movf	?___flmul,w
  5936     088F  00C7               	movwf	_fround$1221
  5937                           
  5938                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 422:   return 0.5
      +                           * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
  5939     0890  300A               	movlw	10
  5940     0891  00F6               	movwf	___lbdiv@divisor
  5941     0892  3064               	movlw	100
  5942     0893  00F0               	movwf	___lbmod@divisor
  5943     0894  084B               	movf	fround@prec,w
  5944     0895  160A  158A  22AF  120A  158A  	fcall	___lbmod
  5945     089A  160A  158A  22EF  120A  158A  	fcall	___lbdiv
  5946     089F  00BE               	movwf	??_fround
  5947     08A0  3001               	movlw	1
  5948     08A1                     u528_25:
  5949     08A1  1003               	clrc
  5950     08A2  0DBE               	rlf	??_fround,f
  5951     08A3  3EFF               	addlw	-1
  5952     08A4  1D03               	skipz
  5953     08A5  28A1               	goto	u528_25
  5954     08A6  1003               	clrc
  5955     08A7  0D3E               	rlf	??_fround,w
  5956     08A8  3E59               	addlw	low (((__npowers_-__stringbase)| (0+32768)+36))
  5957     08A9  0084               	movwf	4
  5958     08AA  160A  118A  200A  120A  158A  	fcall	stringdir
  5959     08AF  00BF               	movwf	??_fround+1
  5960     08B0  160A  118A  200A  120A  158A  	fcall	stringdir
  5961     08B5  00C0               	movwf	??_fround+2
  5962     08B6  160A  118A  200A  120A  158A  	fcall	stringdir
  5963     08BB  00C1               	movwf	??_fround+3
  5964     08BC  160A  118A  200A  120A  158A  	fcall	stringdir
  5965     08C1  00C2               	movwf	??_fround+4
  5966     08C2  0842               	movf	??_fround+4,w
  5967     08C3  00A3               	movwf	___flmul@b+3
  5968     08C4  0841               	movf	??_fround+3,w
  5969     08C5  00A2               	movwf	___flmul@b+2
  5970     08C6  0840               	movf	??_fround+2,w
  5971     08C7  00A1               	movwf	___flmul@b+1
  5972     08C8  083F               	movf	??_fround+1,w
  5973     08C9  00A0               	movwf	___flmul@b
  5974     08CA  084A               	movf	_fround$1221+3,w
  5975     08CB  00A7               	movwf	___flmul@a+3
  5976     08CC  0849               	movf	_fround$1221+2,w
  5977     08CD  00A6               	movwf	___flmul@a+2
  5978     08CE  0848               	movf	_fround$1221+1,w
  5979     08CF  00A5               	movwf	___flmul@a+1
  5980     08D0  0847               	movf	_fround$1221,w
  5981     08D1  00A4               	movwf	___flmul@a
  5982     08D2  120A  158A  21F9  120A  158A  	fcall	___flmul
  5983     08D7  0823               	movf	?___flmul+3,w
  5984     08D8  00C6               	movwf	_fround$1222+3
  5985     08D9  0822               	movf	?___flmul+2,w
  5986     08DA  00C5               	movwf	_fround$1222+2
  5987     08DB  0821               	movf	?___flmul+1,w
  5988     08DC  00C4               	movwf	_fround$1222+1
  5989     08DD  0820               	movf	?___flmul,w
  5990     08DE  00C3               	movwf	_fround$1222
  5991                           
  5992                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 422:   return 0.5
      +                           * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
  5993     08DF  300A               	movlw	10
  5994     08E0  00F0               	movwf	___lbmod@divisor
  5995     08E1  084B               	movf	fround@prec,w
  5996     08E2  160A  158A  22AF  120A  158A  	fcall	___lbmod
  5997     08E7  00BE               	movwf	??_fround
  5998     08E8  3001               	movlw	1
  5999     08E9                     u529_25:
  6000     08E9  1003               	clrc
  6001     08EA  0DBE               	rlf	??_fround,f
  6002     08EB  3EFF               	addlw	-1
  6003     08EC  1D03               	skipz
  6004     08ED  28E9               	goto	u529_25
  6005     08EE  1003               	clrc
  6006     08EF  0D3E               	rlf	??_fround,w
  6007     08F0  3E35               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  6008     08F1  0084               	movwf	4
  6009     08F2  160A  118A  200A  120A  158A  	fcall	stringdir
  6010     08F7  00BF               	movwf	??_fround+1
  6011     08F8  160A  118A  200A  120A  158A  	fcall	stringdir
  6012     08FD  00C0               	movwf	??_fround+2
  6013     08FE  160A  118A  200A  120A  158A  	fcall	stringdir
  6014     0903  00C1               	movwf	??_fround+3
  6015     0904  160A  118A  200A  120A  158A  	fcall	stringdir
  6016     0909  00C2               	movwf	??_fround+4
  6017     090A  0842               	movf	??_fround+4,w
  6018     090B  00A3               	movwf	___flmul@b+3
  6019     090C  0841               	movf	??_fround+3,w
  6020     090D  00A2               	movwf	___flmul@b+2
  6021     090E  0840               	movf	??_fround+2,w
  6022     090F  00A1               	movwf	___flmul@b+1
  6023     0910  083F               	movf	??_fround+1,w
  6024     0911  00A0               	movwf	___flmul@b
  6025     0912  0846               	movf	_fround$1222+3,w
  6026     0913  00A7               	movwf	___flmul@a+3
  6027     0914  0845               	movf	_fround$1222+2,w
  6028     0915  00A6               	movwf	___flmul@a+2
  6029     0916  0844               	movf	_fround$1222+1,w
  6030     0917  00A5               	movwf	___flmul@a+1
  6031     0918  0843               	movf	_fround$1222,w
  6032     0919  00A4               	movwf	___flmul@a
  6033     091A  120A  158A  21F9   	fcall	___flmul
  6034     091D  0823               	movf	?___flmul+3,w
  6035     091E  00BD               	movwf	?_fround+3
  6036     091F  0822               	movf	?___flmul+2,w
  6037     0920  00BC               	movwf	?_fround+2
  6038     0921  0821               	movf	?___flmul+1,w
  6039     0922  00BB               	movwf	?_fround+1
  6040     0923  0820               	movf	?___flmul,w
  6041     0924  00BA               	movwf	?_fround
  6042     0925  0008               	return
  6043     0926                     i1l3847:
  6044     0926  300B               	movlw	11
  6045     0927  024B               	subwf	fround@prec,w
  6046     0928  1C03               	skipc
  6047     0929  29B9               	goto	i1l3853
  6048                           
  6049                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 424:   return 0.5
      +                           * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  6050     092A  303F               	movlw	63
  6051     092B  00A3               	movwf	___flmul@b+3
  6052     092C  3000               	movlw	0
  6053     092D  00A2               	movwf	___flmul@b+2
  6054     092E  3000               	movlw	0
  6055     092F  00A1               	movwf	___flmul@b+1
  6056     0930  3000               	movlw	0
  6057     0931  00A0               	movwf	___flmul@b
  6058     0932  300A               	movlw	10
  6059     0933  00F6               	movwf	___lbdiv@divisor
  6060     0934  084B               	movf	fround@prec,w
  6061     0935  160A  158A  22EF  120A  158A  	fcall	___lbdiv
  6062     093A  00BE               	movwf	??_fround
  6063     093B  3001               	movlw	1
  6064     093C                     u531_25:
  6065     093C  1003               	clrc
  6066     093D  0DBE               	rlf	??_fround,f
  6067     093E  3EFF               	addlw	-1
  6068     093F  1D03               	skipz
  6069     0940  293C               	goto	u531_25
  6070     0941  1003               	clrc
  6071     0942  0D3E               	rlf	??_fround,w
  6072     0943  3E59               	addlw	low (((__npowers_-__stringbase)| (0+32768)+36))
  6073     0944  0084               	movwf	4
  6074     0945  160A  118A  200A  120A  158A  	fcall	stringdir
  6075     094A  00BF               	movwf	??_fround+1
  6076     094B  160A  118A  200A  120A  158A  	fcall	stringdir
  6077     0950  00C0               	movwf	??_fround+2
  6078     0951  160A  118A  200A  120A  158A  	fcall	stringdir
  6079     0956  00C1               	movwf	??_fround+3
  6080     0957  160A  118A  200A  120A  158A  	fcall	stringdir
  6081     095C  00C2               	movwf	??_fround+4
  6082     095D  0842               	movf	??_fround+4,w
  6083     095E  00A7               	movwf	___flmul@a+3
  6084     095F  0841               	movf	??_fround+3,w
  6085     0960  00A6               	movwf	___flmul@a+2
  6086     0961  0840               	movf	??_fround+2,w
  6087     0962  00A5               	movwf	___flmul@a+1
  6088     0963  083F               	movf	??_fround+1,w
  6089     0964  00A4               	movwf	___flmul@a
  6090     0965  120A  158A  21F9  120A  158A  	fcall	___flmul
  6091     096A  0823               	movf	?___flmul+3,w
  6092     096B  00CA               	movwf	_fround$1221+3
  6093     096C  0822               	movf	?___flmul+2,w
  6094     096D  00C9               	movwf	_fround$1221+2
  6095     096E  0821               	movf	?___flmul+1,w
  6096     096F  00C8               	movwf	_fround$1221+1
  6097     0970  0820               	movf	?___flmul,w
  6098     0971  00C7               	movwf	_fround$1221
  6099                           
  6100                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 424:   return 0.5
      +                           * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  6101     0972  300A               	movlw	10
  6102     0973  00F0               	movwf	___lbmod@divisor
  6103     0974  084B               	movf	fround@prec,w
  6104     0975  160A  158A  22AF  120A  158A  	fcall	___lbmod
  6105     097A  00BE               	movwf	??_fround
  6106     097B  3001               	movlw	1
  6107     097C                     u532_25:
  6108     097C  1003               	clrc
  6109     097D  0DBE               	rlf	??_fround,f
  6110     097E  3EFF               	addlw	-1
  6111     097F  1D03               	skipz
  6112     0980  297C               	goto	u532_25
  6113     0981  1003               	clrc
  6114     0982  0D3E               	rlf	??_fround,w
  6115     0983  3E35               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  6116     0984  0084               	movwf	4
  6117     0985  160A  118A  200A  120A  158A  	fcall	stringdir
  6118     098A  00BF               	movwf	??_fround+1
  6119     098B  160A  118A  200A  120A  158A  	fcall	stringdir
  6120     0990  00C0               	movwf	??_fround+2
  6121     0991  160A  118A  200A  120A  158A  	fcall	stringdir
  6122     0996  00C1               	movwf	??_fround+3
  6123     0997  160A  118A  200A  120A  158A  	fcall	stringdir
  6124     099C  00C2               	movwf	??_fround+4
  6125     099D  0842               	movf	??_fround+4,w
  6126     099E  00A3               	movwf	___flmul@b+3
  6127     099F  0841               	movf	??_fround+3,w
  6128     09A0  00A2               	movwf	___flmul@b+2
  6129     09A1  0840               	movf	??_fround+2,w
  6130     09A2  00A1               	movwf	___flmul@b+1
  6131     09A3  083F               	movf	??_fround+1,w
  6132     09A4  00A0               	movwf	___flmul@b
  6133     09A5  084A               	movf	_fround$1221+3,w
  6134     09A6  00A7               	movwf	___flmul@a+3
  6135     09A7  0849               	movf	_fround$1221+2,w
  6136     09A8  00A6               	movwf	___flmul@a+2
  6137     09A9  0848               	movf	_fround$1221+1,w
  6138     09AA  00A5               	movwf	___flmul@a+1
  6139     09AB  0847               	movf	_fround$1221,w
  6140     09AC  00A4               	movwf	___flmul@a
  6141     09AD  120A  158A  21F9   	fcall	___flmul
  6142     09B0  0823               	movf	?___flmul+3,w
  6143     09B1  00BD               	movwf	?_fround+3
  6144     09B2  0822               	movf	?___flmul+2,w
  6145     09B3  00BC               	movwf	?_fround+2
  6146     09B4  0821               	movf	?___flmul+1,w
  6147     09B5  00BB               	movwf	?_fround+1
  6148     09B6  0820               	movf	?___flmul,w
  6149     09B7  00BA               	movwf	?_fround
  6150     09B8  0008               	return
  6151     09B9                     i1l3853:
  6152                           
  6153                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 425:  return 0.5 
      +                          * _npowers_[prec];
  6154     09B9  303F               	movlw	63
  6155     09BA  00A3               	movwf	___flmul@b+3
  6156     09BB  3000               	movlw	0
  6157     09BC  00A2               	movwf	___flmul@b+2
  6158     09BD  3000               	movlw	0
  6159     09BE  00A1               	movwf	___flmul@b+1
  6160     09BF  3000               	movlw	0
  6161     09C0  00A0               	movwf	___flmul@b
  6162     09C1  084B               	movf	fround@prec,w
  6163     09C2  00BE               	movwf	??_fround
  6164     09C3  3001               	movlw	1
  6165     09C4                     u533_25:
  6166     09C4  1003               	clrc
  6167     09C5  0DBE               	rlf	??_fround,f
  6168     09C6  3EFF               	addlw	-1
  6169     09C7  1D03               	skipz
  6170     09C8  29C4               	goto	u533_25
  6171     09C9  1003               	clrc
  6172     09CA  0D3E               	rlf	??_fround,w
  6173     09CB  3E35               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  6174     09CC  0084               	movwf	4
  6175     09CD  160A  118A  200A  120A  158A  	fcall	stringdir
  6176     09D2  00BF               	movwf	??_fround+1
  6177     09D3  160A  118A  200A  120A  158A  	fcall	stringdir
  6178     09D8  00C0               	movwf	??_fround+2
  6179     09D9  160A  118A  200A  120A  158A  	fcall	stringdir
  6180     09DE  00C1               	movwf	??_fround+3
  6181     09DF  160A  118A  200A  120A  158A  	fcall	stringdir
  6182     09E4  00C2               	movwf	??_fround+4
  6183     09E5  0842               	movf	??_fround+4,w
  6184     09E6  00A7               	movwf	___flmul@a+3
  6185     09E7  0841               	movf	??_fround+3,w
  6186     09E8  00A6               	movwf	___flmul@a+2
  6187     09E9  0840               	movf	??_fround+2,w
  6188     09EA  00A5               	movwf	___flmul@a+1
  6189     09EB  083F               	movf	??_fround+1,w
  6190     09EC  00A4               	movwf	___flmul@a
  6191     09ED  120A  158A  21F9   	fcall	___flmul
  6192     09F0  0823               	movf	?___flmul+3,w
  6193     09F1  00BD               	movwf	?_fround+3
  6194     09F2  0822               	movf	?___flmul+2,w
  6195     09F3  00BC               	movwf	?_fround+2
  6196     09F4  0821               	movf	?___flmul+1,w
  6197     09F5  00BB               	movwf	?_fround+1
  6198     09F6  0820               	movf	?___flmul,w
  6199     09F7  00BA               	movwf	?_fround
  6200     09F8  0008               	return
  6201     09F9                     __end_of_fround:
  6202                           
  6203                           	psect	text19
  6204     1AAF                     __ptext19:	
  6205 ;; *************** function ___lbmod *****************
  6206 ;; Defined at:
  6207 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lbmod.c"
  6208 ;; Parameters:    Size  Location     Type
  6209 ;;  dividend        1    wreg     unsigned char 
  6210 ;;  divisor         1    0[COMMON] unsigned char 
  6211 ;; Auto vars:     Size  Location     Type
  6212 ;;  dividend        1    3[COMMON] unsigned char 
  6213 ;;  rem             1    5[COMMON] unsigned char 
  6214 ;;  counter         1    4[COMMON] unsigned char 
  6215 ;; Return value:  Size  Location     Type
  6216 ;;                  1    wreg      unsigned char 
  6217 ;; Registers used:
  6218 ;;		wreg, status,2, status,0
  6219 ;; Tracked objects:
  6220 ;;		On entry : 300/0
  6221 ;;		On exit  : 300/0
  6222 ;;		Unchanged: 300/0
  6223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6224 ;;      Params:         1       0       0       0       0
  6225 ;;      Locals:         3       0       0       0       0
  6226 ;;      Temps:          2       0       0       0       0
  6227 ;;      Totals:         6       0       0       0       0
  6228 ;;Total ram usage:        6 bytes
  6229 ;; Hardware stack levels used: 1
  6230 ;; This function calls:
  6231 ;;		Nothing
  6232 ;; This function is called by:
  6233 ;;		_fround
  6234 ;; This function uses a non-reentrant model
  6235 ;;
  6236                           
  6237     1AAF                     ___lbmod:	
  6238                           ;psect for function ___lbmod
  6239                           
  6240                           
  6241                           ;incstack = 0
  6242                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  6243                           ;___lbmod@dividend stored from wreg
  6244     1AAF  00F3               	movwf	___lbmod@dividend
  6245     1AB0  3008               	movlw	8
  6246     1AB1  00F4               	movwf	___lbmod@counter
  6247     1AB2  01F5               	clrf	___lbmod@rem
  6248     1AB3                     i1l3405:
  6249     1AB3  0873               	movf	___lbmod@dividend,w
  6250     1AB4  00F1               	movwf	??___lbmod
  6251     1AB5  3007               	movlw	7
  6252     1AB6                     u426_25:
  6253     1AB6  1003               	clrc
  6254     1AB7  0CF1               	rrf	??___lbmod,f
  6255     1AB8  3EFF               	addlw	-1
  6256     1AB9  1D03               	skipz
  6257     1ABA  2AB6               	goto	u426_25
  6258     1ABB  0875               	movf	___lbmod@rem,w
  6259     1ABC  00F2               	movwf	??___lbmod+1
  6260     1ABD  0772               	addwf	??___lbmod+1,w
  6261     1ABE  0471               	iorwf	??___lbmod,w
  6262     1ABF  00F5               	movwf	___lbmod@rem
  6263     1AC0  1003               	clrc
  6264     1AC1  0DF3               	rlf	___lbmod@dividend,f
  6265     1AC2  0870               	movf	___lbmod@divisor,w
  6266     1AC3  0275               	subwf	___lbmod@rem,w
  6267     1AC4  1C03               	skipc
  6268     1AC5  2AC8               	goto	i1l931
  6269     1AC6  0870               	movf	___lbmod@divisor,w
  6270     1AC7  02F5               	subwf	___lbmod@rem,f
  6271     1AC8                     i1l931:
  6272     1AC8  3001               	movlw	1
  6273     1AC9  02F4               	subwf	___lbmod@counter,f
  6274     1ACA  1D03               	btfss	3,2
  6275     1ACB  2AB3               	goto	i1l3405
  6276     1ACC  0875               	movf	___lbmod@rem,w
  6277     1ACD  0008               	return
  6278     1ACE                     __end_of___lbmod:
  6279                           
  6280                           	psect	text20
  6281     1AEF                     __ptext20:	
  6282 ;; *************** function ___lbdiv *****************
  6283 ;; Defined at:
  6284 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lbdiv.c"
  6285 ;; Parameters:    Size  Location     Type
  6286 ;;  dividend        1    wreg     unsigned char 
  6287 ;;  divisor         1    6[COMMON] unsigned char 
  6288 ;; Auto vars:     Size  Location     Type
  6289 ;;  dividend        1    7[COMMON] unsigned char 
  6290 ;;  quotient        1    9[COMMON] unsigned char 
  6291 ;;  counter         1    8[COMMON] unsigned char 
  6292 ;; Return value:  Size  Location     Type
  6293 ;;                  1    wreg      unsigned char 
  6294 ;; Registers used:
  6295 ;;		wreg, status,2, status,0, btemp+1
  6296 ;; Tracked objects:
  6297 ;;		On entry : 300/0
  6298 ;;		On exit  : 300/0
  6299 ;;		Unchanged: 300/0
  6300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6301 ;;      Params:         1       0       0       0       0
  6302 ;;      Locals:         3       0       0       0       0
  6303 ;;      Temps:          0       0       0       0       0
  6304 ;;      Totals:         4       0       0       0       0
  6305 ;;Total ram usage:        4 bytes
  6306 ;; Hardware stack levels used: 1
  6307 ;; This function calls:
  6308 ;;		Nothing
  6309 ;; This function is called by:
  6310 ;;		_fround
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314     1AEF                     ___lbdiv:	
  6315                           ;psect for function ___lbdiv
  6316                           
  6317                           
  6318                           ;incstack = 0
  6319                           ; Regs used in ___lbdiv: [wreg+status,2+status,0+btemp+1]
  6320                           ;___lbdiv@dividend stored from wreg
  6321     1AEF  00F7               	movwf	___lbdiv@dividend
  6322     1AF0  01F9               	clrf	___lbdiv@quotient
  6323     1AF1  0876               	movf	___lbdiv@divisor,w
  6324     1AF2  1903               	btfsc	3,2
  6325     1AF3  2B0E               	goto	i1l3397
  6326     1AF4  01F8               	clrf	___lbdiv@counter
  6327     1AF5  0AF8               	incf	___lbdiv@counter,f
  6328     1AF6                     i1l3385:
  6329     1AF6  1BF6               	btfsc	___lbdiv@divisor,7
  6330     1AF7  2AFF               	goto	i1l3387
  6331     1AF8  1003               	clrc
  6332     1AF9  0DF6               	rlf	___lbdiv@divisor,f
  6333     1AFA  3001               	movlw	1
  6334     1AFB  00FF               	movwf	127
  6335     1AFC  087F               	movf	127,w
  6336     1AFD  07F8               	addwf	___lbdiv@counter,f
  6337     1AFE  2AF6               	goto	i1l3385
  6338     1AFF                     i1l3387:
  6339     1AFF  1003               	clrc
  6340     1B00  0DF9               	rlf	___lbdiv@quotient,f
  6341     1B01  0876               	movf	___lbdiv@divisor,w
  6342     1B02  0277               	subwf	___lbdiv@dividend,w
  6343     1B03  1C03               	skipc
  6344     1B04  2B09               	goto	L7
  6345     1B05  0876               	movf	___lbdiv@divisor,w
  6346     1B06  02F7               	subwf	___lbdiv@dividend,f
  6347     1B07  1479               	bsf	___lbdiv@quotient,0
  6348     1B08  1003               	clrc
  6349     1B09                     L7:
  6350     1B09  0CF6               	rrf	___lbdiv@divisor,f
  6351     1B0A  3001               	movlw	1
  6352     1B0B  02F8               	subwf	___lbdiv@counter,f
  6353     1B0C  1D03               	btfss	3,2
  6354     1B0D  2AFF               	goto	i1l3387
  6355     1B0E                     i1l3397:
  6356     1B0E  0879               	movf	___lbdiv@quotient,w
  6357     1B0F  0008               	return
  6358     1B10                     __end_of___lbdiv:
  6359                           
  6360                           	psect	text21
  6361     14FA                     __ptext21:	
  6362 ;; *************** function __tdiv_to_l_ *****************
  6363 ;; Defined at:
  6364 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftdivl.c"
  6365 ;; Parameters:    Size  Location     Type
  6366 ;;  f1              3    0[COMMON] float 
  6367 ;;  f2              3    3[COMMON] float 
  6368 ;; Auto vars:     Size  Location     Type
  6369 ;;  quot            4    0[BANK0 ] unsigned long 
  6370 ;;  exp1            1    5[BANK0 ] unsigned char 
  6371 ;;  cntr            1    4[BANK0 ] unsigned char 
  6372 ;; Return value:  Size  Location     Type
  6373 ;;                  4    0[COMMON] unsigned long 
  6374 ;; Registers used:
  6375 ;;		wreg, status,2, status,0, btemp+1
  6376 ;; Tracked objects:
  6377 ;;		On entry : 0/0
  6378 ;;		On exit  : 300/0
  6379 ;;		Unchanged: 0/0
  6380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6381 ;;      Params:         6       0       0       0       0
  6382 ;;      Locals:         0       6       0       0       0
  6383 ;;      Temps:          3       0       0       0       0
  6384 ;;      Totals:         9       6       0       0       0
  6385 ;;Total ram usage:       15 bytes
  6386 ;; Hardware stack levels used: 1
  6387 ;; This function calls:
  6388 ;;		Nothing
  6389 ;; This function is called by:
  6390 ;;		_sprintf
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394     14FA                     __tdiv_to_l_:	
  6395                           ;psect for function __tdiv_to_l_
  6396                           
  6397                           
  6398                           ;incstack = 0
  6399                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0+btemp+1]
  6400     14FA  0870               	movf	__tdiv_to_l_@f1,w
  6401     14FB  00F6               	movwf	??__tdiv_to_l_
  6402     14FC  0871               	movf	__tdiv_to_l_@f1+1,w
  6403     14FD  00F7               	movwf	??__tdiv_to_l_+1
  6404     14FE  0872               	movf	__tdiv_to_l_@f1+2,w
  6405     14FF  00F8               	movwf	??__tdiv_to_l_+2
  6406     1500  1003               	clrc
  6407     1501  0D77               	rlf	??__tdiv_to_l_+1,w
  6408     1502  0D78               	rlf	??__tdiv_to_l_+2,w
  6409     1503  1283               	bcf	3,5	;RP0=0, select bank0
  6410     1504  1303               	bcf	3,6	;RP1=0, select bank0
  6411     1505  00A5               	movwf	__tdiv_to_l_@exp1
  6412     1506  0825               	movf	__tdiv_to_l_@exp1,w
  6413     1507  1D03               	btfss	3,2
  6414     1508  2D12               	goto	i1l3915
  6415     1509                     i1l3911:
  6416     1509  3000               	movlw	0
  6417     150A  00F3               	movwf	?__tdiv_to_l_+3
  6418     150B  3000               	movlw	0
  6419     150C  00F2               	movwf	?__tdiv_to_l_+2
  6420     150D  3000               	movlw	0
  6421     150E  00F1               	movwf	?__tdiv_to_l_+1
  6422     150F  3000               	movlw	0
  6423     1510  00F0               	movwf	?__tdiv_to_l_
  6424     1511  0008               	return
  6425     1512                     i1l3915:
  6426     1512  0873               	movf	__tdiv_to_l_@f2,w
  6427     1513  00F6               	movwf	??__tdiv_to_l_
  6428     1514  0874               	movf	__tdiv_to_l_@f2+1,w
  6429     1515  00F7               	movwf	??__tdiv_to_l_+1
  6430     1516  0875               	movf	__tdiv_to_l_@f2+2,w
  6431     1517  00F8               	movwf	??__tdiv_to_l_+2
  6432     1518  1003               	clrc
  6433     1519  0D77               	rlf	??__tdiv_to_l_+1,w
  6434     151A  0D78               	rlf	??__tdiv_to_l_+2,w
  6435     151B  00A4               	movwf	__tdiv_to_l_@cntr
  6436     151C  0824               	movf	__tdiv_to_l_@cntr,w
  6437     151D  1903               	btfsc	3,2
  6438     151E  2D09               	goto	i1l3911
  6439     151F  17F1               	bsf	__tdiv_to_l_@f1+1,7
  6440     1520  30FF               	movlw	255
  6441     1521  05F0               	andwf	__tdiv_to_l_@f1,f
  6442     1522  30FF               	movlw	255
  6443     1523  05F1               	andwf	__tdiv_to_l_@f1+1,f
  6444     1524  3000               	movlw	0
  6445     1525  05F2               	andwf	__tdiv_to_l_@f1+2,f
  6446     1526  17F4               	bsf	__tdiv_to_l_@f2+1,7
  6447     1527  30FF               	movlw	255
  6448     1528  05F3               	andwf	__tdiv_to_l_@f2,f
  6449     1529  30FF               	movlw	255
  6450     152A  05F4               	andwf	__tdiv_to_l_@f2+1,f
  6451     152B  3000               	movlw	0
  6452     152C  05F5               	andwf	__tdiv_to_l_@f2+2,f
  6453     152D  3000               	movlw	0
  6454     152E  00A3               	movwf	__tdiv_to_l_@quot+3
  6455     152F  3000               	movlw	0
  6456     1530  00A2               	movwf	__tdiv_to_l_@quot+2
  6457     1531  3000               	movlw	0
  6458     1532  00A1               	movwf	__tdiv_to_l_@quot+1
  6459     1533  3000               	movlw	0
  6460     1534  00A0               	movwf	__tdiv_to_l_@quot
  6461     1535  307F               	movlw	127
  6462     1536  02A5               	subwf	__tdiv_to_l_@exp1,f
  6463     1537  3098               	movlw	152
  6464     1538  0724               	addwf	__tdiv_to_l_@cntr,w
  6465     1539  00F6               	movwf	??__tdiv_to_l_
  6466     153A  0876               	movf	??__tdiv_to_l_,w
  6467     153B  02A5               	subwf	__tdiv_to_l_@exp1,f
  6468     153C  3018               	movlw	24
  6469     153D  00A4               	movwf	__tdiv_to_l_@cntr
  6470     153E                     i1l3929:
  6471     153E  3001               	movlw	1
  6472     153F  00F6               	movwf	??__tdiv_to_l_
  6473     1540                     u555_25:
  6474     1540  1003               	clrc
  6475     1541  0DA0               	rlf	__tdiv_to_l_@quot,f
  6476     1542  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  6477     1543  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  6478     1544  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  6479     1545  0BF6               	decfsz	??__tdiv_to_l_,f
  6480     1546  2D40               	goto	u555_25
  6481     1547  0875               	movf	__tdiv_to_l_@f2+2,w
  6482     1548  0272               	subwf	__tdiv_to_l_@f1+2,w
  6483     1549  1D03               	skipz
  6484     154A  2D51               	goto	u556_25
  6485     154B  0874               	movf	__tdiv_to_l_@f2+1,w
  6486     154C  0271               	subwf	__tdiv_to_l_@f1+1,w
  6487     154D  1D03               	skipz
  6488     154E  2D51               	goto	u556_25
  6489     154F  0873               	movf	__tdiv_to_l_@f2,w
  6490     1550  0270               	subwf	__tdiv_to_l_@f1,w
  6491     1551                     u556_25:
  6492     1551  1C03               	skipc
  6493     1552  2D5E               	goto	i1l3937
  6494     1553  0873               	movf	__tdiv_to_l_@f2,w
  6495     1554  02F0               	subwf	__tdiv_to_l_@f1,f
  6496     1555  0874               	movf	__tdiv_to_l_@f2+1,w
  6497     1556  1C03               	skipc
  6498     1557  0F74               	incfsz	__tdiv_to_l_@f2+1,w
  6499     1558  02F1               	subwf	__tdiv_to_l_@f1+1,f
  6500     1559  0875               	movf	__tdiv_to_l_@f2+2,w
  6501     155A  1C03               	skipc
  6502     155B  0A75               	incf	__tdiv_to_l_@f2+2,w
  6503     155C  02F2               	subwf	__tdiv_to_l_@f1+2,f
  6504     155D  1420               	bsf	__tdiv_to_l_@quot,0
  6505     155E                     i1l3937:
  6506     155E  3001               	movlw	1
  6507     155F                     u557_25:
  6508     155F  1003               	clrc
  6509     1560  0DF0               	rlf	__tdiv_to_l_@f1,f
  6510     1561  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  6511     1562  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  6512     1563  3EFF               	addlw	-1
  6513     1564  1D03               	skipz
  6514     1565  2D5F               	goto	u557_25
  6515     1566  3001               	movlw	1
  6516     1567  02A4               	subwf	__tdiv_to_l_@cntr,f
  6517     1568  1D03               	btfss	3,2
  6518     1569  2D3E               	goto	i1l3929
  6519     156A  1FA5               	btfss	__tdiv_to_l_@exp1,7
  6520     156B  2D81               	goto	i1l3951
  6521     156C  0825               	movf	__tdiv_to_l_@exp1,w
  6522     156D  3A80               	xorlw	128
  6523     156E  3E97               	addlw	151
  6524     156F  1C03               	btfss	3,0
  6525     1570  2D09               	goto	i1l3911
  6526     1571                     i1l3947:
  6527     1571  3001               	movlw	1
  6528     1572                     u561_25:
  6529     1572  1003               	clrc
  6530     1573  0CA3               	rrf	__tdiv_to_l_@quot+3,f
  6531     1574  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  6532     1575  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  6533     1576  0CA0               	rrf	__tdiv_to_l_@quot,f
  6534     1577  3EFF               	addlw	-1
  6535     1578  1D03               	skipz
  6536     1579  2D72               	goto	u561_25
  6537     157A  3001               	movlw	1
  6538     157B  00FF               	movwf	127
  6539     157C  087F               	movf	127,w
  6540     157D  07A5               	addwf	__tdiv_to_l_@exp1,f
  6541     157E  1903               	btfsc	3,2
  6542     157F  2D94               	goto	i1l3959
  6543     1580  2D71               	goto	i1l3947
  6544     1581                     i1l3951:
  6545     1581  3018               	movlw	24
  6546     1582  0225               	subwf	__tdiv_to_l_@exp1,w
  6547     1583  1803               	btfsc	3,0
  6548     1584  2D09               	goto	i1l3911
  6549     1585                     i1l873:
  6550     1585  0825               	movf	__tdiv_to_l_@exp1,w
  6551     1586  1903               	btfsc	3,2
  6552     1587  2D94               	goto	i1l3959
  6553     1588  3001               	movlw	1
  6554     1589  00F6               	movwf	??__tdiv_to_l_
  6555     158A                     u564_25:
  6556     158A  1003               	clrc
  6557     158B  0DA0               	rlf	__tdiv_to_l_@quot,f
  6558     158C  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  6559     158D  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  6560     158E  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  6561     158F  0BF6               	decfsz	??__tdiv_to_l_,f
  6562     1590  2D8A               	goto	u564_25
  6563     1591  3001               	movlw	1
  6564     1592  02A5               	subwf	__tdiv_to_l_@exp1,f
  6565     1593  2D85               	goto	i1l873
  6566     1594                     i1l3959:
  6567     1594  0823               	movf	__tdiv_to_l_@quot+3,w
  6568     1595  00F3               	movwf	?__tdiv_to_l_+3
  6569     1596  0822               	movf	__tdiv_to_l_@quot+2,w
  6570     1597  00F2               	movwf	?__tdiv_to_l_+2
  6571     1598  0821               	movf	__tdiv_to_l_@quot+1,w
  6572     1599  00F1               	movwf	?__tdiv_to_l_+1
  6573     159A  0820               	movf	__tdiv_to_l_@quot,w
  6574     159B  00F0               	movwf	?__tdiv_to_l_
  6575     159C  0008               	return
  6576     159D                     __end_of__tdiv_to_l_:
  6577                           
  6578                           	psect	text22
  6579     1457                     __ptext22:	
  6580 ;; *************** function __div_to_l_ *****************
  6581 ;; Defined at:
  6582 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\fldivl.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;  f1              4    0[COMMON] unsigned long 
  6585 ;;  f2              4    4[COMMON] unsigned long 
  6586 ;; Auto vars:     Size  Location     Type
  6587 ;;  quot            4    0[BANK0 ] unsigned long 
  6588 ;;  exp1            1    5[BANK0 ] unsigned char 
  6589 ;;  cntr            1    4[BANK0 ] unsigned char 
  6590 ;; Return value:  Size  Location     Type
  6591 ;;                  4    0[COMMON] unsigned long 
  6592 ;; Registers used:
  6593 ;;		wreg, status,2, status,0, btemp+1
  6594 ;; Tracked objects:
  6595 ;;		On entry : 300/100
  6596 ;;		On exit  : 300/0
  6597 ;;		Unchanged: 0/0
  6598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6599 ;;      Params:         8       0       0       0       0
  6600 ;;      Locals:         0       6       0       0       0
  6601 ;;      Temps:          1       0       0       0       0
  6602 ;;      Totals:         9       6       0       0       0
  6603 ;;Total ram usage:       15 bytes
  6604 ;; Hardware stack levels used: 1
  6605 ;; This function calls:
  6606 ;;		Nothing
  6607 ;; This function is called by:
  6608 ;;		_sprintf
  6609 ;; This function uses a non-reentrant model
  6610 ;;
  6611                           
  6612     1457                     __div_to_l_:	
  6613                           ;psect for function __div_to_l_
  6614                           
  6615                           
  6616                           ;incstack = 0
  6617                           ; Regs used in __div_to_l_: [wreg+status,2+status,0+btemp+1]
  6618     1457  1003               	clrc
  6619     1458  0D72               	rlf	__div_to_l_@f1+2,w
  6620     1459  0D73               	rlf	__div_to_l_@f1+3,w
  6621     145A  1283               	bcf	3,5	;RP0=0, select bank0
  6622     145B  00A5               	movwf	__div_to_l_@exp1
  6623     145C  0825               	movf	__div_to_l_@exp1,w
  6624     145D  1D03               	btfss	3,2
  6625     145E  2C68               	goto	i1l3969
  6626     145F                     i1l3965:
  6627     145F  3000               	movlw	0
  6628     1460  00F3               	movwf	?__div_to_l_+3
  6629     1461  3000               	movlw	0
  6630     1462  00F2               	movwf	?__div_to_l_+2
  6631     1463  3000               	movlw	0
  6632     1464  00F1               	movwf	?__div_to_l_+1
  6633     1465  3000               	movlw	0
  6634     1466  00F0               	movwf	?__div_to_l_
  6635     1467  0008               	return
  6636     1468                     i1l3969:
  6637     1468  1003               	clrc
  6638     1469  0D76               	rlf	__div_to_l_@f2+2,w
  6639     146A  0D77               	rlf	__div_to_l_@f2+3,w
  6640     146B  00A4               	movwf	__div_to_l_@cntr
  6641     146C  0824               	movf	__div_to_l_@cntr,w
  6642     146D  1903               	btfsc	3,2
  6643     146E  2C5F               	goto	i1l3965
  6644     146F  17F2               	bsf	__div_to_l_@f1+2,7
  6645     1470  30FF               	movlw	255
  6646     1471  05F0               	andwf	__div_to_l_@f1,f
  6647     1472  30FF               	movlw	255
  6648     1473  05F1               	andwf	__div_to_l_@f1+1,f
  6649     1474  30FF               	movlw	255
  6650     1475  05F2               	andwf	__div_to_l_@f1+2,f
  6651     1476  3000               	movlw	0
  6652     1477  05F3               	andwf	__div_to_l_@f1+3,f
  6653     1478  17F6               	bsf	__div_to_l_@f2+2,7
  6654     1479  30FF               	movlw	255
  6655     147A  05F4               	andwf	__div_to_l_@f2,f
  6656     147B  30FF               	movlw	255
  6657     147C  05F5               	andwf	__div_to_l_@f2+1,f
  6658     147D  30FF               	movlw	255
  6659     147E  05F6               	andwf	__div_to_l_@f2+2,f
  6660     147F  3000               	movlw	0
  6661     1480  05F7               	andwf	__div_to_l_@f2+3,f
  6662     1481  3000               	movlw	0
  6663     1482  00A3               	movwf	__div_to_l_@quot+3
  6664     1483  3000               	movlw	0
  6665     1484  00A2               	movwf	__div_to_l_@quot+2
  6666     1485  3000               	movlw	0
  6667     1486  00A1               	movwf	__div_to_l_@quot+1
  6668     1487  3000               	movlw	0
  6669     1488  00A0               	movwf	__div_to_l_@quot
  6670     1489  307F               	movlw	127
  6671     148A  02A5               	subwf	__div_to_l_@exp1,f
  6672     148B  30A0               	movlw	160
  6673     148C  0724               	addwf	__div_to_l_@cntr,w
  6674     148D  00F8               	movwf	??__div_to_l_
  6675     148E  0878               	movf	??__div_to_l_,w
  6676     148F  02A5               	subwf	__div_to_l_@exp1,f
  6677     1490  3020               	movlw	32
  6678     1491  00A4               	movwf	__div_to_l_@cntr
  6679     1492                     i1l3983:
  6680     1492  3001               	movlw	1
  6681     1493  00F8               	movwf	??__div_to_l_
  6682     1494                     u568_25:
  6683     1494  1003               	clrc
  6684     1495  0DA0               	rlf	__div_to_l_@quot,f
  6685     1496  0DA1               	rlf	__div_to_l_@quot+1,f
  6686     1497  0DA2               	rlf	__div_to_l_@quot+2,f
  6687     1498  0DA3               	rlf	__div_to_l_@quot+3,f
  6688     1499  0BF8               	decfsz	??__div_to_l_,f
  6689     149A  2C94               	goto	u568_25
  6690     149B  0877               	movf	__div_to_l_@f2+3,w
  6691     149C  0273               	subwf	__div_to_l_@f1+3,w
  6692     149D  1D03               	skipz
  6693     149E  2CA9               	goto	u569_25
  6694     149F  0876               	movf	__div_to_l_@f2+2,w
  6695     14A0  0272               	subwf	__div_to_l_@f1+2,w
  6696     14A1  1D03               	skipz
  6697     14A2  2CA9               	goto	u569_25
  6698     14A3  0875               	movf	__div_to_l_@f2+1,w
  6699     14A4  0271               	subwf	__div_to_l_@f1+1,w
  6700     14A5  1D03               	skipz
  6701     14A6  2CA9               	goto	u569_25
  6702     14A7  0874               	movf	__div_to_l_@f2,w
  6703     14A8  0270               	subwf	__div_to_l_@f1,w
  6704     14A9                     u569_25:
  6705     14A9  1C03               	skipc
  6706     14AA  2CBA               	goto	i1l3991
  6707     14AB  0874               	movf	__div_to_l_@f2,w
  6708     14AC  02F0               	subwf	__div_to_l_@f1,f
  6709     14AD  0875               	movf	__div_to_l_@f2+1,w
  6710     14AE  1C03               	skipc
  6711     14AF  0F75               	incfsz	__div_to_l_@f2+1,w
  6712     14B0  02F1               	subwf	__div_to_l_@f1+1,f
  6713     14B1  0876               	movf	__div_to_l_@f2+2,w
  6714     14B2  1C03               	skipc
  6715     14B3  0F76               	incfsz	__div_to_l_@f2+2,w
  6716     14B4  02F2               	subwf	__div_to_l_@f1+2,f
  6717     14B5  0877               	movf	__div_to_l_@f2+3,w
  6718     14B6  1C03               	skipc
  6719     14B7  0F77               	incfsz	__div_to_l_@f2+3,w
  6720     14B8  02F3               	subwf	__div_to_l_@f1+3,f
  6721     14B9  1420               	bsf	__div_to_l_@quot,0
  6722     14BA                     i1l3991:
  6723     14BA  3001               	movlw	1
  6724     14BB  00F8               	movwf	??__div_to_l_
  6725     14BC                     u570_25:
  6726     14BC  1003               	clrc
  6727     14BD  0DF0               	rlf	__div_to_l_@f1,f
  6728     14BE  0DF1               	rlf	__div_to_l_@f1+1,f
  6729     14BF  0DF2               	rlf	__div_to_l_@f1+2,f
  6730     14C0  0DF3               	rlf	__div_to_l_@f1+3,f
  6731     14C1  0BF8               	decfsz	??__div_to_l_,f
  6732     14C2  2CBC               	goto	u570_25
  6733     14C3  3001               	movlw	1
  6734     14C4  02A4               	subwf	__div_to_l_@cntr,f
  6735     14C5  1D03               	btfss	3,2
  6736     14C6  2C92               	goto	i1l3983
  6737     14C7  1FA5               	btfss	__div_to_l_@exp1,7
  6738     14C8  2CDE               	goto	i1l4005
  6739     14C9  0825               	movf	__div_to_l_@exp1,w
  6740     14CA  3A80               	xorlw	128
  6741     14CB  3E9F               	addlw	159
  6742     14CC  1C03               	btfss	3,0
  6743     14CD  2C5F               	goto	i1l3965
  6744     14CE                     i1l4001:
  6745     14CE  3001               	movlw	1
  6746     14CF                     u574_25:
  6747     14CF  1003               	clrc
  6748     14D0  0CA3               	rrf	__div_to_l_@quot+3,f
  6749     14D1  0CA2               	rrf	__div_to_l_@quot+2,f
  6750     14D2  0CA1               	rrf	__div_to_l_@quot+1,f
  6751     14D3  0CA0               	rrf	__div_to_l_@quot,f
  6752     14D4  3EFF               	addlw	-1
  6753     14D5  1D03               	skipz
  6754     14D6  2CCF               	goto	u574_25
  6755     14D7  3001               	movlw	1
  6756     14D8  00FF               	movwf	127
  6757     14D9  087F               	movf	127,w
  6758     14DA  07A5               	addwf	__div_to_l_@exp1,f
  6759     14DB  1903               	btfsc	3,2
  6760     14DC  2CF1               	goto	i1l4013
  6761     14DD  2CCE               	goto	i1l4001
  6762     14DE                     i1l4005:
  6763     14DE  3020               	movlw	32
  6764     14DF  0225               	subwf	__div_to_l_@exp1,w
  6765     14E0  1803               	btfsc	3,0
  6766     14E1  2C5F               	goto	i1l3965
  6767     14E2                     i1l764:
  6768     14E2  0825               	movf	__div_to_l_@exp1,w
  6769     14E3  1903               	btfsc	3,2
  6770     14E4  2CF1               	goto	i1l4013
  6771     14E5  3001               	movlw	1
  6772     14E6  00F8               	movwf	??__div_to_l_
  6773     14E7                     u577_25:
  6774     14E7  1003               	clrc
  6775     14E8  0DA0               	rlf	__div_to_l_@quot,f
  6776     14E9  0DA1               	rlf	__div_to_l_@quot+1,f
  6777     14EA  0DA2               	rlf	__div_to_l_@quot+2,f
  6778     14EB  0DA3               	rlf	__div_to_l_@quot+3,f
  6779     14EC  0BF8               	decfsz	??__div_to_l_,f
  6780     14ED  2CE7               	goto	u577_25
  6781     14EE  3001               	movlw	1
  6782     14EF  02A5               	subwf	__div_to_l_@exp1,f
  6783     14F0  2CE2               	goto	i1l764
  6784     14F1                     i1l4013:
  6785     14F1  0823               	movf	__div_to_l_@quot+3,w
  6786     14F2  00F3               	movwf	?__div_to_l_+3
  6787     14F3  0822               	movf	__div_to_l_@quot+2,w
  6788     14F4  00F2               	movwf	?__div_to_l_+2
  6789     14F5  0821               	movf	__div_to_l_@quot+1,w
  6790     14F6  00F1               	movwf	?__div_to_l_+1
  6791     14F7  0820               	movf	__div_to_l_@quot,w
  6792     14F8  00F0               	movwf	?__div_to_l_
  6793     14F9  0008               	return
  6794     14FA                     __end_of__div_to_l_:
  6795                           
  6796                           	psect	text23
  6797     1ACE                     __ptext23:	
  6798 ;; *************** function ___wmul *****************
  6799 ;; Defined at:
  6800 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul16.c"
  6801 ;; Parameters:    Size  Location     Type
  6802 ;;  multiplier      2    0[COMMON] unsigned int 
  6803 ;;  multiplicand    2    2[COMMON] unsigned int 
  6804 ;; Auto vars:     Size  Location     Type
  6805 ;;  product         2    4[COMMON] unsigned int 
  6806 ;; Return value:  Size  Location     Type
  6807 ;;                  2    0[COMMON] unsigned int 
  6808 ;; Registers used:
  6809 ;;		wreg, status,2, status,0
  6810 ;; Tracked objects:
  6811 ;;		On entry : 300/100
  6812 ;;		On exit  : 300/100
  6813 ;;		Unchanged: 300/0
  6814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6815 ;;      Params:         4       0       0       0       0
  6816 ;;      Locals:         2       0       0       0       0
  6817 ;;      Temps:          0       0       0       0       0
  6818 ;;      Totals:         6       0       0       0       0
  6819 ;;Total ram usage:        6 bytes
  6820 ;; Hardware stack levels used: 1
  6821 ;; This function calls:
  6822 ;;		Nothing
  6823 ;; This function is called by:
  6824 ;;		_sprintf
  6825 ;; This function uses a non-reentrant model
  6826 ;;
  6827                           
  6828     1ACE                     ___wmul:	
  6829                           ;psect for function ___wmul
  6830                           
  6831                           
  6832                           ;incstack = 0
  6833                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6834     1ACE  01F4               	clrf	___wmul@product
  6835     1ACF  01F5               	clrf	___wmul@product+1
  6836     1AD0                     i1l4019:
  6837     1AD0  1C70               	btfss	___wmul@multiplier,0
  6838     1AD1  2AD8               	goto	i1l547
  6839     1AD2  0872               	movf	___wmul@multiplicand,w
  6840     1AD3  07F4               	addwf	___wmul@product,f
  6841     1AD4  1803               	skipnc
  6842     1AD5  0AF5               	incf	___wmul@product+1,f
  6843     1AD6  0873               	movf	___wmul@multiplicand+1,w
  6844     1AD7  07F5               	addwf	___wmul@product+1,f
  6845     1AD8                     i1l547:
  6846     1AD8  3001               	movlw	1
  6847     1AD9                     u580_25:
  6848     1AD9  1003               	clrc
  6849     1ADA  0DF2               	rlf	___wmul@multiplicand,f
  6850     1ADB  0DF3               	rlf	___wmul@multiplicand+1,f
  6851     1ADC  3EFF               	addlw	-1
  6852     1ADD  1D03               	skipz
  6853     1ADE  2AD9               	goto	u580_25
  6854     1ADF  3001               	movlw	1
  6855     1AE0                     u581_25:
  6856     1AE0  1003               	clrc
  6857     1AE1  0CF1               	rrf	___wmul@multiplier+1,f
  6858     1AE2  0CF0               	rrf	___wmul@multiplier,f
  6859     1AE3  3EFF               	addlw	-1
  6860     1AE4  1D03               	skipz
  6861     1AE5  2AE0               	goto	u581_25
  6862     1AE6  0870               	movf	___wmul@multiplier,w
  6863     1AE7  0471               	iorwf	___wmul@multiplier+1,w
  6864     1AE8  1D03               	btfss	3,2
  6865     1AE9  2AD0               	goto	i1l4019
  6866     1AEA  0875               	movf	___wmul@product+1,w
  6867     1AEB  00F1               	movwf	?___wmul+1
  6868     1AEC  0874               	movf	___wmul@product,w
  6869     1AED  00F0               	movwf	?___wmul
  6870     1AEE  0008               	return
  6871     1AEF                     __end_of___wmul:
  6872                           
  6873                           	psect	text24
  6874     1E41                     __ptext24:	
  6875 ;; *************** function ___llmod *****************
  6876 ;; Defined at:
  6877 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\llmod.c"
  6878 ;; Parameters:    Size  Location     Type
  6879 ;;  divisor         4    0[COMMON] unsigned long 
  6880 ;;  dividend        4    4[COMMON] unsigned long 
  6881 ;; Auto vars:     Size  Location     Type
  6882 ;;  counter         1    9[COMMON] unsigned char 
  6883 ;; Return value:  Size  Location     Type
  6884 ;;                  4    0[COMMON] unsigned long 
  6885 ;; Registers used:
  6886 ;;		wreg, status,2, status,0, btemp+1
  6887 ;; Tracked objects:
  6888 ;;		On entry : 300/100
  6889 ;;		On exit  : 300/100
  6890 ;;		Unchanged: 300/0
  6891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6892 ;;      Params:         8       0       0       0       0
  6893 ;;      Locals:         1       0       0       0       0
  6894 ;;      Temps:          1       0       0       0       0
  6895 ;;      Totals:        10       0       0       0       0
  6896 ;;Total ram usage:       10 bytes
  6897 ;; Hardware stack levels used: 1
  6898 ;; This function calls:
  6899 ;;		Nothing
  6900 ;; This function is called by:
  6901 ;;		_sprintf
  6902 ;; This function uses a non-reentrant model
  6903 ;;
  6904                           
  6905     1E41                     ___llmod:	
  6906                           ;psect for function ___llmod
  6907                           
  6908                           
  6909                           ;incstack = 0
  6910                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+1]
  6911     1E41  0873               	movf	___llmod@divisor+3,w
  6912     1E42  0472               	iorwf	___llmod@divisor+2,w
  6913     1E43  0471               	iorwf	___llmod@divisor+1,w
  6914     1E44  0470               	iorwf	___llmod@divisor,w
  6915     1E45  1903               	skipnz
  6916     1E46  2E84               	goto	i1l4261
  6917     1E47  01F9               	clrf	___llmod@counter
  6918     1E48  0AF9               	incf	___llmod@counter,f
  6919     1E49                     i1l4251:
  6920     1E49  1BF3               	btfsc	___llmod@divisor+3,7
  6921     1E4A  2E59               	goto	i1l4253
  6922     1E4B  3001               	movlw	1
  6923     1E4C  00F8               	movwf	??___llmod
  6924     1E4D                     u635_25:
  6925     1E4D  1003               	clrc
  6926     1E4E  0DF0               	rlf	___llmod@divisor,f
  6927     1E4F  0DF1               	rlf	___llmod@divisor+1,f
  6928     1E50  0DF2               	rlf	___llmod@divisor+2,f
  6929     1E51  0DF3               	rlf	___llmod@divisor+3,f
  6930     1E52  0BF8               	decfsz	??___llmod,f
  6931     1E53  2E4D               	goto	u635_25
  6932     1E54  3001               	movlw	1
  6933     1E55  00FF               	movwf	127
  6934     1E56  087F               	movf	127,w
  6935     1E57  07F9               	addwf	___llmod@counter,f
  6936     1E58  2E49               	goto	i1l4251
  6937     1E59                     i1l4253:
  6938     1E59  0873               	movf	___llmod@divisor+3,w
  6939     1E5A  0277               	subwf	___llmod@dividend+3,w
  6940     1E5B  1D03               	skipz
  6941     1E5C  2E67               	goto	u637_25
  6942     1E5D  0872               	movf	___llmod@divisor+2,w
  6943     1E5E  0276               	subwf	___llmod@dividend+2,w
  6944     1E5F  1D03               	skipz
  6945     1E60  2E67               	goto	u637_25
  6946     1E61  0871               	movf	___llmod@divisor+1,w
  6947     1E62  0275               	subwf	___llmod@dividend+1,w
  6948     1E63  1D03               	skipz
  6949     1E64  2E67               	goto	u637_25
  6950     1E65  0870               	movf	___llmod@divisor,w
  6951     1E66  0274               	subwf	___llmod@dividend,w
  6952     1E67                     u637_25:
  6953     1E67  1C03               	skipc
  6954     1E68  2E77               	goto	i1l4257
  6955     1E69  0870               	movf	___llmod@divisor,w
  6956     1E6A  02F4               	subwf	___llmod@dividend,f
  6957     1E6B  0871               	movf	___llmod@divisor+1,w
  6958     1E6C  1C03               	skipc
  6959     1E6D  0F71               	incfsz	___llmod@divisor+1,w
  6960     1E6E  02F5               	subwf	___llmod@dividend+1,f
  6961     1E6F  0872               	movf	___llmod@divisor+2,w
  6962     1E70  1C03               	skipc
  6963     1E71  0F72               	incfsz	___llmod@divisor+2,w
  6964     1E72  02F6               	subwf	___llmod@dividend+2,f
  6965     1E73  0873               	movf	___llmod@divisor+3,w
  6966     1E74  1C03               	skipc
  6967     1E75  0F73               	incfsz	___llmod@divisor+3,w
  6968     1E76  02F7               	subwf	___llmod@dividend+3,f
  6969     1E77                     i1l4257:
  6970     1E77  3001               	movlw	1
  6971     1E78                     u638_25:
  6972     1E78  1003               	clrc
  6973     1E79  0CF3               	rrf	___llmod@divisor+3,f
  6974     1E7A  0CF2               	rrf	___llmod@divisor+2,f
  6975     1E7B  0CF1               	rrf	___llmod@divisor+1,f
  6976     1E7C  0CF0               	rrf	___llmod@divisor,f
  6977     1E7D  3EFF               	addlw	-1
  6978     1E7E  1D03               	skipz
  6979     1E7F  2E78               	goto	u638_25
  6980     1E80  3001               	movlw	1
  6981     1E81  02F9               	subwf	___llmod@counter,f
  6982     1E82  1D03               	btfss	3,2
  6983     1E83  2E59               	goto	i1l4253
  6984     1E84                     i1l4261:
  6985     1E84  0877               	movf	___llmod@dividend+3,w
  6986     1E85  00F3               	movwf	?___llmod+3
  6987     1E86  0876               	movf	___llmod@dividend+2,w
  6988     1E87  00F2               	movwf	?___llmod+2
  6989     1E88  0875               	movf	___llmod@dividend+1,w
  6990     1E89  00F1               	movwf	?___llmod+1
  6991     1E8A  0874               	movf	___llmod@dividend,w
  6992     1E8B  00F0               	movwf	?___llmod
  6993     1E8C  0008               	return
  6994     1E8D                     __end_of___llmod:
  6995                           
  6996                           	psect	text25
  6997     1F3D                     __ptext25:	
  6998 ;; *************** function ___lldiv *****************
  6999 ;; Defined at:
  7000 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\__lldiv.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;  divisor         4    0[COMMON] unsigned long 
  7003 ;;  dividend        4    4[COMMON] unsigned long 
  7004 ;; Auto vars:     Size  Location     Type
  7005 ;;  quotient        4    9[COMMON] unsigned long 
  7006 ;;  counter         1   13[COMMON] unsigned char 
  7007 ;; Return value:  Size  Location     Type
  7008 ;;                  4    0[COMMON] unsigned long 
  7009 ;; Registers used:
  7010 ;;		wreg, status,2, status,0, btemp+1
  7011 ;; Tracked objects:
  7012 ;;		On entry : 300/100
  7013 ;;		On exit  : 300/100
  7014 ;;		Unchanged: 300/0
  7015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7016 ;;      Params:         8       0       0       0       0
  7017 ;;      Locals:         5       0       0       0       0
  7018 ;;      Temps:          1       0       0       0       0
  7019 ;;      Totals:        14       0       0       0       0
  7020 ;;Total ram usage:       14 bytes
  7021 ;; Hardware stack levels used: 1
  7022 ;; This function calls:
  7023 ;;		Nothing
  7024 ;; This function is called by:
  7025 ;;		_sprintf
  7026 ;; This function uses a non-reentrant model
  7027 ;;
  7028                           
  7029     1F3D                     ___lldiv:	
  7030                           ;psect for function ___lldiv
  7031                           
  7032                           
  7033                           ;incstack = 0
  7034                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+1]
  7035     1F3D  3000               	movlw	0
  7036     1F3E  00FC               	movwf	___lldiv@quotient+3
  7037     1F3F  3000               	movlw	0
  7038     1F40  00FB               	movwf	___lldiv@quotient+2
  7039     1F41  3000               	movlw	0
  7040     1F42  00FA               	movwf	___lldiv@quotient+1
  7041     1F43  3000               	movlw	0
  7042     1F44  00F9               	movwf	___lldiv@quotient
  7043     1F45  0873               	movf	___lldiv@divisor+3,w
  7044     1F46  0472               	iorwf	___lldiv@divisor+2,w
  7045     1F47  0471               	iorwf	___lldiv@divisor+1,w
  7046     1F48  0470               	iorwf	___lldiv@divisor,w
  7047     1F49  1903               	skipnz
  7048     1F4A  2F92               	goto	i1l4053
  7049     1F4B  01FD               	clrf	___lldiv@counter
  7050     1F4C  0AFD               	incf	___lldiv@counter,f
  7051     1F4D                     i1l4039:
  7052     1F4D  1BF3               	btfsc	___lldiv@divisor+3,7
  7053     1F4E  2F5D               	goto	i1l4041
  7054     1F4F  3001               	movlw	1
  7055     1F50  00F8               	movwf	??___lldiv
  7056     1F51                     u584_25:
  7057     1F51  1003               	clrc
  7058     1F52  0DF0               	rlf	___lldiv@divisor,f
  7059     1F53  0DF1               	rlf	___lldiv@divisor+1,f
  7060     1F54  0DF2               	rlf	___lldiv@divisor+2,f
  7061     1F55  0DF3               	rlf	___lldiv@divisor+3,f
  7062     1F56  0BF8               	decfsz	??___lldiv,f
  7063     1F57  2F51               	goto	u584_25
  7064     1F58  3001               	movlw	1
  7065     1F59  00FF               	movwf	127
  7066     1F5A  087F               	movf	127,w
  7067     1F5B  07FD               	addwf	___lldiv@counter,f
  7068     1F5C  2F4D               	goto	i1l4039
  7069     1F5D                     i1l4041:
  7070     1F5D  3001               	movlw	1
  7071     1F5E  00F8               	movwf	??___lldiv
  7072     1F5F                     u586_25:
  7073     1F5F  1003               	clrc
  7074     1F60  0DF9               	rlf	___lldiv@quotient,f
  7075     1F61  0DFA               	rlf	___lldiv@quotient+1,f
  7076     1F62  0DFB               	rlf	___lldiv@quotient+2,f
  7077     1F63  0DFC               	rlf	___lldiv@quotient+3,f
  7078     1F64  0BF8               	decfsz	??___lldiv,f
  7079     1F65  2F5F               	goto	u586_25
  7080     1F66  0873               	movf	___lldiv@divisor+3,w
  7081     1F67  0277               	subwf	___lldiv@dividend+3,w
  7082     1F68  1D03               	skipz
  7083     1F69  2F74               	goto	u587_25
  7084     1F6A  0872               	movf	___lldiv@divisor+2,w
  7085     1F6B  0276               	subwf	___lldiv@dividend+2,w
  7086     1F6C  1D03               	skipz
  7087     1F6D  2F74               	goto	u587_25
  7088     1F6E  0871               	movf	___lldiv@divisor+1,w
  7089     1F6F  0275               	subwf	___lldiv@dividend+1,w
  7090     1F70  1D03               	skipz
  7091     1F71  2F74               	goto	u587_25
  7092     1F72  0870               	movf	___lldiv@divisor,w
  7093     1F73  0274               	subwf	___lldiv@dividend,w
  7094     1F74                     u587_25:
  7095     1F74  1C03               	skipc
  7096     1F75  2F85               	goto	i1l4049
  7097     1F76  0870               	movf	___lldiv@divisor,w
  7098     1F77  02F4               	subwf	___lldiv@dividend,f
  7099     1F78  0871               	movf	___lldiv@divisor+1,w
  7100     1F79  1C03               	skipc
  7101     1F7A  0F71               	incfsz	___lldiv@divisor+1,w
  7102     1F7B  02F5               	subwf	___lldiv@dividend+1,f
  7103     1F7C  0872               	movf	___lldiv@divisor+2,w
  7104     1F7D  1C03               	skipc
  7105     1F7E  0F72               	incfsz	___lldiv@divisor+2,w
  7106     1F7F  02F6               	subwf	___lldiv@dividend+2,f
  7107     1F80  0873               	movf	___lldiv@divisor+3,w
  7108     1F81  1C03               	skipc
  7109     1F82  0F73               	incfsz	___lldiv@divisor+3,w
  7110     1F83  02F7               	subwf	___lldiv@dividend+3,f
  7111     1F84  1479               	bsf	___lldiv@quotient,0
  7112     1F85                     i1l4049:
  7113     1F85  3001               	movlw	1
  7114     1F86                     u588_25:
  7115     1F86  1003               	clrc
  7116     1F87  0CF3               	rrf	___lldiv@divisor+3,f
  7117     1F88  0CF2               	rrf	___lldiv@divisor+2,f
  7118     1F89  0CF1               	rrf	___lldiv@divisor+1,f
  7119     1F8A  0CF0               	rrf	___lldiv@divisor,f
  7120     1F8B  3EFF               	addlw	-1
  7121     1F8C  1D03               	skipz
  7122     1F8D  2F86               	goto	u588_25
  7123     1F8E  3001               	movlw	1
  7124     1F8F  02FD               	subwf	___lldiv@counter,f
  7125     1F90  1D03               	btfss	3,2
  7126     1F91  2F5D               	goto	i1l4041
  7127     1F92                     i1l4053:
  7128     1F92  087C               	movf	___lldiv@quotient+3,w
  7129     1F93  00F3               	movwf	?___lldiv+3
  7130     1F94  087B               	movf	___lldiv@quotient+2,w
  7131     1F95  00F2               	movwf	?___lldiv+2
  7132     1F96  087A               	movf	___lldiv@quotient+1,w
  7133     1F97  00F1               	movwf	?___lldiv+1
  7134     1F98  0879               	movf	___lldiv@quotient,w
  7135     1F99  00F0               	movwf	?___lldiv
  7136     1F9A  0008               	return
  7137     1F9B                     __end_of___lldiv:
  7138                           
  7139                           	psect	text26
  7140     10FF                     __ptext26:	
  7141 ;; *************** function ___fltol *****************
  7142 ;; Defined at:
  7143 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\fltol.c"
  7144 ;; Parameters:    Size  Location     Type
  7145 ;;  f1              4   45[BANK0 ] unsigned long 
  7146 ;; Auto vars:     Size  Location     Type
  7147 ;;  exp1            1   54[BANK0 ] unsigned char 
  7148 ;;  sign1           1   53[BANK0 ] unsigned char 
  7149 ;; Return value:  Size  Location     Type
  7150 ;;                  4   45[BANK0 ] long 
  7151 ;; Registers used:
  7152 ;;		wreg, status,2, status,0, btemp+1
  7153 ;; Tracked objects:
  7154 ;;		On entry : 300/0
  7155 ;;		On exit  : 300/0
  7156 ;;		Unchanged: 0/0
  7157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7158 ;;      Params:         0       4       0       0       0
  7159 ;;      Locals:         0       2       0       0       0
  7160 ;;      Temps:          0       4       0       0       0
  7161 ;;      Totals:         0      10       0       0       0
  7162 ;;Total ram usage:       10 bytes
  7163 ;; Hardware stack levels used: 1
  7164 ;; This function calls:
  7165 ;;		Nothing
  7166 ;; This function is called by:
  7167 ;;		_sprintf
  7168 ;; This function uses a non-reentrant model
  7169 ;;
  7170                           
  7171     10FF                     ___fltol:	
  7172                           ;psect for function ___fltol
  7173                           
  7174                           
  7175                           ;incstack = 0
  7176                           ; Regs used in ___fltol: [wreg+status,2+status,0+btemp+1]
  7177     10FF  1003               	clrc
  7178     1100  0D4F               	rlf	___fltol@f1+2,w
  7179     1101  0D50               	rlf	___fltol@f1+3,w
  7180     1102  00D6               	movwf	___fltol@exp1
  7181     1103  0856               	movf	___fltol@exp1,w
  7182     1104  1D03               	btfss	3,2
  7183     1105  290F               	goto	i1l4103
  7184     1106                     i1l4099:
  7185     1106  3000               	movlw	0
  7186     1107  00D0               	movwf	?___fltol+3
  7187     1108  3000               	movlw	0
  7188     1109  00CF               	movwf	?___fltol+2
  7189     110A  3000               	movlw	0
  7190     110B  00CE               	movwf	?___fltol+1
  7191     110C  3000               	movlw	0
  7192     110D  00CD               	movwf	?___fltol
  7193     110E  0008               	return
  7194     110F                     i1l4103:
  7195     110F  084D               	movf	___fltol@f1,w
  7196     1110  00D1               	movwf	??___fltol
  7197     1111  084E               	movf	___fltol@f1+1,w
  7198     1112  00D2               	movwf	??___fltol+1
  7199     1113  084F               	movf	___fltol@f1+2,w
  7200     1114  00D3               	movwf	??___fltol+2
  7201     1115  0850               	movf	___fltol@f1+3,w
  7202     1116  00D4               	movwf	??___fltol+3
  7203     1117  301F               	movlw	31
  7204     1118                     u602_25:
  7205     1118  1003               	clrc
  7206     1119  0CD4               	rrf	??___fltol+3,f
  7207     111A  0CD3               	rrf	??___fltol+2,f
  7208     111B  0CD2               	rrf	??___fltol+1,f
  7209     111C  0CD1               	rrf	??___fltol,f
  7210     111D  3EFF               	addlw	-1
  7211     111E  1D03               	skipz
  7212     111F  2918               	goto	u602_25
  7213     1120  0851               	movf	??___fltol,w
  7214     1121  00D5               	movwf	___fltol@sign1
  7215     1122  17CF               	bsf	___fltol@f1+2,7
  7216     1123  30FF               	movlw	255
  7217     1124  05CD               	andwf	___fltol@f1,f
  7218     1125  30FF               	movlw	255
  7219     1126  05CE               	andwf	___fltol@f1+1,f
  7220     1127  30FF               	movlw	255
  7221     1128  05CF               	andwf	___fltol@f1+2,f
  7222     1129  3000               	movlw	0
  7223     112A  05D0               	andwf	___fltol@f1+3,f
  7224     112B  3096               	movlw	150
  7225     112C  02D6               	subwf	___fltol@exp1,f
  7226     112D  1FD6               	btfss	___fltol@exp1,7
  7227     112E  2944               	goto	i1l4123
  7228     112F  0856               	movf	___fltol@exp1,w
  7229     1130  3A80               	xorlw	128
  7230     1131  3E97               	addlw	151
  7231     1132  1C03               	btfss	3,0
  7232     1133  2906               	goto	i1l4099
  7233     1134                     i1l4119:
  7234     1134  3001               	movlw	1
  7235     1135                     u605_25:
  7236     1135  1003               	clrc
  7237     1136  0CD0               	rrf	___fltol@f1+3,f
  7238     1137  0CCF               	rrf	___fltol@f1+2,f
  7239     1138  0CCE               	rrf	___fltol@f1+1,f
  7240     1139  0CCD               	rrf	___fltol@f1,f
  7241     113A  3EFF               	addlw	-1
  7242     113B  1D03               	skipz
  7243     113C  2935               	goto	u605_25
  7244     113D  3001               	movlw	1
  7245     113E  00FF               	movwf	127
  7246     113F  087F               	movf	127,w
  7247     1140  07D6               	addwf	___fltol@exp1,f
  7248     1141  1903               	btfsc	3,2
  7249     1142  2957               	goto	i1l4131
  7250     1143  2934               	goto	i1l4119
  7251     1144                     i1l4123:
  7252     1144  3020               	movlw	32
  7253     1145  0256               	subwf	___fltol@exp1,w
  7254     1146  1803               	btfsc	3,0
  7255     1147  2906               	goto	i1l4099
  7256     1148                     i1l812:
  7257     1148  0856               	movf	___fltol@exp1,w
  7258     1149  1903               	btfsc	3,2
  7259     114A  2957               	goto	i1l4131
  7260     114B  3001               	movlw	1
  7261     114C  00D1               	movwf	??___fltol
  7262     114D                     u608_25:
  7263     114D  1003               	clrc
  7264     114E  0DCD               	rlf	___fltol@f1,f
  7265     114F  0DCE               	rlf	___fltol@f1+1,f
  7266     1150  0DCF               	rlf	___fltol@f1+2,f
  7267     1151  0DD0               	rlf	___fltol@f1+3,f
  7268     1152  0BD1               	decfsz	??___fltol,f
  7269     1153  294D               	goto	u608_25
  7270     1154  3001               	movlw	1
  7271     1155  02D6               	subwf	___fltol@exp1,f
  7272     1156  2948               	goto	i1l812
  7273     1157                     i1l4131:
  7274     1157  0855               	movf	___fltol@sign1,w
  7275     1158  1903               	btfsc	3,2
  7276     1159  0008               	return
  7277     115A  09CD               	comf	___fltol@f1,f
  7278     115B  09CE               	comf	___fltol@f1+1,f
  7279     115C  09CF               	comf	___fltol@f1+2,f
  7280     115D  09D0               	comf	___fltol@f1+3,f
  7281     115E  0ACD               	incf	___fltol@f1,f
  7282     115F  1903               	skipnz
  7283     1160  0ACE               	incf	___fltol@f1+1,f
  7284     1161  1903               	skipnz
  7285     1162  0ACF               	incf	___fltol@f1+2,f
  7286     1163  1903               	skipnz
  7287     1164  0AD0               	incf	___fltol@f1+3,f
  7288     1165  0008               	return
  7289     1166                     __end_of___fltol:
  7290                           
  7291                           	psect	text27
  7292     1976                     __ptext27:	
  7293 ;; *************** function ___flneg *****************
  7294 ;; Defined at:
  7295 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\flneg.c"
  7296 ;; Parameters:    Size  Location     Type
  7297 ;;  f1              4    0[COMMON] long 
  7298 ;; Auto vars:     Size  Location     Type
  7299 ;;		None
  7300 ;; Return value:  Size  Location     Type
  7301 ;;                  4    0[COMMON] long 
  7302 ;; Registers used:
  7303 ;;		wreg
  7304 ;; Tracked objects:
  7305 ;;		On entry : 300/100
  7306 ;;		On exit  : 300/100
  7307 ;;		Unchanged: 300/0
  7308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7309 ;;      Params:         4       0       0       0       0
  7310 ;;      Locals:         0       0       0       0       0
  7311 ;;      Temps:          0       0       0       0       0
  7312 ;;      Totals:         4       0       0       0       0
  7313 ;;Total ram usage:        4 bytes
  7314 ;; Hardware stack levels used: 1
  7315 ;; This function calls:
  7316 ;;		Nothing
  7317 ;; This function is called by:
  7318 ;;		_sprintf
  7319 ;; This function uses a non-reentrant model
  7320 ;;
  7321                           
  7322     1976                     ___flneg:	
  7323                           ;psect for function ___flneg
  7324                           
  7325                           
  7326                           ;incstack = 0
  7327                           ; Regs used in ___flneg: [wreg]
  7328     1976  0873               	movf	___flneg@f1+3,w
  7329     1977  0472               	iorwf	___flneg@f1+2,w
  7330     1978  0471               	iorwf	___flneg@f1+1,w
  7331     1979  0470               	iorwf	___flneg@f1,w
  7332     197A  1903               	skipnz
  7333     197B  0008               	return
  7334     197C  3080               	movlw	128
  7335     197D  06F3               	xorwf	___flneg@f1+3,f
  7336     197E  0008               	return
  7337     197F                     __end_of___flneg:
  7338                           
  7339                           	psect	text28
  7340     1323                     __ptext28:	
  7341 ;; *************** function ___flge *****************
  7342 ;; Defined at:
  7343 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\flge.c"
  7344 ;; Parameters:    Size  Location     Type
  7345 ;;  ff1             4    0[COMMON] long 
  7346 ;;  ff2             4    4[COMMON] long 
  7347 ;; Auto vars:     Size  Location     Type
  7348 ;;		None
  7349 ;; Return value:  Size  Location     Type
  7350 ;;		None               void
  7351 ;; Registers used:
  7352 ;;		wreg, status,2, status,0
  7353 ;; Tracked objects:
  7354 ;;		On entry : 300/100
  7355 ;;		On exit  : 300/100
  7356 ;;		Unchanged: 300/0
  7357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7358 ;;      Params:         8       0       0       0       0
  7359 ;;      Locals:         0       0       0       0       0
  7360 ;;      Temps:          4       0       0       0       0
  7361 ;;      Totals:        12       0       0       0       0
  7362 ;;Total ram usage:       12 bytes
  7363 ;; Hardware stack levels used: 1
  7364 ;; This function calls:
  7365 ;;		Nothing
  7366 ;; This function is called by:
  7367 ;;		_sprintf
  7368 ;; This function uses a non-reentrant model
  7369 ;;
  7370                           
  7371     1323                     ___flge:	
  7372                           ;psect for function ___flge
  7373                           
  7374                           
  7375                           ;incstack = 0
  7376                           ; Regs used in ___flge: [wreg+status,2+status,0]
  7377     1323  3000               	movlw	0
  7378     1324  0570               	andwf	___flge@ff1,w
  7379     1325  00F8               	movwf	??___flge
  7380     1326  3000               	movlw	0
  7381     1327  0571               	andwf	___flge@ff1+1,w
  7382     1328  00F9               	movwf	??___flge+1
  7383     1329  3080               	movlw	128
  7384     132A  0572               	andwf	___flge@ff1+2,w
  7385     132B  00FA               	movwf	??___flge+2
  7386     132C  307F               	movlw	127
  7387     132D  0573               	andwf	___flge@ff1+3,w
  7388     132E  00FB               	movwf	??___flge+3
  7389     132F  087B               	movf	??___flge+3,w
  7390     1330  047A               	iorwf	??___flge+2,w
  7391     1331  0479               	iorwf	??___flge+1,w
  7392     1332  0478               	iorwf	??___flge,w
  7393     1333  1D03               	skipz
  7394     1334  2B3D               	goto	i1l774
  7395     1335  3000               	movlw	0
  7396     1336  00F3               	movwf	___flge@ff1+3
  7397     1337  3000               	movlw	0
  7398     1338  00F2               	movwf	___flge@ff1+2
  7399     1339  3000               	movlw	0
  7400     133A  00F1               	movwf	___flge@ff1+1
  7401     133B  3000               	movlw	0
  7402     133C  00F0               	movwf	___flge@ff1
  7403     133D                     i1l774:
  7404     133D  3000               	movlw	0
  7405     133E  0574               	andwf	___flge@ff2,w
  7406     133F  00F8               	movwf	??___flge
  7407     1340  3000               	movlw	0
  7408     1341  0575               	andwf	___flge@ff2+1,w
  7409     1342  00F9               	movwf	??___flge+1
  7410     1343  3080               	movlw	128
  7411     1344  0576               	andwf	___flge@ff2+2,w
  7412     1345  00FA               	movwf	??___flge+2
  7413     1346  307F               	movlw	127
  7414     1347  0577               	andwf	___flge@ff2+3,w
  7415     1348  00FB               	movwf	??___flge+3
  7416     1349  087B               	movf	??___flge+3,w
  7417     134A  047A               	iorwf	??___flge+2,w
  7418     134B  0479               	iorwf	??___flge+1,w
  7419     134C  0478               	iorwf	??___flge,w
  7420     134D  1D03               	skipz
  7421     134E  2B57               	goto	i1l4075
  7422     134F  3000               	movlw	0
  7423     1350  00F7               	movwf	___flge@ff2+3
  7424     1351  3000               	movlw	0
  7425     1352  00F6               	movwf	___flge@ff2+2
  7426     1353  3000               	movlw	0
  7427     1354  00F5               	movwf	___flge@ff2+1
  7428     1355  3000               	movlw	0
  7429     1356  00F4               	movwf	___flge@ff2
  7430     1357                     i1l4075:
  7431     1357  1FF3               	btfss	___flge@ff1+3,7
  7432     1358  2B7D               	goto	i1l4079
  7433     1359  3000               	movlw	0
  7434     135A  00F8               	movwf	??___flge
  7435     135B  3000               	movlw	0
  7436     135C  00F9               	movwf	??___flge+1
  7437     135D  3000               	movlw	0
  7438     135E  00FA               	movwf	??___flge+2
  7439     135F  3080               	movlw	128
  7440     1360  00FB               	movwf	??___flge+3
  7441     1361  0870               	movf	___flge@ff1,w
  7442     1362  02F8               	subwf	??___flge,f
  7443     1363  0871               	movf	___flge@ff1+1,w
  7444     1364  1C03               	skipc
  7445     1365  0F71               	incfsz	___flge@ff1+1,w
  7446     1366  2B68               	goto	u596_21
  7447     1367  2B69               	goto	u596_22
  7448     1368                     u596_21:
  7449     1368  02F9               	subwf	??___flge+1,f
  7450     1369                     u596_22:
  7451     1369  0872               	movf	___flge@ff1+2,w
  7452     136A  1C03               	skipc
  7453     136B  0F72               	incfsz	___flge@ff1+2,w
  7454     136C  2B6E               	goto	u596_23
  7455     136D  2B6F               	goto	u596_24
  7456     136E                     u596_23:
  7457     136E  02FA               	subwf	??___flge+2,f
  7458     136F                     u596_24:
  7459     136F  0873               	movf	___flge@ff1+3,w
  7460     1370  1C03               	skipc
  7461     1371  0F73               	incfsz	___flge@ff1+3,w
  7462     1372  2B74               	goto	u596_25
  7463     1373  2B75               	goto	u596_26
  7464     1374                     u596_25:
  7465     1374  02FB               	subwf	??___flge+3,f
  7466     1375                     u596_26:
  7467     1375  087B               	movf	??___flge+3,w
  7468     1376  00F3               	movwf	___flge@ff1+3
  7469     1377  087A               	movf	??___flge+2,w
  7470     1378  00F2               	movwf	___flge@ff1+2
  7471     1379  0879               	movf	??___flge+1,w
  7472     137A  00F1               	movwf	___flge@ff1+1
  7473     137B  0878               	movf	??___flge,w
  7474     137C  00F0               	movwf	___flge@ff1
  7475     137D                     i1l4079:
  7476     137D  1FF7               	btfss	___flge@ff2+3,7
  7477     137E  2BA3               	goto	i1l777
  7478     137F  3000               	movlw	0
  7479     1380  00F8               	movwf	??___flge
  7480     1381  3000               	movlw	0
  7481     1382  00F9               	movwf	??___flge+1
  7482     1383  3000               	movlw	0
  7483     1384  00FA               	movwf	??___flge+2
  7484     1385  3080               	movlw	128
  7485     1386  00FB               	movwf	??___flge+3
  7486     1387  0874               	movf	___flge@ff2,w
  7487     1388  02F8               	subwf	??___flge,f
  7488     1389  0875               	movf	___flge@ff2+1,w
  7489     138A  1C03               	skipc
  7490     138B  0F75               	incfsz	___flge@ff2+1,w
  7491     138C  2B8E               	goto	u598_21
  7492     138D  2B8F               	goto	u598_22
  7493     138E                     u598_21:
  7494     138E  02F9               	subwf	??___flge+1,f
  7495     138F                     u598_22:
  7496     138F  0876               	movf	___flge@ff2+2,w
  7497     1390  1C03               	skipc
  7498     1391  0F76               	incfsz	___flge@ff2+2,w
  7499     1392  2B94               	goto	u598_23
  7500     1393  2B95               	goto	u598_24
  7501     1394                     u598_23:
  7502     1394  02FA               	subwf	??___flge+2,f
  7503     1395                     u598_24:
  7504     1395  0877               	movf	___flge@ff2+3,w
  7505     1396  1C03               	skipc
  7506     1397  0F77               	incfsz	___flge@ff2+3,w
  7507     1398  2B9A               	goto	u598_25
  7508     1399  2B9B               	goto	u598_26
  7509     139A                     u598_25:
  7510     139A  02FB               	subwf	??___flge+3,f
  7511     139B                     u598_26:
  7512     139B  087B               	movf	??___flge+3,w
  7513     139C  00F7               	movwf	___flge@ff2+3
  7514     139D  087A               	movf	??___flge+2,w
  7515     139E  00F6               	movwf	___flge@ff2+2
  7516     139F  0879               	movf	??___flge+1,w
  7517     13A0  00F5               	movwf	___flge@ff2+1
  7518     13A1  0878               	movf	??___flge,w
  7519     13A2  00F4               	movwf	___flge@ff2
  7520     13A3                     i1l777:
  7521     13A3  3080               	movlw	128
  7522     13A4  06F3               	xorwf	___flge@ff1+3,f
  7523     13A5  3080               	movlw	128
  7524     13A6  06F7               	xorwf	___flge@ff2+3,f
  7525     13A7  0877               	movf	___flge@ff2+3,w
  7526     13A8  0273               	subwf	___flge@ff1+3,w
  7527     13A9  1D03               	skipz
  7528     13AA  0008               	return
  7529     13AB  0876               	movf	___flge@ff2+2,w
  7530     13AC  0272               	subwf	___flge@ff1+2,w
  7531     13AD  1D03               	skipz
  7532     13AE  0008               	return
  7533     13AF  0875               	movf	___flge@ff2+1,w
  7534     13B0  0271               	subwf	___flge@ff1+1,w
  7535     13B1  1D03               	skipz
  7536     13B2  0008               	return
  7537     13B3  0874               	movf	___flge@ff2,w
  7538     13B4  0270               	subwf	___flge@ff1,w
  7539     13B5  0008               	return
  7540     13B6                     __end_of___flge:
  7541                           
  7542                           	psect	text29
  7543     1D65                     __ptext29:	
  7544 ;; *************** function ___fleq *****************
  7545 ;; Defined at:
  7546 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\fleq.c"
  7547 ;; Parameters:    Size  Location     Type
  7548 ;;  ff1             4    0[COMMON] long 
  7549 ;;  ff2             4    4[COMMON] long 
  7550 ;; Auto vars:     Size  Location     Type
  7551 ;;		None
  7552 ;; Return value:  Size  Location     Type
  7553 ;;		None               void
  7554 ;; Registers used:
  7555 ;;		wreg, status,2, status,0
  7556 ;; Tracked objects:
  7557 ;;		On entry : 300/100
  7558 ;;		On exit  : 300/100
  7559 ;;		Unchanged: 300/0
  7560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7561 ;;      Params:         8       0       0       0       0
  7562 ;;      Locals:         0       0       0       0       0
  7563 ;;      Temps:          4       0       0       0       0
  7564 ;;      Totals:        12       0       0       0       0
  7565 ;;Total ram usage:       12 bytes
  7566 ;; Hardware stack levels used: 1
  7567 ;; This function calls:
  7568 ;;		Nothing
  7569 ;; This function is called by:
  7570 ;;		_sprintf
  7571 ;; This function uses a non-reentrant model
  7572 ;;
  7573                           
  7574     1D65                     ___fleq:	
  7575                           ;psect for function ___fleq
  7576                           
  7577                           
  7578                           ;incstack = 0
  7579                           ; Regs used in ___fleq: [wreg+status,2+status,0]
  7580     1D65  3000               	movlw	0
  7581     1D66  0570               	andwf	___fleq@ff1,w
  7582     1D67  00F8               	movwf	??___fleq
  7583     1D68  3000               	movlw	0
  7584     1D69  0571               	andwf	___fleq@ff1+1,w
  7585     1D6A  00F9               	movwf	??___fleq+1
  7586     1D6B  3080               	movlw	128
  7587     1D6C  0572               	andwf	___fleq@ff1+2,w
  7588     1D6D  00FA               	movwf	??___fleq+2
  7589     1D6E  307F               	movlw	127
  7590     1D6F  0573               	andwf	___fleq@ff1+3,w
  7591     1D70  00FB               	movwf	??___fleq+3
  7592     1D71  087B               	movf	??___fleq+3,w
  7593     1D72  047A               	iorwf	??___fleq+2,w
  7594     1D73  0479               	iorwf	??___fleq+1,w
  7595     1D74  0478               	iorwf	??___fleq,w
  7596     1D75  1D03               	skipz
  7597     1D76  2D7F               	goto	i1l769
  7598     1D77  3000               	movlw	0
  7599     1D78  00F3               	movwf	___fleq@ff1+3
  7600     1D79  3000               	movlw	0
  7601     1D7A  00F2               	movwf	___fleq@ff1+2
  7602     1D7B  3000               	movlw	0
  7603     1D7C  00F1               	movwf	___fleq@ff1+1
  7604     1D7D  3000               	movlw	0
  7605     1D7E  00F0               	movwf	___fleq@ff1
  7606     1D7F                     i1l769:
  7607     1D7F  3000               	movlw	0
  7608     1D80  0574               	andwf	___fleq@ff2,w
  7609     1D81  00F8               	movwf	??___fleq
  7610     1D82  3000               	movlw	0
  7611     1D83  0575               	andwf	___fleq@ff2+1,w
  7612     1D84  00F9               	movwf	??___fleq+1
  7613     1D85  3080               	movlw	128
  7614     1D86  0576               	andwf	___fleq@ff2+2,w
  7615     1D87  00FA               	movwf	??___fleq+2
  7616     1D88  307F               	movlw	127
  7617     1D89  0577               	andwf	___fleq@ff2+3,w
  7618     1D8A  00FB               	movwf	??___fleq+3
  7619     1D8B  087B               	movf	??___fleq+3,w
  7620     1D8C  047A               	iorwf	??___fleq+2,w
  7621     1D8D  0479               	iorwf	??___fleq+1,w
  7622     1D8E  0478               	iorwf	??___fleq,w
  7623     1D8F  1D03               	skipz
  7624     1D90  2D99               	goto	i1l770
  7625     1D91  3000               	movlw	0
  7626     1D92  00F7               	movwf	___fleq@ff2+3
  7627     1D93  3000               	movlw	0
  7628     1D94  00F6               	movwf	___fleq@ff2+2
  7629     1D95  3000               	movlw	0
  7630     1D96  00F5               	movwf	___fleq@ff2+1
  7631     1D97  3000               	movlw	0
  7632     1D98  00F4               	movwf	___fleq@ff2
  7633     1D99                     i1l770:
  7634     1D99  0877               	movf	___fleq@ff2+3,w
  7635     1D9A  0673               	xorwf	___fleq@ff1+3,w
  7636     1D9B  1D03               	skipz
  7637     1D9C  2DA7               	goto	u592_25
  7638     1D9D  0876               	movf	___fleq@ff2+2,w
  7639     1D9E  0672               	xorwf	___fleq@ff1+2,w
  7640     1D9F  1D03               	skipz
  7641     1DA0  2DA7               	goto	u592_25
  7642     1DA1  0875               	movf	___fleq@ff2+1,w
  7643     1DA2  0671               	xorwf	___fleq@ff1+1,w
  7644     1DA3  1D03               	skipz
  7645     1DA4  2DA7               	goto	u592_25
  7646     1DA5  0874               	movf	___fleq@ff2,w
  7647     1DA6  0670               	xorwf	___fleq@ff1,w
  7648     1DA7                     u592_25:
  7649     1DA7  1903               	skipnz
  7650     1DA8  2DAB               	goto	i1l4065
  7651     1DA9  1003               	clrc
  7652     1DAA  0008               	return
  7653     1DAB                     i1l4065:
  7654     1DAB  1403               	setc
  7655     1DAC  0008               	return
  7656     1DAD                     __end_of___fleq:
  7657                           
  7658                           	psect	text30
  7659     1C58                     __ptext30:	
  7660 ;; *************** function _LCD_Write_String *****************
  7661 ;; Defined at:
  7662 ;;		line 91 in file "LCD16x2.c"
  7663 ;; Parameters:    Size  Location     Type
  7664 ;;  str             2    6[COMMON] PTR unsigned char 
  7665 ;;		 -> str2(17), str1(17), STR_1(13), 
  7666 ;; Auto vars:     Size  Location     Type
  7667 ;;  i               2   11[COMMON] int 
  7668 ;; Return value:  Size  Location     Type
  7669 ;;                  1    wreg      void 
  7670 ;; Registers used:
  7671 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7672 ;; Tracked objects:
  7673 ;;		On entry : 200/0
  7674 ;;		On exit  : 300/0
  7675 ;;		Unchanged: 0/0
  7676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7677 ;;      Params:         2       0       0       0       0
  7678 ;;      Locals:         2       0       0       0       0
  7679 ;;      Temps:          3       0       0       0       0
  7680 ;;      Totals:         7       0       0       0       0
  7681 ;;Total ram usage:        7 bytes
  7682 ;; Hardware stack levels used: 1
  7683 ;; Hardware stack levels required when called: 2
  7684 ;; This function calls:
  7685 ;;		_LCD_Write_Char
  7686 ;; This function is called by:
  7687 ;;		_ISR
  7688 ;;		_displayData
  7689 ;; This function uses a non-reentrant model
  7690 ;;
  7691                           
  7692     1C58                     _LCD_Write_String:	
  7693                           ;psect for function _LCD_Write_String
  7694                           
  7695                           
  7696                           ;LCD16x2.c: 91: void LCD_Write_String(char *str);LCD16x2.c: 92: {;LCD16x2.c: 93:   int i
      +                          ;;LCD16x2.c: 94:   for(i=0;str[i]!='\0';i++)
  7697                           
  7698                           ;incstack = 0
  7699 ;; using string table level
  7700                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7701     1C58  01FB               	clrf	LCD_Write_String@i
  7702     1C59  01FC               	clrf	LCD_Write_String@i+1
  7703     1C5A                     i1l4361:
  7704     1C5A  087B               	movf	LCD_Write_String@i,w
  7705     1C5B  0776               	addwf	LCD_Write_String@str,w
  7706     1C5C  00F9               	movwf	??_LCD_Write_String+1
  7707     1C5D  0877               	movf	LCD_Write_String@str+1,w
  7708     1C5E  00F8               	movwf	??_LCD_Write_String
  7709     1C5F  1803               	skipnc
  7710     1C60  0AF8               	incf	??_LCD_Write_String,f
  7711     1C61  1BFB               	btfsc	LCD_Write_String@i,7
  7712     1C62  03F8               	decf	??_LCD_Write_String,f
  7713     1C63  0878               	movf	??_LCD_Write_String,w
  7714     1C64  00FA               	movwf	??_LCD_Write_String+2
  7715     1C65  087A               	movf	??_LCD_Write_String+2,w
  7716     1C66  1283               	bcf	3,5	;RP0=0, select bank0
  7717     1C67  1303               	bcf	3,6	;RP1=0, select bank0
  7718     1C68  00FF               	movwf	127
  7719     1C69  0879               	movf	??_LCD_Write_String+1,w
  7720     1C6A  0084               	movwf	4
  7721     1C6B  160A  118A  2000  160A  158A  	fcall	stringtab
  7722     1C70  3A00               	xorlw	0
  7723     1C71  1903               	btfsc	3,2
  7724     1C72  0008               	return
  7725                           
  7726                           ;LCD16x2.c: 95:     LCD_Write_Char(str[i]);
  7727     1C73  087B               	movf	LCD_Write_String@i,w
  7728     1C74  0776               	addwf	LCD_Write_String@str,w
  7729     1C75  00F9               	movwf	??_LCD_Write_String+1
  7730     1C76  0877               	movf	LCD_Write_String@str+1,w
  7731     1C77  00F8               	movwf	??_LCD_Write_String
  7732     1C78  1803               	skipnc
  7733     1C79  0AF8               	incf	??_LCD_Write_String,f
  7734     1C7A  1BFB               	btfsc	LCD_Write_String@i,7
  7735     1C7B  03F8               	decf	??_LCD_Write_String,f
  7736     1C7C  0878               	movf	??_LCD_Write_String,w
  7737     1C7D  00FA               	movwf	??_LCD_Write_String+2
  7738     1C7E  087A               	movf	??_LCD_Write_String+2,w
  7739     1C7F  1283               	bcf	3,5	;RP0=0, select bank0
  7740     1C80  1303               	bcf	3,6	;RP1=0, select bank0
  7741     1C81  00FF               	movwf	127
  7742     1C82  0879               	movf	??_LCD_Write_String+1,w
  7743     1C83  0084               	movwf	4
  7744     1C84  160A  118A  2000  160A  158A  	fcall	stringtab
  7745     1C89  160A  158A  25AD  160A  158A  	fcall	_LCD_Write_Char
  7746     1C8E  3001               	movlw	1
  7747     1C8F  07FB               	addwf	LCD_Write_String@i,f
  7748     1C90  1803               	skipnc
  7749     1C91  0AFC               	incf	LCD_Write_String@i+1,f
  7750     1C92  3000               	movlw	0
  7751     1C93  07FC               	addwf	LCD_Write_String@i+1,f
  7752     1C94  2C5A               	goto	i1l4361
  7753     1C95                     __end_of_LCD_Write_String:
  7754                           
  7755                           	psect	text31
  7756     1DAD                     __ptext31:	
  7757 ;; *************** function _LCD_Write_Char *****************
  7758 ;; Defined at:
  7759 ;;		line 72 in file "LCD16x2.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;  Data            1    wreg     unsigned char 
  7762 ;; Auto vars:     Size  Location     Type
  7763 ;;  Data            1    5[COMMON] unsigned char 
  7764 ;;  High4           1    4[COMMON] unsigned char 
  7765 ;;  Low4            1    3[COMMON] unsigned char 
  7766 ;; Return value:  Size  Location     Type
  7767 ;;                  1    wreg      void 
  7768 ;; Registers used:
  7769 ;;		wreg, status,2, status,0, pclath, cstack
  7770 ;; Tracked objects:
  7771 ;;		On entry : 300/0
  7772 ;;		On exit  : 0/0
  7773 ;;		Unchanged: 0/0
  7774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7775 ;;      Params:         0       0       0       0       0
  7776 ;;      Locals:         3       0       0       0       0
  7777 ;;      Temps:          2       0       0       0       0
  7778 ;;      Totals:         5       0       0       0       0
  7779 ;;Total ram usage:        5 bytes
  7780 ;; Hardware stack levels used: 1
  7781 ;; Hardware stack levels required when called: 1
  7782 ;; This function calls:
  7783 ;;		i1_LCD_DATA
  7784 ;; This function is called by:
  7785 ;;		_LCD_Write_String
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789     1DAD                     _LCD_Write_Char:	
  7790                           ;psect for function _LCD_Write_Char
  7791                           
  7792                           
  7793                           ;incstack = 0
  7794                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  7795                           ;LCD_Write_Char@Data stored from wreg
  7796     1DAD  00F5               	movwf	LCD_Write_Char@Data
  7797                           
  7798                           ;LCD16x2.c: 72: void LCD_Write_Char(char Data);LCD16x2.c: 73: {;LCD16x2.c: 74:   char Lo
      +                          w4, High4;;LCD16x2.c: 75:   Low4 = Data & 0x0F;
  7799     1DAE  0875               	movf	LCD_Write_Char@Data,w
  7800     1DAF  390F               	andlw	15
  7801     1DB0  00F3               	movwf	LCD_Write_Char@Low4
  7802                           
  7803                           ;LCD16x2.c: 76:   High4 = Data & 0xF0;
  7804     1DB1  0875               	movf	LCD_Write_Char@Data,w
  7805     1DB2  39F0               	andlw	240
  7806     1DB3  00F4               	movwf	LCD_Write_Char@High4
  7807                           
  7808                           ;LCD16x2.c: 77:   RD2 = 1;
  7809     1DB4  1508               	bsf	8,2	;volatile
  7810                           
  7811                           ;LCD16x2.c: 78:   LCD_DATA(High4>>4);
  7812     1DB5  0874               	movf	LCD_Write_Char@High4,w
  7813     1DB6  00F1               	movwf	??_LCD_Write_Char
  7814     1DB7  3004               	movlw	4
  7815     1DB8                     u525_25:
  7816     1DB8  1003               	clrc
  7817     1DB9  0CF1               	rrf	??_LCD_Write_Char,f
  7818     1DBA  3EFF               	addlw	-1
  7819     1DBB  1D03               	skipz
  7820     1DBC  2DB8               	goto	u525_25
  7821     1DBD  0871               	movf	??_LCD_Write_Char,w
  7822     1DBE  160A  158A  21E5  160A  158A  	fcall	i1_LCD_DATA
  7823                           
  7824                           ;LCD16x2.c: 79:   RD3 = 1;
  7825     1DC3  1588               	bsf	8,3	;volatile
  7826                           
  7827                           ;LCD16x2.c: 80:   _delay((unsigned long)((500)*(16000000/4000000.0)));
  7828     1DC4  3003               	movlw	3
  7829     1DC5  00F2               	movwf	??_LCD_Write_Char+1
  7830     1DC6  3097               	movlw	151
  7831     1DC7  00F1               	movwf	??_LCD_Write_Char
  7832     1DC8                     u730_27:
  7833     1DC8  0BF1               	decfsz	??_LCD_Write_Char,f
  7834     1DC9  2DC8               	goto	u730_27
  7835     1DCA  0BF2               	decfsz	??_LCD_Write_Char+1,f
  7836     1DCB  2DC8               	goto	u730_27
  7837     1DCC  2DCD               	nop2
  7838                           
  7839                           ;LCD16x2.c: 81:   RD3 = 0;
  7840     1DCD  1283               	bcf	3,5	;RP0=0, select bank0
  7841     1DCE  1303               	bcf	3,6	;RP1=0, select bank0
  7842     1DCF  1188               	bcf	8,3	;volatile
  7843                           
  7844                           ;LCD16x2.c: 82:   _delay((unsigned long)((500)*(16000000/4000000.0)));
  7845     1DD0  3003               	movlw	3
  7846     1DD1  00F2               	movwf	??_LCD_Write_Char+1
  7847     1DD2  3097               	movlw	151
  7848     1DD3  00F1               	movwf	??_LCD_Write_Char
  7849     1DD4                     u731_27:
  7850     1DD4  0BF1               	decfsz	??_LCD_Write_Char,f
  7851     1DD5  2DD4               	goto	u731_27
  7852     1DD6  0BF2               	decfsz	??_LCD_Write_Char+1,f
  7853     1DD7  2DD4               	goto	u731_27
  7854     1DD8  2DD9               	nop2
  7855                           
  7856                           ;LCD16x2.c: 83:   LCD_DATA(Low4);
  7857     1DD9  0873               	movf	LCD_Write_Char@Low4,w
  7858     1DDA  160A  158A  21E5  160A  158A  	fcall	i1_LCD_DATA
  7859                           
  7860                           ;LCD16x2.c: 84:   RD3 = 1;
  7861     1DDF  1588               	bsf	8,3	;volatile
  7862                           
  7863                           ;LCD16x2.c: 85:   _delay((unsigned long)((500)*(16000000/4000000.0)));
  7864     1DE0  3003               	movlw	3
  7865     1DE1  00F2               	movwf	??_LCD_Write_Char+1
  7866     1DE2  3097               	movlw	151
  7867     1DE3  00F1               	movwf	??_LCD_Write_Char
  7868     1DE4                     u732_27:
  7869     1DE4  0BF1               	decfsz	??_LCD_Write_Char,f
  7870     1DE5  2DE4               	goto	u732_27
  7871     1DE6  0BF2               	decfsz	??_LCD_Write_Char+1,f
  7872     1DE7  2DE4               	goto	u732_27
  7873     1DE8  2DE9               	nop2
  7874                           
  7875                           ;LCD16x2.c: 86:   RD3 = 0;
  7876     1DE9  1283               	bcf	3,5	;RP0=0, select bank0
  7877     1DEA  1303               	bcf	3,6	;RP1=0, select bank0
  7878     1DEB  1188               	bcf	8,3	;volatile
  7879                           
  7880                           ;LCD16x2.c: 87:   _delay((unsigned long)((500)*(16000000/4000000.0)));
  7881     1DEC  3003               	movlw	3
  7882     1DED  00F2               	movwf	??_LCD_Write_Char+1
  7883     1DEE  3097               	movlw	151
  7884     1DEF  00F1               	movwf	??_LCD_Write_Char
  7885     1DF0                     u733_27:
  7886     1DF0  0BF1               	decfsz	??_LCD_Write_Char,f
  7887     1DF1  2DF0               	goto	u733_27
  7888     1DF2  0BF2               	decfsz	??_LCD_Write_Char+1,f
  7889     1DF3  2DF0               	goto	u733_27
  7890     1DF4  2DF5               	nop2
  7891     1DF5  0008               	return
  7892     1DF6                     __end_of_LCD_Write_Char:
  7893                           
  7894                           	psect	text32
  7895     0803                     __ptext32:	
  7896 ;; *************** function _LCD_Set_Cursor *****************
  7897 ;; Defined at:
  7898 ;;		line 107 in file "LCD16x2.c"
  7899 ;; Parameters:    Size  Location     Type
  7900 ;;  r               1    wreg     unsigned char 
  7901 ;;  c               1    4[COMMON] unsigned char 
  7902 ;; Auto vars:     Size  Location     Type
  7903 ;;  r               1    6[COMMON] unsigned char 
  7904 ;;  Temp            1    9[COMMON] unsigned char 
  7905 ;;  High4           1    8[COMMON] unsigned char 
  7906 ;;  Low4            1    7[COMMON] unsigned char 
  7907 ;; Return value:  Size  Location     Type
  7908 ;;                  1    wreg      void 
  7909 ;; Registers used:
  7910 ;;		wreg, status,2, status,0, pclath, cstack
  7911 ;; Tracked objects:
  7912 ;;		On entry : 200/0
  7913 ;;		On exit  : 200/0
  7914 ;;		Unchanged: 0/0
  7915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7916 ;;      Params:         1       0       0       0       0
  7917 ;;      Locals:         4       0       0       0       0
  7918 ;;      Temps:          1       0       0       0       0
  7919 ;;      Totals:         6       0       0       0       0
  7920 ;;Total ram usage:        6 bytes
  7921 ;; Hardware stack levels used: 1
  7922 ;; Hardware stack levels required when called: 2
  7923 ;; This function calls:
  7924 ;;		i1_LCD_CMD
  7925 ;; This function is called by:
  7926 ;;		_ISR
  7927 ;;		_displayData
  7928 ;; This function uses a non-reentrant model
  7929 ;;
  7930                           
  7931     0803                     _LCD_Set_Cursor:	
  7932                           ;psect for function _LCD_Set_Cursor
  7933                           
  7934                           
  7935                           ;incstack = 0
  7936                           ; Regs used in _LCD_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  7937                           ;LCD_Set_Cursor@r stored from wreg
  7938     0803  00F6               	movwf	LCD_Set_Cursor@r
  7939                           
  7940                           ;LCD16x2.c: 107: void LCD_Set_Cursor(uint8_t r, uint8_t c);LCD16x2.c: 108: {;LCD16x2.c: 
      +                          109:   uint8_t Temp, Low4, High4;;LCD16x2.c: 110:   if(r == 1)
  7941     0804  0376               	decf	LCD_Set_Cursor@r,w
  7942     0805  1D03               	btfss	3,2
  7943     0806  2823               	goto	i1l4345
  7944                           
  7945                           ;LCD16x2.c: 111:   {;LCD16x2.c: 112:     Temp = 0x80 + c - 1;
  7946     0807  0874               	movf	LCD_Set_Cursor@c,w
  7947     0808  3E7F               	addlw	127
  7948     0809  00F9               	movwf	LCD_Set_Cursor@Temp
  7949                           
  7950                           ;LCD16x2.c: 113:     High4 = Temp >> 4;
  7951     080A  0879               	movf	LCD_Set_Cursor@Temp,w
  7952     080B  00F5               	movwf	??_LCD_Set_Cursor
  7953     080C  3004               	movlw	4
  7954     080D                     u655_25:
  7955     080D  1003               	clrc
  7956     080E  0CF5               	rrf	??_LCD_Set_Cursor,f
  7957     080F  3EFF               	addlw	-1
  7958     0810  1D03               	skipz
  7959     0811  280D               	goto	u655_25
  7960     0812  0875               	movf	??_LCD_Set_Cursor,w
  7961     0813  00F8               	movwf	LCD_Set_Cursor@High4
  7962                           
  7963                           ;LCD16x2.c: 114:     Low4 = Temp & 0x0F;
  7964     0814  0879               	movf	LCD_Set_Cursor@Temp,w
  7965     0815  390F               	andlw	15
  7966     0816  00F7               	movwf	LCD_Set_Cursor@Low4
  7967                           
  7968                           ;LCD16x2.c: 115:     LCD_CMD(High4);
  7969     0817  0878               	movf	LCD_Set_Cursor@High4,w
  7970     0818  160A  158A  21CE  120A  158A  	fcall	i1_LCD_CMD
  7971                           
  7972                           ;LCD16x2.c: 116:     LCD_CMD(Low4);
  7973     081D  0877               	movf	LCD_Set_Cursor@Low4,w
  7974     081E  160A  158A  21CE  120A  158A  	fcall	i1_LCD_CMD
  7975     0823                     i1l4345:
  7976                           
  7977                           ;LCD16x2.c: 118:   if(r == 2)
  7978     0823  3002               	movlw	2
  7979     0824  0676               	xorwf	LCD_Set_Cursor@r,w
  7980     0825  1D03               	btfss	3,2
  7981     0826  0008               	return
  7982                           
  7983                           ;LCD16x2.c: 119:   {;LCD16x2.c: 120:     Temp = 0xC0 + c - 1;
  7984     0827  0874               	movf	LCD_Set_Cursor@c,w
  7985     0828  3EBF               	addlw	191
  7986     0829  00F9               	movwf	LCD_Set_Cursor@Temp
  7987                           
  7988                           ;LCD16x2.c: 121:     High4 = Temp >> 4;
  7989     082A  0879               	movf	LCD_Set_Cursor@Temp,w
  7990     082B  00F5               	movwf	??_LCD_Set_Cursor
  7991     082C  3004               	movlw	4
  7992     082D                     u657_25:
  7993     082D  1003               	clrc
  7994     082E  0CF5               	rrf	??_LCD_Set_Cursor,f
  7995     082F  3EFF               	addlw	-1
  7996     0830  1D03               	skipz
  7997     0831  282D               	goto	u657_25
  7998     0832  0875               	movf	??_LCD_Set_Cursor,w
  7999     0833  00F8               	movwf	LCD_Set_Cursor@High4
  8000                           
  8001                           ;LCD16x2.c: 122:     Low4 = Temp & 0x0F;
  8002     0834  0879               	movf	LCD_Set_Cursor@Temp,w
  8003     0835  390F               	andlw	15
  8004     0836  00F7               	movwf	LCD_Set_Cursor@Low4
  8005                           
  8006                           ;LCD16x2.c: 123:     LCD_CMD(High4);
  8007     0837  0878               	movf	LCD_Set_Cursor@High4,w
  8008     0838  160A  158A  21CE  120A  158A  	fcall	i1_LCD_CMD
  8009                           
  8010                           ;LCD16x2.c: 124:     LCD_CMD(Low4);
  8011     083D  0877               	movf	LCD_Set_Cursor@Low4,w
  8012     083E  160A  158A  21CE   	fcall	i1_LCD_CMD
  8013     0841  0008               	return
  8014     0842                     __end_of_LCD_Set_Cursor:
  8015                           
  8016                           	psect	text33
  8017     197F                     __ptext33:	
  8018 ;; *************** function _LCD_Clear *****************
  8019 ;; Defined at:
  8020 ;;		line 99 in file "LCD16x2.c"
  8021 ;; Parameters:    Size  Location     Type
  8022 ;;		None
  8023 ;; Auto vars:     Size  Location     Type
  8024 ;;		None
  8025 ;; Return value:  Size  Location     Type
  8026 ;;                  1    wreg      void 
  8027 ;; Registers used:
  8028 ;;		wreg, status,2, status,0, pclath, cstack
  8029 ;; Tracked objects:
  8030 ;;		On entry : 200/0
  8031 ;;		On exit  : 300/0
  8032 ;;		Unchanged: 0/0
  8033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8034 ;;      Params:         0       0       0       0       0
  8035 ;;      Locals:         0       0       0       0       0
  8036 ;;      Temps:          0       0       0       0       0
  8037 ;;      Totals:         0       0       0       0       0
  8038 ;;Total ram usage:        0 bytes
  8039 ;; Hardware stack levels used: 1
  8040 ;; Hardware stack levels required when called: 2
  8041 ;; This function calls:
  8042 ;;		i1_LCD_CMD
  8043 ;; This function is called by:
  8044 ;;		_ISR
  8045 ;;		_displayData
  8046 ;; This function uses a non-reentrant model
  8047 ;;
  8048                           
  8049     197F                     _LCD_Clear:	
  8050                           ;psect for function _LCD_Clear
  8051                           
  8052                           
  8053                           ;LCD16x2.c: 101:   LCD_CMD(0);
  8054                           
  8055                           ;incstack = 0
  8056                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  8057     197F  3000               	movlw	0
  8058     1980  160A  158A  21CE  160A  158A  	fcall	i1_LCD_CMD
  8059                           
  8060                           ;LCD16x2.c: 102:   LCD_CMD(1);
  8061     1985  3001               	movlw	1
  8062     1986  160A  158A  21CE   	fcall	i1_LCD_CMD
  8063     1989  0008               	return
  8064     198A                     __end_of_LCD_Clear:
  8065                           
  8066                           	psect	text34
  8067     19CE                     __ptext34:	
  8068 ;; *************** function i1_LCD_CMD *****************
  8069 ;; Defined at:
  8070 ;;		line 31 in file "LCD16x2.c"
  8071 ;; Parameters:    Size  Location     Type
  8072 ;;  CMD             1    wreg     unsigned char 
  8073 ;; Auto vars:     Size  Location     Type
  8074 ;;  CMD             1    3[COMMON] unsigned char 
  8075 ;; Return value:  Size  Location     Type
  8076 ;;                  1    wreg      void 
  8077 ;; Registers used:
  8078 ;;		wreg, status,2, status,0, pclath, cstack
  8079 ;; Tracked objects:
  8080 ;;		On entry : 200/0
  8081 ;;		On exit  : 300/0
  8082 ;;		Unchanged: 0/0
  8083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8084 ;;      Params:         0       0       0       0       0
  8085 ;;      Locals:         1       0       0       0       0
  8086 ;;      Temps:          2       0       0       0       0
  8087 ;;      Totals:         3       0       0       0       0
  8088 ;;Total ram usage:        3 bytes
  8089 ;; Hardware stack levels used: 1
  8090 ;; Hardware stack levels required when called: 1
  8091 ;; This function calls:
  8092 ;;		i1_LCD_DATA
  8093 ;; This function is called by:
  8094 ;;		_LCD_Clear
  8095 ;;		_LCD_Set_Cursor
  8096 ;; This function uses a non-reentrant model
  8097 ;;
  8098                           
  8099     19CE                     i1_LCD_CMD:	
  8100                           ;psect for function i1_LCD_CMD
  8101                           
  8102                           
  8103                           ;incstack = 0
  8104                           ; Regs used in i1_LCD_CMD: [wreg+status,2+status,0+pclath+cstack]
  8105                           ;i1LCD_CMD@CMD stored from wreg
  8106     19CE  00F3               	movwf	i1LCD_CMD@CMD
  8107                           
  8108                           ;LCD16x2.c: 31: static void LCD_CMD(uint8_t CMD);LCD16x2.c: 32: {;LCD16x2.c: 34:   RD2 =
      +                           0;
  8109     19CF  1283               	bcf	3,5	;RP0=0, select bank0
  8110     19D0  1108               	bcf	8,2	;volatile
  8111                           
  8112                           ;LCD16x2.c: 36:   LCD_DATA(CMD);
  8113     19D1  0873               	movf	i1LCD_CMD@CMD,w
  8114     19D2  160A  158A  21E5  160A  158A  	fcall	i1_LCD_DATA
  8115                           
  8116                           ;LCD16x2.c: 38:   RD3 = 1;
  8117     19D7  1588               	bsf	8,3	;volatile
  8118                           
  8119                           ;LCD16x2.c: 39:   _delay((unsigned long)((500)*(16000000/4000000.0)));
  8120     19D8  3003               	movlw	3
  8121     19D9  00F2               	movwf	??i1_LCD_CMD+1
  8122     19DA  3097               	movlw	151
  8123     19DB  00F1               	movwf	??i1_LCD_CMD
  8124     19DC                     u734_27:
  8125     19DC  0BF1               	decfsz	??i1_LCD_CMD,f
  8126     19DD  29DC               	goto	u734_27
  8127     19DE  0BF2               	decfsz	??i1_LCD_CMD+1,f
  8128     19DF  29DC               	goto	u734_27
  8129     19E0  29E1               	nop2
  8130                           
  8131                           ;LCD16x2.c: 40:   RD3 = 0;
  8132     19E1  1283               	bcf	3,5	;RP0=0, select bank0
  8133     19E2  1303               	bcf	3,6	;RP1=0, select bank0
  8134     19E3  1188               	bcf	8,3	;volatile
  8135     19E4  0008               	return
  8136     19E5                     __end_ofi1_LCD_CMD:
  8137                           
  8138                           	psect	text35
  8139     19E5                     __ptext35:	
  8140 ;; *************** function i1_LCD_DATA *****************
  8141 ;; Defined at:
  8142 ;;		line 9 in file "LCD16x2.c"
  8143 ;; Parameters:    Size  Location     Type
  8144 ;;  Data            1    wreg     unsigned char 
  8145 ;; Auto vars:     Size  Location     Type
  8146 ;;  Data            1    0[COMMON] unsigned char 
  8147 ;; Return value:  Size  Location     Type
  8148 ;;                  1    wreg      void 
  8149 ;; Registers used:
  8150 ;;		wreg
  8151 ;; Tracked objects:
  8152 ;;		On entry : 0/0
  8153 ;;		On exit  : 300/0
  8154 ;;		Unchanged: 0/0
  8155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8156 ;;      Params:         0       0       0       0       0
  8157 ;;      Locals:         1       0       0       0       0
  8158 ;;      Temps:          0       0       0       0       0
  8159 ;;      Totals:         1       0       0       0       0
  8160 ;;Total ram usage:        1 bytes
  8161 ;; Hardware stack levels used: 1
  8162 ;; This function calls:
  8163 ;;		Nothing
  8164 ;; This function is called by:
  8165 ;;		_LCD_Write_Char
  8166 ;;		i1_LCD_CMD
  8167 ;; This function uses a non-reentrant model
  8168 ;;
  8169                           
  8170     19E5                     i1_LCD_DATA:	
  8171                           ;psect for function i1_LCD_DATA
  8172                           
  8173                           
  8174                           ;incstack = 0
  8175                           ; Regs used in i1_LCD_DATA: [wreg]
  8176                           ;i1LCD_DATA@Data stored from wreg
  8177     19E5  00F0               	movwf	i1LCD_DATA@Data
  8178                           
  8179                           ;LCD16x2.c: 9: static void LCD_DATA(uint8_t Data);LCD16x2.c: 10: {;LCD16x2.c: 11:   if(D
      +                          ata & 1)
  8180     19E6  1C70               	btfss	i1LCD_DATA@Data,0
  8181     19E7  29EC               	goto	i1l167
  8182                           
  8183                           ;LCD16x2.c: 12:     RD4 = 1;
  8184     19E8  1283               	bcf	3,5	;RP0=0, select bank0
  8185     19E9  1303               	bcf	3,6	;RP1=0, select bank0
  8186     19EA  1608               	bsf	8,4	;volatile
  8187     19EB  29EF               	goto	i1l168
  8188     19EC                     i1l167:	
  8189                           ;LCD16x2.c: 13:   else
  8190                           
  8191                           
  8192                           ;LCD16x2.c: 14:     RD4 = 0;
  8193     19EC  1283               	bcf	3,5	;RP0=0, select bank0
  8194     19ED  1303               	bcf	3,6	;RP1=0, select bank0
  8195     19EE  1208               	bcf	8,4	;volatile
  8196     19EF                     i1l168:
  8197                           
  8198                           ;LCD16x2.c: 15:   if(Data & 2)
  8199     19EF  1CF0               	btfss	i1LCD_DATA@Data,1
  8200     19F0  29F3               	goto	i1l169
  8201                           
  8202                           ;LCD16x2.c: 16:     RD5 = 1;
  8203     19F1  1688               	bsf	8,5	;volatile
  8204     19F2  29F4               	goto	i1l170
  8205     19F3                     i1l169:	
  8206                           ;LCD16x2.c: 17:   else
  8207                           
  8208                           
  8209                           ;LCD16x2.c: 18:     RD5 = 0;
  8210     19F3  1288               	bcf	8,5	;volatile
  8211     19F4                     i1l170:
  8212                           
  8213                           ;LCD16x2.c: 19:   if(Data & 4)
  8214     19F4  1D70               	btfss	i1LCD_DATA@Data,2
  8215     19F5  29F8               	goto	i1l171
  8216                           
  8217                           ;LCD16x2.c: 20:     RD6 = 1;
  8218     19F6  1708               	bsf	8,6	;volatile
  8219     19F7  29F9               	goto	i1l172
  8220     19F8                     i1l171:	
  8221                           ;LCD16x2.c: 21:   else
  8222                           
  8223                           
  8224                           ;LCD16x2.c: 22:     RD6 = 0;
  8225     19F8  1308               	bcf	8,6	;volatile
  8226     19F9                     i1l172:
  8227                           
  8228                           ;LCD16x2.c: 23:   if(Data & 8)
  8229     19F9  1DF0               	btfss	i1LCD_DATA@Data,3
  8230     19FA  29FD               	goto	i1l173
  8231                           
  8232                           ;LCD16x2.c: 24:     RD7 = 1;
  8233     19FB  1788               	bsf	8,7	;volatile
  8234     19FC  0008               	return
  8235     19FD                     i1l173:	
  8236                           ;LCD16x2.c: 25:   else
  8237                           
  8238                           
  8239                           ;LCD16x2.c: 26:     RD7 = 0;
  8240     19FD  1388               	bcf	8,7	;volatile
  8241     19FE  0008               	return
  8242     19FF                     __end_ofi1_LCD_DATA:
  8243                           
  8244                           	psect	text36
  8245     1CD8                     __ptext36:	
  8246 ;; *************** function _UARTrcvString *****************
  8247 ;; Defined at:
  8248 ;;		line 101 in file "PIC16F877A_UART.c"
  8249 ;; Parameters:    Size  Location     Type
  8250 ;;  rcv_buffer      1    wreg     PTR unsigned char 
  8251 ;;		 -> rcv_buffer(9), 
  8252 ;;  length          2    1[COMMON] unsigned int 
  8253 ;; Auto vars:     Size  Location     Type
  8254 ;;  rcv_buffer      1    5[COMMON] PTR unsigned char 
  8255 ;;		 -> rcv_buffer(9), 
  8256 ;; Return value:  Size  Location     Type
  8257 ;;                  2    1[COMMON] int 
  8258 ;; Registers used:
  8259 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8260 ;; Tracked objects:
  8261 ;;		On entry : 300/0
  8262 ;;		On exit  : B00/0
  8263 ;;		Unchanged: 0/0
  8264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8265 ;;      Params:         2       0       0       0       0
  8266 ;;      Locals:         1       0       0       0       0
  8267 ;;      Temps:          2       0       0       0       0
  8268 ;;      Totals:         5       0       0       0       0
  8269 ;;Total ram usage:        5 bytes
  8270 ;; Hardware stack levels used: 1
  8271 ;; Hardware stack levels required when called: 1
  8272 ;; This function calls:
  8273 ;;		_UARTrcvChar
  8274 ;; This function is called by:
  8275 ;;		_ISR
  8276 ;; This function uses a non-reentrant model
  8277 ;;
  8278                           
  8279     1CD8                     _UARTrcvString:	
  8280                           ;psect for function _UARTrcvString
  8281                           
  8282                           
  8283                           ;incstack = 0
  8284                           ; Regs used in _UARTrcvString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8285                           ;UARTrcvString@rcv_buffer stored from wreg
  8286     1CD8  00F5               	movwf	UARTrcvString@rcv_buffer
  8287                           
  8288                           ;PIC16F877A_UART.c: 101: int UARTrcvString(char *rcv_buffer, uint16_t length);PIC16F877A
      +                          _UART.c: 102: {;PIC16F877A_UART.c: 104:     if (OERR)
  8289     1CD9  1C98               	btfss	24,1	;volatile
  8290     1CDA  2CDD               	goto	i1l4749
  8291                           
  8292                           ;PIC16F877A_UART.c: 105:     {;PIC16F877A_UART.c: 106:         CREN = 0;
  8293     1CDB  1218               	bcf	24,4	;volatile
  8294                           
  8295                           ;PIC16F877A_UART.c: 107:         CREN = 1;
  8296     1CDC  1618               	bsf	24,4	;volatile
  8297     1CDD                     i1l4749:
  8298                           
  8299                           ;PIC16F877A_UART.c: 109:     if (uart_str_idx == length - 1)
  8300     1CDD  0871               	movf	UARTrcvString@length,w
  8301     1CDE  3EFF               	addlw	255
  8302     1CDF  00F3               	movwf	??_UARTrcvString
  8303     1CE0  0872               	movf	UARTrcvString@length+1,w
  8304     1CE1  1803               	skipnc
  8305     1CE2  3E01               	addlw	1
  8306     1CE3  3EFF               	addlw	255
  8307     1CE4  00F4               	movwf	??_UARTrcvString+1
  8308     1CE5  086E               	movf	_uart_str_idx@PIC16F877A_UART$F291+1,w
  8309     1CE6  0674               	xorwf	??_UARTrcvString+1,w
  8310     1CE7  1D03               	skipz
  8311     1CE8  2CEB               	goto	u711_25
  8312     1CE9  086D               	movf	_uart_str_idx@PIC16F877A_UART$F291,w
  8313     1CEA  0673               	xorwf	??_UARTrcvString,w
  8314     1CEB                     u711_25:
  8315     1CEB  1D03               	skipz
  8316     1CEC  2D0A               	goto	i1l4765
  8317                           
  8318                           ;PIC16F877A_UART.c: 110:     {;PIC16F877A_UART.c: 111:         rcv_buffer[uart_str_idx++
      +                          ] = UARTrcvChar();
  8319     1CED  086D               	movf	_uart_str_idx@PIC16F877A_UART$F291,w
  8320     1CEE  0775               	addwf	UARTrcvString@rcv_buffer,w
  8321     1CEF  00F3               	movwf	??_UARTrcvString
  8322     1CF0  0873               	movf	??_UARTrcvString,w
  8323     1CF1  0084               	movwf	4
  8324     1CF2  160A  158A  215E   	fcall	_UARTrcvChar
  8325     1CF5  1383               	bcf	3,7	;select IRP bank0
  8326     1CF6  0080               	movwf	0
  8327     1CF7  3001               	movlw	1
  8328     1CF8  07ED               	addwf	_uart_str_idx@PIC16F877A_UART$F291,f
  8329     1CF9  1803               	skipnc
  8330     1CFA  0AEE               	incf	_uart_str_idx@PIC16F877A_UART$F291+1,f
  8331     1CFB  3000               	movlw	0
  8332     1CFC  07EE               	addwf	_uart_str_idx@PIC16F877A_UART$F291+1,f
  8333                           
  8334                           ;PIC16F877A_UART.c: 112:         rcv_buffer[uart_str_idx] = '\0';
  8335     1CFD  086D               	movf	_uart_str_idx@PIC16F877A_UART$F291,w
  8336     1CFE  0775               	addwf	UARTrcvString@rcv_buffer,w
  8337     1CFF  00F3               	movwf	??_UARTrcvString
  8338     1D00  0873               	movf	??_UARTrcvString,w
  8339     1D01  0084               	movwf	4
  8340     1D02  0180               	clrf	0
  8341                           
  8342                           ;PIC16F877A_UART.c: 113:         uart_str_idx = 0;
  8343     1D03  01ED               	clrf	_uart_str_idx@PIC16F877A_UART$F291
  8344     1D04  01EE               	clrf	_uart_str_idx@PIC16F877A_UART$F291+1
  8345                           
  8346                           ;PIC16F877A_UART.c: 114:         return 1;
  8347     1D05  3001               	movlw	1
  8348     1D06  00F1               	movwf	?_UARTrcvString
  8349     1D07  3000               	movlw	0
  8350     1D08  00F2               	movwf	?_UARTrcvString+1
  8351     1D09  0008               	return
  8352     1D0A                     i1l4765:
  8353                           
  8354                           ;PIC16F877A_UART.c: 117:     {;PIC16F877A_UART.c: 118:         rcv_buffer[uart_str_idx++
      +                          ] = UARTrcvChar();
  8355     1D0A  086D               	movf	_uart_str_idx@PIC16F877A_UART$F291,w
  8356     1D0B  0775               	addwf	UARTrcvString@rcv_buffer,w
  8357     1D0C  00F3               	movwf	??_UARTrcvString
  8358     1D0D  0873               	movf	??_UARTrcvString,w
  8359     1D0E  0084               	movwf	4
  8360     1D0F  160A  158A  215E   	fcall	_UARTrcvChar
  8361     1D12  1383               	bcf	3,7	;select IRP bank0
  8362     1D13  0080               	movwf	0
  8363     1D14  3001               	movlw	1
  8364     1D15  07ED               	addwf	_uart_str_idx@PIC16F877A_UART$F291,f
  8365     1D16  1803               	skipnc
  8366     1D17  0AEE               	incf	_uart_str_idx@PIC16F877A_UART$F291+1,f
  8367     1D18  3000               	movlw	0
  8368     1D19  07EE               	addwf	_uart_str_idx@PIC16F877A_UART$F291+1,f
  8369                           
  8370                           ;PIC16F877A_UART.c: 119:         return 0;
  8371     1D1A  01F1               	clrf	?_UARTrcvString
  8372     1D1B  01F2               	clrf	?_UARTrcvString+1
  8373     1D1C  0008               	return
  8374     1D1D                     __end_of_UARTrcvString:
  8375                           
  8376                           	psect	text37
  8377     195E                     __ptext37:	
  8378 ;; *************** function _UARTrcvChar *****************
  8379 ;; Defined at:
  8380 ;;		line 88 in file "PIC16F877A_UART.c"
  8381 ;; Parameters:    Size  Location     Type
  8382 ;;		None
  8383 ;; Auto vars:     Size  Location     Type
  8384 ;;  c               1    0[COMMON] unsigned char 
  8385 ;; Return value:  Size  Location     Type
  8386 ;;                  1    wreg      unsigned char 
  8387 ;; Registers used:
  8388 ;;		wreg
  8389 ;; Tracked objects:
  8390 ;;		On entry : 300/0
  8391 ;;		On exit  : 300/0
  8392 ;;		Unchanged: 0/0
  8393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8394 ;;      Params:         0       0       0       0       0
  8395 ;;      Locals:         1       0       0       0       0
  8396 ;;      Temps:          0       0       0       0       0
  8397 ;;      Totals:         1       0       0       0       0
  8398 ;;Total ram usage:        1 bytes
  8399 ;; Hardware stack levels used: 1
  8400 ;; This function calls:
  8401 ;;		Nothing
  8402 ;; This function is called by:
  8403 ;;		_UARTrcvString
  8404 ;; This function uses a non-reentrant model
  8405 ;;
  8406                           
  8407     195E                     _UARTrcvChar:	
  8408                           ;psect for function _UARTrcvChar
  8409                           
  8410                           
  8411                           ;PIC16F877A_UART.c: 91:     if (OERR)
  8412                           
  8413                           ;incstack = 0
  8414                           ; Regs used in _UARTrcvChar: [wreg]
  8415     195E  1C98               	btfss	24,1	;volatile
  8416     195F  2962               	goto	i1l4673
  8417                           
  8418                           ;PIC16F877A_UART.c: 92:     {;PIC16F877A_UART.c: 93:         CREN = 0;
  8419     1960  1218               	bcf	24,4	;volatile
  8420                           
  8421                           ;PIC16F877A_UART.c: 94:         CREN = 1;
  8422     1961  1618               	bsf	24,4	;volatile
  8423     1962                     i1l4673:
  8424                           
  8425                           ;PIC16F877A_UART.c: 96:     char c = RCREG;
  8426     1962  081A               	movf	26,w	;volatile
  8427     1963  00F0               	movwf	UARTrcvChar@c
  8428                           
  8429                           ;PIC16F877A_UART.c: 97:     return c;
  8430     1964  0870               	movf	UARTrcvChar@c,w
  8431     1965  0008               	return
  8432     1966                     __end_of_UARTrcvChar:
  8433                           
  8434                           	psect	text38
  8435     123D                     __ptext38:	
  8436 ;; *************** function _TC72_toFloat *****************
  8437 ;; Defined at:
  8438 ;;		line 87 in file "RS485_Master.c"
  8439 ;; Parameters:    Size  Location     Type
  8440 ;;  temp            2   38[BANK0 ] int 
  8441 ;; Auto vars:     Size  Location     Type
  8442 ;;  result          3   45[BANK0 ] float 
  8443 ;;  count           1   48[BANK0 ] unsigned char 
  8444 ;; Return value:  Size  Location     Type
  8445 ;;                  3   38[BANK0 ] float 
  8446 ;; Registers used:
  8447 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8448 ;; Tracked objects:
  8449 ;;		On entry : B00/0
  8450 ;;		On exit  : 300/0
  8451 ;;		Unchanged: 0/0
  8452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8453 ;;      Params:         0       3       0       0       0
  8454 ;;      Locals:         0       4       0       0       0
  8455 ;;      Temps:          0       4       0       0       0
  8456 ;;      Totals:         0      11       0       0       0
  8457 ;;Total ram usage:       11 bytes
  8458 ;; Hardware stack levels used: 1
  8459 ;; Hardware stack levels required when called: 2
  8460 ;; This function calls:
  8461 ;;		___awtoft
  8462 ;;		___flmul
  8463 ;;		___ftadd
  8464 ;;		___xxtofl
  8465 ;; This function is called by:
  8466 ;;		_ISR
  8467 ;; This function uses a non-reentrant model
  8468 ;;
  8469                           
  8470     123D                     _TC72_toFloat:	
  8471                           ;psect for function _TC72_toFloat
  8472                           
  8473                           
  8474                           ;RS485_Master.c: 87: float TC72_toFloat(signed int temp);RS485_Master.c: 88: {;RS485_Mas
      +                          ter.c: 89:     float result = (float)(temp >> 8);
  8475                           
  8476                           ;incstack = 0
  8477                           ; Regs used in _TC72_toFloat: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8478     123D  0847               	movf	TC72_toFloat@temp+1,w
  8479     123E  00CA               	movwf	??_TC72_toFloat+1
  8480     123F  0846               	movf	TC72_toFloat@temp,w
  8481     1240  00C9               	movwf	??_TC72_toFloat
  8482     1241  3008               	movlw	8
  8483     1242  00FF               	movwf	127
  8484     1243                     u716_25:
  8485     1243  0D4A               	rlf	??_TC72_toFloat+1,w
  8486     1244  0CCA               	rrf	??_TC72_toFloat+1,f
  8487     1245  0CC9               	rrf	??_TC72_toFloat,f
  8488     1246  0BFF               	decfsz	127,f
  8489     1247  2A43               	goto	u716_25
  8490     1248  0849               	movf	??_TC72_toFloat,w
  8491     1249  00F8               	movwf	___awtoft@c
  8492     124A  084A               	movf	??_TC72_toFloat+1,w
  8493     124B  00F9               	movwf	___awtoft@c+1
  8494     124C  160A  158A  221C  160A  118A  	fcall	___awtoft
  8495     1251  0878               	movf	?___awtoft,w
  8496     1252  00CD               	movwf	TC72_toFloat@result
  8497     1253  0879               	movf	?___awtoft+1,w
  8498     1254  00CE               	movwf	TC72_toFloat@result+1
  8499     1255  087A               	movf	?___awtoft+2,w
  8500     1256  00CF               	movwf	TC72_toFloat@result+2
  8501                           
  8502                           ;RS485_Master.c: 90:     char count = temp & 0x00C0;
  8503     1257  0846               	movf	TC72_toFloat@temp,w
  8504     1258  39C0               	andlw	192
  8505     1259  00D0               	movwf	TC72_toFloat@count
  8506                           
  8507                           ;RS485_Master.c: 91:     if(count)
  8508     125A  0850               	movf	TC72_toFloat@count,w
  8509     125B  1903               	btfsc	3,2
  8510     125C  2AA5               	goto	i1l4813
  8511                           
  8512                           ;RS485_Master.c: 92:     {;RS485_Master.c: 93:         count = count >> 6;
  8513     125D  0850               	movf	TC72_toFloat@count,w
  8514     125E  00C9               	movwf	??_TC72_toFloat
  8515     125F  3006               	movlw	6
  8516     1260                     u718_25:
  8517     1260  1003               	clrc
  8518     1261  0CC9               	rrf	??_TC72_toFloat,f
  8519     1262  3EFF               	addlw	-1
  8520     1263  1D03               	skipz
  8521     1264  2A60               	goto	u718_25
  8522     1265  0849               	movf	??_TC72_toFloat,w
  8523     1266  00D0               	movwf	TC72_toFloat@count
  8524                           
  8525                           ;RS485_Master.c: 94:         result += (count * 0.25);
  8526     1267  0850               	movf	TC72_toFloat@count,w
  8527     1268  00C9               	movwf	??_TC72_toFloat
  8528     1269  01CA               	clrf	??_TC72_toFloat+1
  8529     126A  01CB               	clrf	??_TC72_toFloat+2
  8530     126B  01CC               	clrf	??_TC72_toFloat+3
  8531     126C  084C               	movf	??_TC72_toFloat+3,w
  8532     126D  00F3               	movwf	___xxtofl@val+3
  8533     126E  084B               	movf	??_TC72_toFloat+2,w
  8534     126F  00F2               	movwf	___xxtofl@val+2
  8535     1270  084A               	movf	??_TC72_toFloat+1,w
  8536     1271  00F1               	movwf	___xxtofl@val+1
  8537     1272  0849               	movf	??_TC72_toFloat,w
  8538     1273  00F0               	movwf	___xxtofl@val
  8539     1274  3001               	movlw	1
  8540     1275  160A  118A  23B6  160A  118A  	fcall	___xxtofl
  8541     127A  0873               	movf	?___xxtofl+3,w
  8542     127B  1283               	bcf	3,5	;RP0=0, select bank0
  8543     127C  00A7               	movwf	___flmul@a+3
  8544     127D  0872               	movf	?___xxtofl+2,w
  8545     127E  00A6               	movwf	___flmul@a+2
  8546     127F  0871               	movf	?___xxtofl+1,w
  8547     1280  00A5               	movwf	___flmul@a+1
  8548     1281  0870               	movf	?___xxtofl,w
  8549     1282  00A4               	movwf	___flmul@a
  8550     1283  303E               	movlw	62
  8551     1284  00A3               	movwf	___flmul@b+3
  8552     1285  3080               	movlw	128
  8553     1286  00A2               	movwf	___flmul@b+2
  8554     1287  3000               	movlw	0
  8555     1288  00A1               	movwf	___flmul@b+1
  8556     1289  3000               	movlw	0
  8557     128A  00A0               	movwf	___flmul@b
  8558     128B  120A  158A  21F9  160A  118A  	fcall	___flmul
  8559     1290  0821               	movf	?___flmul+1,w
  8560     1291  00BA               	movwf	___ftadd@f1
  8561     1292  0822               	movf	?___flmul+2,w
  8562     1293  00BB               	movwf	___ftadd@f1+1
  8563     1294  0823               	movf	?___flmul+3,w
  8564     1295  00BC               	movwf	___ftadd@f1+2
  8565     1296  084D               	movf	TC72_toFloat@result,w
  8566     1297  00BD               	movwf	___ftadd@f2
  8567     1298  084E               	movf	TC72_toFloat@result+1,w
  8568     1299  00BE               	movwf	___ftadd@f2+1
  8569     129A  084F               	movf	TC72_toFloat@result+2,w
  8570     129B  00BF               	movwf	___ftadd@f2+2
  8571     129C  160A  118A  2705   	fcall	___ftadd
  8572     129F  083A               	movf	?___ftadd,w
  8573     12A0  00CD               	movwf	TC72_toFloat@result
  8574     12A1  083B               	movf	?___ftadd+1,w
  8575     12A2  00CE               	movwf	TC72_toFloat@result+1
  8576     12A3  083C               	movf	?___ftadd+2,w
  8577     12A4  00CF               	movwf	TC72_toFloat@result+2
  8578     12A5                     i1l4813:
  8579                           
  8580                           ;RS485_Master.c: 96:     return result;
  8581     12A5  084D               	movf	TC72_toFloat@result,w
  8582     12A6  00C6               	movwf	?_TC72_toFloat
  8583     12A7  084E               	movf	TC72_toFloat@result+1,w
  8584     12A8  00C7               	movwf	?_TC72_toFloat+1
  8585     12A9  084F               	movf	TC72_toFloat@result+2,w
  8586     12AA  00C8               	movwf	?_TC72_toFloat+2
  8587     12AB  0008               	return
  8588     12AC                     __end_of_TC72_toFloat:
  8589                           
  8590                           	psect	text39
  8591     1A1C                     __ptext39:	
  8592 ;; *************** function ___awtoft *****************
  8593 ;; Defined at:
  8594 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\awtoft.c"
  8595 ;; Parameters:    Size  Location     Type
  8596 ;;  c               2    8[COMMON] int 
  8597 ;; Auto vars:     Size  Location     Type
  8598 ;;  sign            1   11[COMMON] unsigned char 
  8599 ;; Return value:  Size  Location     Type
  8600 ;;                  3    8[COMMON] float 
  8601 ;; Registers used:
  8602 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8603 ;; Tracked objects:
  8604 ;;		On entry : B00/0
  8605 ;;		On exit  : 300/0
  8606 ;;		Unchanged: 300/0
  8607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8608 ;;      Params:         3       0       0       0       0
  8609 ;;      Locals:         1       0       0       0       0
  8610 ;;      Temps:          0       0       0       0       0
  8611 ;;      Totals:         4       0       0       0       0
  8612 ;;Total ram usage:        4 bytes
  8613 ;; Hardware stack levels used: 1
  8614 ;; Hardware stack levels required when called: 1
  8615 ;; This function calls:
  8616 ;;		___ftpack
  8617 ;; This function is called by:
  8618 ;;		_TC72_toFloat
  8619 ;; This function uses a non-reentrant model
  8620 ;;
  8621                           
  8622     1A1C                     ___awtoft:	
  8623                           ;psect for function ___awtoft
  8624                           
  8625                           
  8626                           ;incstack = 0
  8627                           ; Regs used in ___awtoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8628     1A1C  01FB               	clrf	___awtoft@sign
  8629     1A1D  1FF9               	btfss	___awtoft@c+1,7
  8630     1A1E  2A26               	goto	i1l4705
  8631     1A1F  09F8               	comf	___awtoft@c,f
  8632     1A20  09F9               	comf	___awtoft@c+1,f
  8633     1A21  0AF8               	incf	___awtoft@c,f
  8634     1A22  1903               	skipnz
  8635     1A23  0AF9               	incf	___awtoft@c+1,f
  8636     1A24  01FB               	clrf	___awtoft@sign
  8637     1A25  0AFB               	incf	___awtoft@sign,f
  8638     1A26                     i1l4705:
  8639     1A26  0878               	movf	___awtoft@c,w
  8640     1A27  00F0               	movwf	___ftpack@arg
  8641     1A28  0879               	movf	___awtoft@c+1,w
  8642     1A29  00F1               	movwf	___ftpack@arg+1
  8643     1A2A  01F2               	clrf	___ftpack@arg+2
  8644     1A2B  308E               	movlw	142
  8645     1A2C  00F3               	movwf	___ftpack@exp
  8646     1A2D  087B               	movf	___awtoft@sign,w
  8647     1A2E  00F4               	movwf	___ftpack@sign
  8648     1A2F  160A  118A  21D1   	fcall	___ftpack
  8649     1A32  0870               	movf	?___ftpack,w
  8650     1A33  00F8               	movwf	?___awtoft
  8651     1A34  0871               	movf	?___ftpack+1,w
  8652     1A35  00F9               	movwf	?___awtoft+1
  8653     1A36  0872               	movf	?___ftpack+2,w
  8654     1A37  00FA               	movwf	?___awtoft+2
  8655     1A38  0008               	return
  8656     1A39                     __end_of___awtoft:
  8657                           
  8658                           	psect	text40
  8659     1C95                     __ptext40:	
  8660 ;; *************** function _SpeedControl *****************
  8661 ;; Defined at:
  8662 ;;		line 64 in file "Compressor_motor.c"
  8663 ;; Parameters:    Size  Location     Type
  8664 ;;  Kp              3    9[BANK1 ] float 
  8665 ;;  targetVal       3   12[BANK1 ] float 
  8666 ;;  nowVal          3   15[BANK1 ] float 
  8667 ;; Auto vars:     Size  Location     Type
  8668 ;;  PWMval          2   74[BANK0 ] unsigned int 
  8669 ;; Return value:  Size  Location     Type
  8670 ;;                  1    wreg      void 
  8671 ;; Registers used:
  8672 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8673 ;; Tracked objects:
  8674 ;;		On entry : 300/100
  8675 ;;		On exit  : 300/0
  8676 ;;		Unchanged: 0/0
  8677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8678 ;;      Params:         0       0       9       0       0
  8679 ;;      Locals:         0       2       0       0       0
  8680 ;;      Temps:          0       0       0       0       0
  8681 ;;      Totals:         0       2       9       0       0
  8682 ;;Total ram usage:       11 bytes
  8683 ;; Hardware stack levels used: 1
  8684 ;; Hardware stack levels required when called: 4
  8685 ;; This function calls:
  8686 ;;		_DC_Speed
  8687 ;;		_proportionalControl
  8688 ;; This function is called by:
  8689 ;;		_ISR
  8690 ;; This function uses a non-reentrant model
  8691 ;;
  8692                           
  8693     1C95                     _SpeedControl:	
  8694                           ;psect for function _SpeedControl
  8695                           
  8696                           
  8697                           ;Compressor_motor.c: 64: void SpeedControl(float Kp, float targetVal, float nowVal);Comp
      +                          ressor_motor.c: 65: {;Compressor_motor.c: 67:     uint16_t PWMval = proportionalControl(
      +                          Kp, targetVal, nowVal);
  8698                           
  8699                           ;incstack = 0
  8700 ;; hardware stack exceeded
  8701                           ; Regs used in _SpeedControl: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8702     1C95  0829               	movf	SpeedControl@Kp^(0+128),w
  8703     1C96  00A0               	movwf	proportionalControl@Kp^(0+128)
  8704     1C97  082A               	movf	(SpeedControl@Kp+1)^(0+128),w
  8705     1C98  00A1               	movwf	(proportionalControl@Kp+1)^(0+128)
  8706     1C99  082B               	movf	(SpeedControl@Kp+2)^(0+128),w
  8707     1C9A  00A2               	movwf	(proportionalControl@Kp+2)^(0+128)
  8708     1C9B  082C               	movf	SpeedControl@targetVal^(0+128),w
  8709     1C9C  00A3               	movwf	proportionalControl@targetVal^(0+128)
  8710     1C9D  082D               	movf	(SpeedControl@targetVal+1)^(0+128),w
  8711     1C9E  00A4               	movwf	(proportionalControl@targetVal+1)^(0+128)
  8712     1C9F  082E               	movf	(SpeedControl@targetVal+2)^(0+128),w
  8713     1CA0  00A5               	movwf	(proportionalControl@targetVal+2)^(0+128)
  8714     1CA1  082F               	movf	SpeedControl@nowVal^(0+128),w
  8715     1CA2  00A6               	movwf	proportionalControl@nowVal^(0+128)
  8716     1CA3  0830               	movf	(SpeedControl@nowVal+1)^(0+128),w
  8717     1CA4  00A7               	movwf	(proportionalControl@nowVal+1)^(0+128)
  8718     1CA5  0831               	movf	(SpeedControl@nowVal+2)^(0+128),w
  8719     1CA6  00A8               	movwf	(proportionalControl@nowVal+2)^(0+128)
  8720     1CA7  160A  158A  251D  160A  158A  	fcall	_proportionalControl
  8721     1CAC  0821               	movf	(?_proportionalControl+1)^(0+128),w
  8722     1CAD  1283               	bcf	3,5	;RP0=0, select bank0
  8723     1CAE  00EB               	movwf	SpeedControl@PWMval+1
  8724     1CAF  1683               	bsf	3,5	;RP0=1, select bank1
  8725     1CB0  0820               	movf	?_proportionalControl^(0+128),w
  8726     1CB1  1283               	bcf	3,5	;RP0=0, select bank0
  8727     1CB2  00EA               	movwf	SpeedControl@PWMval
  8728                           
  8729                           ;Compressor_motor.c: 69:     if(PWMval > 16000000/(16*2000))
  8730     1CB3  3001               	movlw	1
  8731     1CB4  026B               	subwf	SpeedControl@PWMval+1,w
  8732     1CB5  30F5               	movlw	245
  8733     1CB6  1903               	skipnz
  8734     1CB7  026A               	subwf	SpeedControl@PWMval,w
  8735     1CB8  1C03               	skipc
  8736     1CB9  2CBF               	goto	i1l4715
  8737                           
  8738                           ;Compressor_motor.c: 70:         PWMval = 16000000/(16*2000);
  8739     1CBA  30F4               	movlw	244
  8740     1CBB  00EA               	movwf	SpeedControl@PWMval
  8741     1CBC  3001               	movlw	1
  8742     1CBD  00EB               	movwf	SpeedControl@PWMval+1
  8743     1CBE  2CC8               	goto	i1l4719
  8744     1CBF                     i1l4715:
  8745     1CBF  3000               	movlw	0
  8746     1CC0  026B               	subwf	SpeedControl@PWMval+1,w
  8747     1CC1  3046               	movlw	70
  8748     1CC2  1903               	skipnz
  8749     1CC3  026A               	subwf	SpeedControl@PWMval,w
  8750     1CC4  1803               	skipnc
  8751     1CC5  2CC8               	goto	i1l4719
  8752                           
  8753                           ;Compressor_motor.c: 72:         PWMval = 0;
  8754     1CC6  01EA               	clrf	SpeedControl@PWMval
  8755     1CC7  01EB               	clrf	SpeedControl@PWMval+1
  8756     1CC8                     i1l4719:
  8757                           
  8758                           ;Compressor_motor.c: 74:     if(PWMval == 0)
  8759     1CC8  086A               	movf	SpeedControl@PWMval,w
  8760     1CC9  046B               	iorwf	SpeedControl@PWMval+1,w
  8761     1CCA  1D03               	btfss	3,2
  8762     1CCB  2CCE               	goto	i1l361
  8763                           
  8764                           ;Compressor_motor.c: 75:     {;Compressor_motor.c: 76:         RD1 = 0;
  8765     1CCC  1088               	bcf	8,1	;volatile
  8766     1CCD  2CCF               	goto	L9
  8767     1CCE                     i1l361:	
  8768                           ;Compressor_motor.c: 79:     else
  8769                           
  8770                           ;Compressor_motor.c: 78:     }
  8771                           
  8772                           ;Compressor_motor.c: 77:         RD2 = 0;
  8773                           
  8774                           
  8775                           ;Compressor_motor.c: 80:     {;Compressor_motor.c: 81:         RD1 = 1;
  8776     1CCE  1488               	bsf	8,1	;volatile
  8777     1CCF                     L9:
  8778                           
  8779                           ;Compressor_motor.c: 82:         RD2 = 0;
  8780     1CCF  1108               	bcf	8,2	;volatile
  8781                           
  8782                           ;Compressor_motor.c: 84:     DC_Speed(PWMval);
  8783     1CD0  086B               	movf	SpeedControl@PWMval+1,w
  8784     1CD1  00F1               	movwf	DC_Speed@dutyCycle+1
  8785     1CD2  086A               	movf	SpeedControl@PWMval,w
  8786     1CD3  00F0               	movwf	DC_Speed@dutyCycle
  8787     1CD4  160A  158A  2333   	fcall	_DC_Speed
  8788     1CD7  0008               	return
  8789     1CD8                     __end_of_SpeedControl:
  8790                           
  8791                           	psect	text41
  8792     1D1D                     __ptext41:	
  8793 ;; *************** function _proportionalControl *****************
  8794 ;; Defined at:
  8795 ;;		line 28 in file "Compressor_motor.c"
  8796 ;; Parameters:    Size  Location     Type
  8797 ;;  Kp              3    0[BANK1 ] float 
  8798 ;;  targetVal       3    3[BANK1 ] float 
  8799 ;;  nowVal          3    6[BANK1 ] float 
  8800 ;; Auto vars:     Size  Location     Type
  8801 ;;  controlSigna    2   72[BANK0 ] unsigned int 
  8802 ;; Return value:  Size  Location     Type
  8803 ;;                  2    0[BANK1 ] unsigned int 
  8804 ;; Registers used:
  8805 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8806 ;; Tracked objects:
  8807 ;;		On entry : 300/100
  8808 ;;		On exit  : 300/100
  8809 ;;		Unchanged: 0/0
  8810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8811 ;;      Params:         0       0       9       0       0
  8812 ;;      Locals:         0       2       0       0       0
  8813 ;;      Temps:          0       0       0       0       0
  8814 ;;      Totals:         0       2       9       0       0
  8815 ;;Total ram usage:       11 bytes
  8816 ;; Hardware stack levels used: 1
  8817 ;; Hardware stack levels required when called: 3
  8818 ;; This function calls:
  8819 ;;		___ftmul
  8820 ;;		___ftsub
  8821 ;;		___fttol
  8822 ;; This function is called by:
  8823 ;;		_SpeedControl
  8824 ;; This function uses a non-reentrant model
  8825 ;;
  8826                           
  8827     1D1D                     _proportionalControl:	
  8828                           ;psect for function _proportionalControl
  8829                           
  8830                           
  8831                           ;Compressor_motor.c: 30:     uint16_t controlSignal = Kp * (targetVal - nowVal);
  8832                           
  8833                           ;incstack = 0
  8834 ;; hardware stack exceeded
  8835                           ; Regs used in _proportionalControl: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8836     1D1D  0823               	movf	proportionalControl@targetVal^(0+128),w
  8837     1D1E  1283               	bcf	3,5	;RP0=0, select bank0
  8838     1D1F  00C9               	movwf	___ftsub@f1
  8839     1D20  1683               	bsf	3,5	;RP0=1, select bank1
  8840     1D21  0824               	movf	(proportionalControl@targetVal+1)^(0+128),w
  8841     1D22  1283               	bcf	3,5	;RP0=0, select bank0
  8842     1D23  00CA               	movwf	___ftsub@f1+1
  8843     1D24  1683               	bsf	3,5	;RP0=1, select bank1
  8844     1D25  0825               	movf	(proportionalControl@targetVal+2)^(0+128),w
  8845     1D26  1283               	bcf	3,5	;RP0=0, select bank0
  8846     1D27  00CB               	movwf	___ftsub@f1+2
  8847     1D28  1683               	bsf	3,5	;RP0=1, select bank1
  8848     1D29  0826               	movf	proportionalControl@nowVal^(0+128),w
  8849     1D2A  1283               	bcf	3,5	;RP0=0, select bank0
  8850     1D2B  00C6               	movwf	___ftsub@f2
  8851     1D2C  1683               	bsf	3,5	;RP0=1, select bank1
  8852     1D2D  0827               	movf	(proportionalControl@nowVal+1)^(0+128),w
  8853     1D2E  1283               	bcf	3,5	;RP0=0, select bank0
  8854     1D2F  00C7               	movwf	___ftsub@f2+1
  8855     1D30  1683               	bsf	3,5	;RP0=1, select bank1
  8856     1D31  0828               	movf	(proportionalControl@nowVal+2)^(0+128),w
  8857     1D32  1283               	bcf	3,5	;RP0=0, select bank0
  8858     1D33  00C8               	movwf	___ftsub@f2+2
  8859     1D34  160A  158A  21FF  160A  158A  	fcall	___ftsub
  8860     1D39  0846               	movf	?___ftsub,w
  8861     1D3A  00CF               	movwf	___ftmul@f2
  8862     1D3B  0847               	movf	?___ftsub+1,w
  8863     1D3C  00D0               	movwf	___ftmul@f2+1
  8864     1D3D  0848               	movf	?___ftsub+2,w
  8865     1D3E  00D1               	movwf	___ftmul@f2+2
  8866     1D3F  1683               	bsf	3,5	;RP0=1, select bank1
  8867     1D40  0820               	movf	proportionalControl@Kp^(0+128),w
  8868     1D41  1283               	bcf	3,5	;RP0=0, select bank0
  8869     1D42  00CC               	movwf	___ftmul@f1
  8870     1D43  1683               	bsf	3,5	;RP0=1, select bank1
  8871     1D44  0821               	movf	(proportionalControl@Kp+1)^(0+128),w
  8872     1D45  1283               	bcf	3,5	;RP0=0, select bank0
  8873     1D46  00CD               	movwf	___ftmul@f1+1
  8874     1D47  1683               	bsf	3,5	;RP0=1, select bank1
  8875     1D48  0822               	movf	(proportionalControl@Kp+2)^(0+128),w
  8876     1D49  1283               	bcf	3,5	;RP0=0, select bank0
  8877     1D4A  00CE               	movwf	___ftmul@f1+2
  8878     1D4B  160A  118A  259D  160A  158A  	fcall	___ftmul
  8879     1D50  084C               	movf	?___ftmul,w
  8880     1D51  00DB               	movwf	___fttol@f1
  8881     1D52  084D               	movf	?___ftmul+1,w
  8882     1D53  00DC               	movwf	___fttol@f1+1
  8883     1D54  084E               	movf	?___ftmul+2,w
  8884     1D55  00DD               	movwf	___fttol@f1+2
  8885     1D56  160A  118A  22AC   	fcall	___fttol
  8886     1D59  085C               	movf	?___fttol+1,w
  8887     1D5A  00E9               	movwf	proportionalControl@controlSignal+1
  8888     1D5B  085B               	movf	?___fttol,w
  8889     1D5C  00E8               	movwf	proportionalControl@controlSignal
  8890                           
  8891                           ;Compressor_motor.c: 31:     return controlSignal;
  8892     1D5D  0869               	movf	proportionalControl@controlSignal+1,w
  8893     1D5E  1683               	bsf	3,5	;RP0=1, select bank1
  8894     1D5F  00A1               	movwf	(?_proportionalControl+1)^(0+128)
  8895     1D60  1283               	bcf	3,5	;RP0=0, select bank0
  8896     1D61  0868               	movf	proportionalControl@controlSignal,w
  8897     1D62  1683               	bsf	3,5	;RP0=1, select bank1
  8898     1D63  00A0               	movwf	?_proportionalControl^(0+128)
  8899     1D64  0008               	return
  8900     1D65                     __end_of_proportionalControl:
  8901                           
  8902                           	psect	text42
  8903     12AC                     __ptext42:	
  8904 ;; *************** function ___fttol *****************
  8905 ;; Defined at:
  8906 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\fttol.c"
  8907 ;; Parameters:    Size  Location     Type
  8908 ;;  f1              3   59[BANK0 ] float 
  8909 ;; Auto vars:     Size  Location     Type
  8910 ;;  lval            4   67[BANK0 ] unsigned long 
  8911 ;;  exp1            1   71[BANK0 ] unsigned char 
  8912 ;;  sign1           1   66[BANK0 ] unsigned char 
  8913 ;; Return value:  Size  Location     Type
  8914 ;;                  4   59[BANK0 ] long 
  8915 ;; Registers used:
  8916 ;;		wreg, status,2, status,0, btemp+1
  8917 ;; Tracked objects:
  8918 ;;		On entry : 300/0
  8919 ;;		On exit  : 300/0
  8920 ;;		Unchanged: 0/0
  8921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8922 ;;      Params:         0       4       0       0       0
  8923 ;;      Locals:         0       6       0       0       0
  8924 ;;      Temps:          0       3       0       0       0
  8925 ;;      Totals:         0      13       0       0       0
  8926 ;;Total ram usage:       13 bytes
  8927 ;; Hardware stack levels used: 1
  8928 ;; This function calls:
  8929 ;;		Nothing
  8930 ;; This function is called by:
  8931 ;;		_proportionalControl
  8932 ;; This function uses a non-reentrant model
  8933 ;;
  8934                           
  8935     12AC                     ___fttol:	
  8936                           ;psect for function ___fttol
  8937                           
  8938                           
  8939                           ;incstack = 0
  8940                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+1]
  8941     12AC  085B               	movf	___fttol@f1,w
  8942     12AD  00DF               	movwf	??___fttol
  8943     12AE  085C               	movf	___fttol@f1+1,w
  8944     12AF  00E0               	movwf	??___fttol+1
  8945     12B0  085D               	movf	___fttol@f1+2,w
  8946     12B1  00E1               	movwf	??___fttol+2
  8947     12B2  1003               	clrc
  8948     12B3  0D60               	rlf	??___fttol+1,w
  8949     12B4  0D61               	rlf	??___fttol+2,w
  8950     12B5  00E7               	movwf	___fttol@exp1
  8951     12B6  0867               	movf	___fttol@exp1,w
  8952     12B7  1D03               	btfss	3,2
  8953     12B8  2AC2               	goto	i1l4205
  8954     12B9                     i1l4201:
  8955     12B9  3000               	movlw	0
  8956     12BA  00DE               	movwf	?___fttol+3
  8957     12BB  3000               	movlw	0
  8958     12BC  00DD               	movwf	?___fttol+2
  8959     12BD  3000               	movlw	0
  8960     12BE  00DC               	movwf	?___fttol+1
  8961     12BF  3000               	movlw	0
  8962     12C0  00DB               	movwf	?___fttol
  8963     12C1  0008               	return
  8964     12C2                     i1l4205:
  8965     12C2  085B               	movf	___fttol@f1,w
  8966     12C3  00DF               	movwf	??___fttol
  8967     12C4  085C               	movf	___fttol@f1+1,w
  8968     12C5  00E0               	movwf	??___fttol+1
  8969     12C6  085D               	movf	___fttol@f1+2,w
  8970     12C7  00E1               	movwf	??___fttol+2
  8971     12C8  3017               	movlw	23
  8972     12C9                     u625_25:
  8973     12C9  1003               	clrc
  8974     12CA  0CE1               	rrf	??___fttol+2,f
  8975     12CB  0CE0               	rrf	??___fttol+1,f
  8976     12CC  0CDF               	rrf	??___fttol,f
  8977     12CD  3EFF               	addlw	-1
  8978     12CE  1D03               	skipz
  8979     12CF  2AC9               	goto	u625_25
  8980     12D0  085F               	movf	??___fttol,w
  8981     12D1  00E2               	movwf	___fttol@sign1
  8982     12D2  17DC               	bsf	___fttol@f1+1,7
  8983     12D3  30FF               	movlw	255
  8984     12D4  05DB               	andwf	___fttol@f1,f
  8985     12D5  30FF               	movlw	255
  8986     12D6  05DC               	andwf	___fttol@f1+1,f
  8987     12D7  3000               	movlw	0
  8988     12D8  05DD               	andwf	___fttol@f1+2,f
  8989     12D9  085B               	movf	___fttol@f1,w
  8990     12DA  00E3               	movwf	___fttol@lval
  8991     12DB  085C               	movf	___fttol@f1+1,w
  8992     12DC  00E4               	movwf	___fttol@lval+1
  8993     12DD  085D               	movf	___fttol@f1+2,w
  8994     12DE  00E5               	movwf	___fttol@lval+2
  8995     12DF  01E6               	clrf	___fttol@lval+3
  8996     12E0  308E               	movlw	142
  8997     12E1  02E7               	subwf	___fttol@exp1,f
  8998     12E2  1FE7               	btfss	___fttol@exp1,7
  8999     12E3  2AF9               	goto	i1l4227
  9000     12E4  0867               	movf	___fttol@exp1,w
  9001     12E5  3A80               	xorlw	128
  9002     12E6  3E8F               	addlw	143
  9003     12E7  1C03               	btfss	3,0
  9004     12E8  2AB9               	goto	i1l4201
  9005     12E9                     i1l4223:
  9006     12E9  3001               	movlw	1
  9007     12EA                     u628_25:
  9008     12EA  1003               	clrc
  9009     12EB  0CE6               	rrf	___fttol@lval+3,f
  9010     12EC  0CE5               	rrf	___fttol@lval+2,f
  9011     12ED  0CE4               	rrf	___fttol@lval+1,f
  9012     12EE  0CE3               	rrf	___fttol@lval,f
  9013     12EF  3EFF               	addlw	-1
  9014     12F0  1D03               	skipz
  9015     12F1  2AEA               	goto	u628_25
  9016     12F2  3001               	movlw	1
  9017     12F3  00FF               	movwf	127
  9018     12F4  087F               	movf	127,w
  9019     12F5  07E7               	addwf	___fttol@exp1,f
  9020     12F6  1903               	btfsc	3,2
  9021     12F7  2B0C               	goto	i1l4235
  9022     12F8  2AE9               	goto	i1l4223
  9023     12F9                     i1l4227:
  9024     12F9  3018               	movlw	24
  9025     12FA  0267               	subwf	___fttol@exp1,w
  9026     12FB  1803               	btfsc	3,0
  9027     12FC  2AB9               	goto	i1l4201
  9028     12FD                     i1l914:
  9029     12FD  0867               	movf	___fttol@exp1,w
  9030     12FE  1903               	btfsc	3,2
  9031     12FF  2B0C               	goto	i1l4235
  9032     1300  3001               	movlw	1
  9033     1301  00DF               	movwf	??___fttol
  9034     1302                     u631_25:
  9035     1302  1003               	clrc
  9036     1303  0DE3               	rlf	___fttol@lval,f
  9037     1304  0DE4               	rlf	___fttol@lval+1,f
  9038     1305  0DE5               	rlf	___fttol@lval+2,f
  9039     1306  0DE6               	rlf	___fttol@lval+3,f
  9040     1307  0BDF               	decfsz	??___fttol,f
  9041     1308  2B02               	goto	u631_25
  9042     1309  3001               	movlw	1
  9043     130A  02E7               	subwf	___fttol@exp1,f
  9044     130B  2AFD               	goto	i1l914
  9045     130C                     i1l4235:
  9046     130C  0862               	movf	___fttol@sign1,w
  9047     130D  1903               	btfsc	3,2
  9048     130E  2B1A               	goto	i1l4239
  9049     130F  09E3               	comf	___fttol@lval,f
  9050     1310  09E4               	comf	___fttol@lval+1,f
  9051     1311  09E5               	comf	___fttol@lval+2,f
  9052     1312  09E6               	comf	___fttol@lval+3,f
  9053     1313  0AE3               	incf	___fttol@lval,f
  9054     1314  1903               	skipnz
  9055     1315  0AE4               	incf	___fttol@lval+1,f
  9056     1316  1903               	skipnz
  9057     1317  0AE5               	incf	___fttol@lval+2,f
  9058     1318  1903               	skipnz
  9059     1319  0AE6               	incf	___fttol@lval+3,f
  9060     131A                     i1l4239:
  9061     131A  0866               	movf	___fttol@lval+3,w
  9062     131B  00DE               	movwf	?___fttol+3
  9063     131C  0865               	movf	___fttol@lval+2,w
  9064     131D  00DD               	movwf	?___fttol+2
  9065     131E  0864               	movf	___fttol@lval+1,w
  9066     131F  00DC               	movwf	?___fttol+1
  9067     1320  0863               	movf	___fttol@lval,w
  9068     1321  00DB               	movwf	?___fttol
  9069     1322  0008               	return
  9070     1323                     __end_of___fttol:
  9071                           
  9072                           	psect	text43
  9073     19FF                     __ptext43:	
  9074 ;; *************** function ___ftsub *****************
  9075 ;; Defined at:
  9076 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftsub.c"
  9077 ;; Parameters:    Size  Location     Type
  9078 ;;  f2              3   38[BANK0 ] float 
  9079 ;;  f1              3   41[BANK0 ] float 
  9080 ;; Auto vars:     Size  Location     Type
  9081 ;;		None
  9082 ;; Return value:  Size  Location     Type
  9083 ;;                  3   38[BANK0 ] float 
  9084 ;; Registers used:
  9085 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9086 ;; Tracked objects:
  9087 ;;		On entry : 300/0
  9088 ;;		On exit  : 300/0
  9089 ;;		Unchanged: 0/0
  9090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9091 ;;      Params:         0       6       0       0       0
  9092 ;;      Locals:         0       0       0       0       0
  9093 ;;      Temps:          0       0       0       0       0
  9094 ;;      Totals:         0       6       0       0       0
  9095 ;;Total ram usage:        6 bytes
  9096 ;; Hardware stack levels used: 1
  9097 ;; Hardware stack levels required when called: 2
  9098 ;; This function calls:
  9099 ;;		___ftadd
  9100 ;; This function is called by:
  9101 ;;		_proportionalControl
  9102 ;; This function uses a non-reentrant model
  9103 ;;
  9104                           
  9105     19FF                     ___ftsub:	
  9106                           ;psect for function ___ftsub
  9107                           
  9108                           
  9109                           ;incstack = 0
  9110 ;; hardware stack exceeded
  9111                           ; Regs used in ___ftsub: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9112     19FF  0848               	movf	___ftsub@f2+2,w
  9113     1A00  0447               	iorwf	___ftsub@f2+1,w
  9114     1A01  0446               	iorwf	___ftsub@f2,w
  9115     1A02  1903               	skipnz
  9116     1A03  2A06               	goto	i1l4195
  9117     1A04  3080               	movlw	128
  9118     1A05  06C8               	xorwf	___ftsub@f2+2,f
  9119     1A06                     i1l4195:
  9120     1A06  0849               	movf	___ftsub@f1,w
  9121     1A07  00BA               	movwf	___ftadd@f1
  9122     1A08  084A               	movf	___ftsub@f1+1,w
  9123     1A09  00BB               	movwf	___ftadd@f1+1
  9124     1A0A  084B               	movf	___ftsub@f1+2,w
  9125     1A0B  00BC               	movwf	___ftadd@f1+2
  9126     1A0C  0846               	movf	___ftsub@f2,w
  9127     1A0D  00BD               	movwf	___ftadd@f2
  9128     1A0E  0847               	movf	___ftsub@f2+1,w
  9129     1A0F  00BE               	movwf	___ftadd@f2+1
  9130     1A10  0848               	movf	___ftsub@f2+2,w
  9131     1A11  00BF               	movwf	___ftadd@f2+2
  9132     1A12  160A  118A  2705   	fcall	___ftadd
  9133     1A15  083A               	movf	?___ftadd,w
  9134     1A16  00C6               	movwf	?___ftsub
  9135     1A17  083B               	movf	?___ftadd+1,w
  9136     1A18  00C7               	movwf	?___ftsub+1
  9137     1A19  083C               	movf	?___ftadd+2,w
  9138     1A1A  00C8               	movwf	?___ftsub+2
  9139     1A1B  0008               	return
  9140     1A1C                     __end_of___ftsub:
  9141                           
  9142                           	psect	text44
  9143     1705                     __ptext44:	
  9144 ;; *************** function ___ftadd *****************
  9145 ;; Defined at:
  9146 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftadd.c"
  9147 ;; Parameters:    Size  Location     Type
  9148 ;;  f1              3   26[BANK0 ] float 
  9149 ;;  f2              3   29[BANK0 ] float 
  9150 ;; Auto vars:     Size  Location     Type
  9151 ;;  exp1            1   37[BANK0 ] unsigned char 
  9152 ;;  exp2            1   36[BANK0 ] unsigned char 
  9153 ;;  sign            1   35[BANK0 ] unsigned char 
  9154 ;; Return value:  Size  Location     Type
  9155 ;;                  3   26[BANK0 ] float 
  9156 ;; Registers used:
  9157 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9158 ;; Tracked objects:
  9159 ;;		On entry : 300/0
  9160 ;;		On exit  : 300/0
  9161 ;;		Unchanged: 0/0
  9162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9163 ;;      Params:         0       6       0       0       0
  9164 ;;      Locals:         0       3       0       0       0
  9165 ;;      Temps:          0       3       0       0       0
  9166 ;;      Totals:         0      12       0       0       0
  9167 ;;Total ram usage:       12 bytes
  9168 ;; Hardware stack levels used: 1
  9169 ;; Hardware stack levels required when called: 1
  9170 ;; This function calls:
  9171 ;;		___ftpack
  9172 ;; This function is called by:
  9173 ;;		_TC72_toFloat
  9174 ;;		___ftsub
  9175 ;; This function uses a non-reentrant model
  9176 ;;
  9177                           
  9178     1705                     ___ftadd:	
  9179                           ;psect for function ___ftadd
  9180                           
  9181                           
  9182                           ;incstack = 0
  9183                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9184     1705  083A               	movf	___ftadd@f1,w
  9185     1706  00C0               	movwf	??___ftadd
  9186     1707  083B               	movf	___ftadd@f1+1,w
  9187     1708  00C1               	movwf	??___ftadd+1
  9188     1709  083C               	movf	___ftadd@f1+2,w
  9189     170A  00C2               	movwf	??___ftadd+2
  9190     170B  1003               	clrc
  9191     170C  0D41               	rlf	??___ftadd+1,w
  9192     170D  0D42               	rlf	??___ftadd+2,w
  9193     170E  00C5               	movwf	___ftadd@exp1
  9194     170F  083D               	movf	___ftadd@f2,w
  9195     1710  00C0               	movwf	??___ftadd
  9196     1711  083E               	movf	___ftadd@f2+1,w
  9197     1712  00C1               	movwf	??___ftadd+1
  9198     1713  083F               	movf	___ftadd@f2+2,w
  9199     1714  00C2               	movwf	??___ftadd+2
  9200     1715  1003               	clrc
  9201     1716  0D41               	rlf	??___ftadd+1,w
  9202     1717  0D42               	rlf	??___ftadd+2,w
  9203     1718  00C4               	movwf	___ftadd@exp2
  9204     1719  0845               	movf	___ftadd@exp1,w
  9205     171A  1903               	btfsc	3,2
  9206     171B  2F28               	goto	i1l3307
  9207     171C  0844               	movf	___ftadd@exp2,w
  9208     171D  0245               	subwf	___ftadd@exp1,w
  9209     171E  1803               	skipnc
  9210     171F  2F2F               	goto	i1l3311
  9211     1720  0844               	movf	___ftadd@exp2,w
  9212     1721  00C0               	movwf	??___ftadd
  9213     1722  0845               	movf	___ftadd@exp1,w
  9214     1723  02C0               	subwf	??___ftadd,f
  9215     1724  3019               	movlw	25
  9216     1725  0240               	subwf	??___ftadd,w
  9217     1726  1C03               	skipc
  9218     1727  2F2F               	goto	i1l3311
  9219     1728                     i1l3307:
  9220     1728  083D               	movf	___ftadd@f2,w
  9221     1729  00BA               	movwf	?___ftadd
  9222     172A  083E               	movf	___ftadd@f2+1,w
  9223     172B  00BB               	movwf	?___ftadd+1
  9224     172C  083F               	movf	___ftadd@f2+2,w
  9225     172D  00BC               	movwf	?___ftadd+2
  9226     172E  0008               	return
  9227     172F                     i1l3311:
  9228     172F  0844               	movf	___ftadd@exp2,w
  9229     1730  1903               	btfsc	3,2
  9230     1731  0008               	return
  9231     1732  0845               	movf	___ftadd@exp1,w
  9232     1733  0244               	subwf	___ftadd@exp2,w
  9233     1734  1803               	skipnc
  9234     1735  2F3E               	goto	i1l3317
  9235     1736  0845               	movf	___ftadd@exp1,w
  9236     1737  00C0               	movwf	??___ftadd
  9237     1738  0844               	movf	___ftadd@exp2,w
  9238     1739  02C0               	subwf	??___ftadd,f
  9239     173A  3019               	movlw	25
  9240     173B  0240               	subwf	??___ftadd,w
  9241     173C  1803               	btfsc	3,0
  9242     173D  0008               	return
  9243     173E                     i1l3317:
  9244     173E  3006               	movlw	6
  9245     173F  00C3               	movwf	___ftadd@sign
  9246     1740  1BBC               	btfsc	___ftadd@f1+2,7
  9247     1741  17C3               	bsf	___ftadd@sign,7
  9248     1742  1BBF               	btfsc	___ftadd@f2+2,7
  9249     1743  1743               	bsf	___ftadd@sign,6
  9250     1744  17BB               	bsf	___ftadd@f1+1,7
  9251     1745  30FF               	movlw	255
  9252     1746  05BA               	andwf	___ftadd@f1,f
  9253     1747  30FF               	movlw	255
  9254     1748  05BB               	andwf	___ftadd@f1+1,f
  9255     1749  3000               	movlw	0
  9256     174A  05BC               	andwf	___ftadd@f1+2,f
  9257     174B  17BE               	bsf	___ftadd@f2+1,7
  9258     174C  30FF               	movlw	255
  9259     174D  05BD               	andwf	___ftadd@f2,f
  9260     174E  30FF               	movlw	255
  9261     174F  05BE               	andwf	___ftadd@f2+1,f
  9262     1750  3000               	movlw	0
  9263     1751  05BF               	andwf	___ftadd@f2+2,f
  9264     1752  0844               	movf	___ftadd@exp2,w
  9265     1753  0245               	subwf	___ftadd@exp1,w
  9266     1754  1803               	skipnc
  9267     1755  2F7C               	goto	i1l3341
  9268     1756                     i1l3329:
  9269     1756  3001               	movlw	1
  9270     1757                     u407_25:
  9271     1757  1003               	clrc
  9272     1758  0DBD               	rlf	___ftadd@f2,f
  9273     1759  0DBE               	rlf	___ftadd@f2+1,f
  9274     175A  0DBF               	rlf	___ftadd@f2+2,f
  9275     175B  3EFF               	addlw	-1
  9276     175C  1D03               	skipz
  9277     175D  2F57               	goto	u407_25
  9278     175E  3001               	movlw	1
  9279     175F  02C4               	subwf	___ftadd@exp2,f
  9280     1760  0844               	movf	___ftadd@exp2,w
  9281     1761  0645               	xorwf	___ftadd@exp1,w
  9282     1762  1903               	skipnz
  9283     1763  2F77               	goto	i1l3339
  9284     1764  3001               	movlw	1
  9285     1765  02C3               	subwf	___ftadd@sign,f
  9286     1766  0843               	movf	___ftadd@sign,w
  9287     1767  3907               	andlw	7
  9288     1768  1903               	btfsc	3,2
  9289     1769  2F77               	goto	i1l3339
  9290     176A  2F56               	goto	i1l3329
  9291     176B                     i1l3335:
  9292     176B  3001               	movlw	1
  9293     176C                     u410_25:
  9294     176C  1003               	clrc
  9295     176D  0CBC               	rrf	___ftadd@f1+2,f
  9296     176E  0CBB               	rrf	___ftadd@f1+1,f
  9297     176F  0CBA               	rrf	___ftadd@f1,f
  9298     1770  3EFF               	addlw	-1
  9299     1771  1D03               	skipz
  9300     1772  2F6C               	goto	u410_25
  9301     1773  3001               	movlw	1
  9302     1774  00FF               	movwf	127
  9303     1775  087F               	movf	127,w
  9304     1776  07C5               	addwf	___ftadd@exp1,f
  9305     1777                     i1l3339:
  9306     1777  0845               	movf	___ftadd@exp1,w
  9307     1778  0644               	xorwf	___ftadd@exp2,w
  9308     1779  1903               	btfsc	3,2
  9309     177A  2FA5               	goto	i1l837
  9310     177B  2F6B               	goto	i1l3335
  9311     177C                     i1l3341:
  9312     177C  0845               	movf	___ftadd@exp1,w
  9313     177D  0244               	subwf	___ftadd@exp2,w
  9314     177E  1803               	skipnc
  9315     177F  2FA5               	goto	i1l837
  9316     1780                     i1l3343:
  9317     1780  3001               	movlw	1
  9318     1781                     u413_25:
  9319     1781  1003               	clrc
  9320     1782  0DBA               	rlf	___ftadd@f1,f
  9321     1783  0DBB               	rlf	___ftadd@f1+1,f
  9322     1784  0DBC               	rlf	___ftadd@f1+2,f
  9323     1785  3EFF               	addlw	-1
  9324     1786  1D03               	skipz
  9325     1787  2F81               	goto	u413_25
  9326     1788  3001               	movlw	1
  9327     1789  02C5               	subwf	___ftadd@exp1,f
  9328     178A  0844               	movf	___ftadd@exp2,w
  9329     178B  0645               	xorwf	___ftadd@exp1,w
  9330     178C  1903               	skipnz
  9331     178D  2FA1               	goto	i1l3353
  9332     178E  3001               	movlw	1
  9333     178F  02C3               	subwf	___ftadd@sign,f
  9334     1790  0843               	movf	___ftadd@sign,w
  9335     1791  3907               	andlw	7
  9336     1792  1903               	btfsc	3,2
  9337     1793  2FA1               	goto	i1l3353
  9338     1794  2F80               	goto	i1l3343
  9339     1795                     i1l3349:
  9340     1795  3001               	movlw	1
  9341     1796                     u416_25:
  9342     1796  1003               	clrc
  9343     1797  0CBF               	rrf	___ftadd@f2+2,f
  9344     1798  0CBE               	rrf	___ftadd@f2+1,f
  9345     1799  0CBD               	rrf	___ftadd@f2,f
  9346     179A  3EFF               	addlw	-1
  9347     179B  1D03               	skipz
  9348     179C  2F96               	goto	u416_25
  9349     179D  3001               	movlw	1
  9350     179E  00FF               	movwf	127
  9351     179F  087F               	movf	127,w
  9352     17A0  07C4               	addwf	___ftadd@exp2,f
  9353     17A1                     i1l3353:
  9354     17A1  0845               	movf	___ftadd@exp1,w
  9355     17A2  0644               	xorwf	___ftadd@exp2,w
  9356     17A3  1D03               	skipz
  9357     17A4  2F95               	goto	i1l3349
  9358     17A5                     i1l837:
  9359     17A5  1FC3               	btfss	___ftadd@sign,7
  9360     17A6  2FB7               	goto	i1l3357
  9361     17A7  30FF               	movlw	255
  9362     17A8  06BA               	xorwf	___ftadd@f1,f
  9363     17A9  30FF               	movlw	255
  9364     17AA  06BB               	xorwf	___ftadd@f1+1,f
  9365     17AB  30FF               	movlw	255
  9366     17AC  06BC               	xorwf	___ftadd@f1+2,f
  9367     17AD  3001               	movlw	1
  9368     17AE  07BA               	addwf	___ftadd@f1,f
  9369     17AF  3000               	movlw	0
  9370     17B0  1803               	skipnc
  9371     17B1  3001               	movlw	1
  9372     17B2  07BB               	addwf	___ftadd@f1+1,f
  9373     17B3  3000               	movlw	0
  9374     17B4  1803               	skipnc
  9375     17B5  3001               	movlw	1
  9376     17B6  07BC               	addwf	___ftadd@f1+2,f
  9377     17B7                     i1l3357:
  9378     17B7  1F43               	btfss	___ftadd@sign,6
  9379     17B8  2FC9               	goto	i1l3361
  9380     17B9  30FF               	movlw	255
  9381     17BA  06BD               	xorwf	___ftadd@f2,f
  9382     17BB  30FF               	movlw	255
  9383     17BC  06BE               	xorwf	___ftadd@f2+1,f
  9384     17BD  30FF               	movlw	255
  9385     17BE  06BF               	xorwf	___ftadd@f2+2,f
  9386     17BF  3001               	movlw	1
  9387     17C0  07BD               	addwf	___ftadd@f2,f
  9388     17C1  3000               	movlw	0
  9389     17C2  1803               	skipnc
  9390     17C3  3001               	movlw	1
  9391     17C4  07BE               	addwf	___ftadd@f2+1,f
  9392     17C5  3000               	movlw	0
  9393     17C6  1803               	skipnc
  9394     17C7  3001               	movlw	1
  9395     17C8  07BF               	addwf	___ftadd@f2+2,f
  9396     17C9                     i1l3361:
  9397     17C9  01C3               	clrf	___ftadd@sign
  9398     17CA  083A               	movf	___ftadd@f1,w
  9399     17CB  07BD               	addwf	___ftadd@f2,f
  9400     17CC  083B               	movf	___ftadd@f1+1,w
  9401     17CD  1103               	clrz
  9402     17CE  1803               	skipnc
  9403     17CF  0A3B               	incf	___ftadd@f1+1,w
  9404     17D0  1D03               	btfss	3,2
  9405     17D1  07BE               	addwf	___ftadd@f2+1,f
  9406     17D2  083C               	movf	___ftadd@f1+2,w
  9407     17D3  1103               	clrz
  9408     17D4  1803               	skipnc
  9409     17D5  0A3C               	incf	___ftadd@f1+2,w
  9410     17D6  1D03               	btfss	3,2
  9411     17D7  07BF               	addwf	___ftadd@f2+2,f
  9412     17D8  1FBF               	btfss	___ftadd@f2+2,7
  9413     17D9  2FEC               	goto	i1l3371
  9414     17DA  30FF               	movlw	255
  9415     17DB  06BD               	xorwf	___ftadd@f2,f
  9416     17DC  30FF               	movlw	255
  9417     17DD  06BE               	xorwf	___ftadd@f2+1,f
  9418     17DE  30FF               	movlw	255
  9419     17DF  06BF               	xorwf	___ftadd@f2+2,f
  9420     17E0  3001               	movlw	1
  9421     17E1  07BD               	addwf	___ftadd@f2,f
  9422     17E2  3000               	movlw	0
  9423     17E3  1803               	skipnc
  9424     17E4  3001               	movlw	1
  9425     17E5  07BE               	addwf	___ftadd@f2+1,f
  9426     17E6  3000               	movlw	0
  9427     17E7  1803               	skipnc
  9428     17E8  3001               	movlw	1
  9429     17E9  07BF               	addwf	___ftadd@f2+2,f
  9430     17EA  01C3               	clrf	___ftadd@sign
  9431     17EB  0AC3               	incf	___ftadd@sign,f
  9432     17EC                     i1l3371:
  9433     17EC  083D               	movf	___ftadd@f2,w
  9434     17ED  00F0               	movwf	___ftpack@arg
  9435     17EE  083E               	movf	___ftadd@f2+1,w
  9436     17EF  00F1               	movwf	___ftpack@arg+1
  9437     17F0  083F               	movf	___ftadd@f2+2,w
  9438     17F1  00F2               	movwf	___ftpack@arg+2
  9439     17F2  0845               	movf	___ftadd@exp1,w
  9440     17F3  00F3               	movwf	___ftpack@exp
  9441     17F4  0843               	movf	___ftadd@sign,w
  9442     17F5  00F4               	movwf	___ftpack@sign
  9443     17F6  160A  118A  21D1   	fcall	___ftpack
  9444     17F9  0870               	movf	?___ftpack,w
  9445     17FA  00BA               	movwf	?___ftadd
  9446     17FB  0871               	movf	?___ftpack+1,w
  9447     17FC  00BB               	movwf	?___ftadd+1
  9448     17FD  0872               	movf	?___ftpack+2,w
  9449     17FE  00BC               	movwf	?___ftadd+2
  9450     17FF  0008               	return
  9451     1800                     __end_of___ftadd:
  9452                           
  9453                           	psect	text45
  9454     159D                     __ptext45:	
  9455 ;; *************** function ___ftmul *****************
  9456 ;; Defined at:
  9457 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftmul.c"
  9458 ;; Parameters:    Size  Location     Type
  9459 ;;  f1              3   44[BANK0 ] float 
  9460 ;;  f2              3   47[BANK0 ] float 
  9461 ;; Auto vars:     Size  Location     Type
  9462 ;;  f3_as_produc    3   54[BANK0 ] unsigned um
  9463 ;;  sign            1   58[BANK0 ] unsigned char 
  9464 ;;  cntr            1   57[BANK0 ] unsigned char 
  9465 ;;  exp             1   53[BANK0 ] unsigned char 
  9466 ;; Return value:  Size  Location     Type
  9467 ;;                  3   44[BANK0 ] float 
  9468 ;; Registers used:
  9469 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9470 ;; Tracked objects:
  9471 ;;		On entry : 300/0
  9472 ;;		On exit  : 300/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9475 ;;      Params:         0       6       0       0       0
  9476 ;;      Locals:         0       6       0       0       0
  9477 ;;      Temps:          0       3       0       0       0
  9478 ;;      Totals:         0      15       0       0       0
  9479 ;;Total ram usage:       15 bytes
  9480 ;; Hardware stack levels used: 1
  9481 ;; Hardware stack levels required when called: 1
  9482 ;; This function calls:
  9483 ;;		___ftpack
  9484 ;; This function is called by:
  9485 ;;		_proportionalControl
  9486 ;; This function uses a non-reentrant model
  9487 ;;
  9488                           
  9489     159D                     ___ftmul:	
  9490                           ;psect for function ___ftmul
  9491                           
  9492                           
  9493                           ;incstack = 0
  9494                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9495     159D  084C               	movf	___ftmul@f1,w
  9496     159E  00D2               	movwf	??___ftmul
  9497     159F  084D               	movf	___ftmul@f1+1,w
  9498     15A0  00D3               	movwf	??___ftmul+1
  9499     15A1  084E               	movf	___ftmul@f1+2,w
  9500     15A2  00D4               	movwf	??___ftmul+2
  9501     15A3  1003               	clrc
  9502     15A4  0D53               	rlf	??___ftmul+1,w
  9503     15A5  0D54               	rlf	??___ftmul+2,w
  9504     15A6  00D5               	movwf	___ftmul@exp
  9505     15A7  0855               	movf	___ftmul@exp,w
  9506     15A8  1D03               	btfss	3,2
  9507     15A9  2DB1               	goto	i1l4141
  9508     15AA  3000               	movlw	0
  9509     15AB  00CC               	movwf	?___ftmul
  9510     15AC  3000               	movlw	0
  9511     15AD  00CD               	movwf	?___ftmul+1
  9512     15AE  3000               	movlw	0
  9513     15AF  00CE               	movwf	?___ftmul+2
  9514     15B0  0008               	return
  9515     15B1                     i1l4141:
  9516     15B1  084F               	movf	___ftmul@f2,w
  9517     15B2  00D2               	movwf	??___ftmul
  9518     15B3  0850               	movf	___ftmul@f2+1,w
  9519     15B4  00D3               	movwf	??___ftmul+1
  9520     15B5  0851               	movf	___ftmul@f2+2,w
  9521     15B6  00D4               	movwf	??___ftmul+2
  9522     15B7  1003               	clrc
  9523     15B8  0D53               	rlf	??___ftmul+1,w
  9524     15B9  0D54               	rlf	??___ftmul+2,w
  9525     15BA  00DA               	movwf	___ftmul@sign
  9526     15BB  085A               	movf	___ftmul@sign,w
  9527     15BC  1D03               	btfss	3,2
  9528     15BD  2DC5               	goto	i1l4147
  9529     15BE  3000               	movlw	0
  9530     15BF  00CC               	movwf	?___ftmul
  9531     15C0  3000               	movlw	0
  9532     15C1  00CD               	movwf	?___ftmul+1
  9533     15C2  3000               	movlw	0
  9534     15C3  00CE               	movwf	?___ftmul+2
  9535     15C4  0008               	return
  9536     15C5                     i1l4147:
  9537     15C5  085A               	movf	___ftmul@sign,w
  9538     15C6  3E7B               	addlw	123
  9539     15C7  00FF               	movwf	127
  9540     15C8  087F               	movf	127,w
  9541     15C9  07D5               	addwf	___ftmul@exp,f
  9542     15CA  084E               	movf	___ftmul@f1+2,w
  9543     15CB  00DA               	movwf	___ftmul@sign
  9544     15CC  0851               	movf	___ftmul@f2+2,w
  9545     15CD  00FF               	movwf	127
  9546     15CE  087F               	movf	127,w
  9547     15CF  06DA               	xorwf	___ftmul@sign,f
  9548     15D0  3080               	movlw	128
  9549     15D1  00FF               	movwf	127
  9550     15D2  087F               	movf	127,w
  9551     15D3  05DA               	andwf	___ftmul@sign,f
  9552     15D4  17CD               	bsf	___ftmul@f1+1,7
  9553     15D5  17D0               	bsf	___ftmul@f2+1,7
  9554     15D6  30FF               	movlw	255
  9555     15D7  05CF               	andwf	___ftmul@f2,f
  9556     15D8  30FF               	movlw	255
  9557     15D9  05D0               	andwf	___ftmul@f2+1,f
  9558     15DA  3000               	movlw	0
  9559     15DB  05D1               	andwf	___ftmul@f2+2,f
  9560     15DC  3000               	movlw	0
  9561     15DD  00D6               	movwf	___ftmul@f3_as_product
  9562     15DE  3000               	movlw	0
  9563     15DF  00D7               	movwf	___ftmul@f3_as_product+1
  9564     15E0  3000               	movlw	0
  9565     15E1  00D8               	movwf	___ftmul@f3_as_product+2
  9566     15E2  3007               	movlw	7
  9567     15E3  00D9               	movwf	___ftmul@cntr
  9568     15E4                     i1l4165:
  9569     15E4  1C4C               	btfss	___ftmul@f1,0
  9570     15E5  2DF4               	goto	i1l4169
  9571     15E6  084F               	movf	___ftmul@f2,w
  9572     15E7  07D6               	addwf	___ftmul@f3_as_product,f
  9573     15E8  0850               	movf	___ftmul@f2+1,w
  9574     15E9  1103               	clrz
  9575     15EA  1803               	skipnc
  9576     15EB  0A50               	incf	___ftmul@f2+1,w
  9577     15EC  1D03               	btfss	3,2
  9578     15ED  07D7               	addwf	___ftmul@f3_as_product+1,f
  9579     15EE  0851               	movf	___ftmul@f2+2,w
  9580     15EF  1103               	clrz
  9581     15F0  1803               	skipnc
  9582     15F1  0A51               	incf	___ftmul@f2+2,w
  9583     15F2  1D03               	btfss	3,2
  9584     15F3  07D8               	addwf	___ftmul@f3_as_product+2,f
  9585     15F4                     i1l4169:
  9586     15F4  3001               	movlw	1
  9587     15F5                     u615_25:
  9588     15F5  1003               	clrc
  9589     15F6  0CCE               	rrf	___ftmul@f1+2,f
  9590     15F7  0CCD               	rrf	___ftmul@f1+1,f
  9591     15F8  0CCC               	rrf	___ftmul@f1,f
  9592     15F9  3EFF               	addlw	-1
  9593     15FA  1D03               	skipz
  9594     15FB  2DF5               	goto	u615_25
  9595     15FC  3001               	movlw	1
  9596     15FD                     u616_25:
  9597     15FD  1003               	clrc
  9598     15FE  0DCF               	rlf	___ftmul@f2,f
  9599     15FF  0DD0               	rlf	___ftmul@f2+1,f
  9600     1600  0DD1               	rlf	___ftmul@f2+2,f
  9601     1601  3EFF               	addlw	-1
  9602     1602  1D03               	skipz
  9603     1603  2DFD               	goto	u616_25
  9604     1604  3001               	movlw	1
  9605     1605  02D9               	subwf	___ftmul@cntr,f
  9606     1606  1D03               	btfss	3,2
  9607     1607  2DE4               	goto	i1l4165
  9608     1608  3009               	movlw	9
  9609     1609  00D9               	movwf	___ftmul@cntr
  9610     160A                     i1l4177:
  9611     160A  1C4C               	btfss	___ftmul@f1,0
  9612     160B  2E1A               	goto	i1l4181
  9613     160C  084F               	movf	___ftmul@f2,w
  9614     160D  07D6               	addwf	___ftmul@f3_as_product,f
  9615     160E  0850               	movf	___ftmul@f2+1,w
  9616     160F  1103               	clrz
  9617     1610  1803               	skipnc
  9618     1611  0A50               	incf	___ftmul@f2+1,w
  9619     1612  1D03               	btfss	3,2
  9620     1613  07D7               	addwf	___ftmul@f3_as_product+1,f
  9621     1614  0851               	movf	___ftmul@f2+2,w
  9622     1615  1103               	clrz
  9623     1616  1803               	skipnc
  9624     1617  0A51               	incf	___ftmul@f2+2,w
  9625     1618  1D03               	btfss	3,2
  9626     1619  07D8               	addwf	___ftmul@f3_as_product+2,f
  9627     161A                     i1l4181:
  9628     161A  3001               	movlw	1
  9629     161B                     u620_25:
  9630     161B  1003               	clrc
  9631     161C  0CCE               	rrf	___ftmul@f1+2,f
  9632     161D  0CCD               	rrf	___ftmul@f1+1,f
  9633     161E  0CCC               	rrf	___ftmul@f1,f
  9634     161F  3EFF               	addlw	-1
  9635     1620  1D03               	skipz
  9636     1621  2E1B               	goto	u620_25
  9637     1622  3001               	movlw	1
  9638     1623                     u621_25:
  9639     1623  1003               	clrc
  9640     1624  0CD8               	rrf	___ftmul@f3_as_product+2,f
  9641     1625  0CD7               	rrf	___ftmul@f3_as_product+1,f
  9642     1626  0CD6               	rrf	___ftmul@f3_as_product,f
  9643     1627  3EFF               	addlw	-1
  9644     1628  1D03               	skipz
  9645     1629  2E23               	goto	u621_25
  9646     162A  3001               	movlw	1
  9647     162B  02D9               	subwf	___ftmul@cntr,f
  9648     162C  1D03               	btfss	3,2
  9649     162D  2E0A               	goto	i1l4177
  9650     162E  0856               	movf	___ftmul@f3_as_product,w
  9651     162F  00F0               	movwf	___ftpack@arg
  9652     1630  0857               	movf	___ftmul@f3_as_product+1,w
  9653     1631  00F1               	movwf	___ftpack@arg+1
  9654     1632  0858               	movf	___ftmul@f3_as_product+2,w
  9655     1633  00F2               	movwf	___ftpack@arg+2
  9656     1634  0855               	movf	___ftmul@exp,w
  9657     1635  00F3               	movwf	___ftpack@exp
  9658     1636  085A               	movf	___ftmul@sign,w
  9659     1637  00F4               	movwf	___ftpack@sign
  9660     1638  160A  118A  21D1   	fcall	___ftpack
  9661     163B  0870               	movf	?___ftpack,w
  9662     163C  00CC               	movwf	?___ftmul
  9663     163D  0871               	movf	?___ftpack+1,w
  9664     163E  00CD               	movwf	?___ftmul+1
  9665     163F  0872               	movf	?___ftpack+2,w
  9666     1640  00CE               	movwf	?___ftmul+2
  9667     1641  0008               	return
  9668     1642                     __end_of___ftmul:
  9669                           
  9670                           	psect	text46
  9671     11D1                     __ptext46:	
  9672 ;; *************** function ___ftpack *****************
  9673 ;; Defined at:
  9674 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\float.c"
  9675 ;; Parameters:    Size  Location     Type
  9676 ;;  arg             3    0[COMMON] unsigned um
  9677 ;;  exp             1    3[COMMON] unsigned char 
  9678 ;;  sign            1    4[COMMON] unsigned char 
  9679 ;; Auto vars:     Size  Location     Type
  9680 ;;		None
  9681 ;; Return value:  Size  Location     Type
  9682 ;;                  3    0[COMMON] float 
  9683 ;; Registers used:
  9684 ;;		wreg, status,2, status,0, btemp+1
  9685 ;; Tracked objects:
  9686 ;;		On entry : 300/0
  9687 ;;		On exit  : 300/0
  9688 ;;		Unchanged: 300/0
  9689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9690 ;;      Params:         5       0       0       0       0
  9691 ;;      Locals:         0       0       0       0       0
  9692 ;;      Temps:          3       0       0       0       0
  9693 ;;      Totals:         8       0       0       0       0
  9694 ;;Total ram usage:        8 bytes
  9695 ;; Hardware stack levels used: 1
  9696 ;; This function calls:
  9697 ;;		Nothing
  9698 ;; This function is called by:
  9699 ;;		___awtoft
  9700 ;;		___ftadd
  9701 ;;		___ftmul
  9702 ;; This function uses a non-reentrant model
  9703 ;;
  9704                           
  9705     11D1                     ___ftpack:	
  9706                           ;psect for function ___ftpack
  9707                           
  9708                           
  9709                           ;incstack = 0
  9710                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+1]
  9711     11D1  0873               	movf	___ftpack@exp,w
  9712     11D2  1903               	btfsc	3,2
  9713     11D3  29D9               	goto	i1l3169
  9714     11D4  0872               	movf	___ftpack@arg+2,w
  9715     11D5  0471               	iorwf	___ftpack@arg+1,w
  9716     11D6  0470               	iorwf	___ftpack@arg,w
  9717     11D7  1D03               	skipz
  9718     11D8  29EC               	goto	i1l3177
  9719     11D9                     i1l3169:
  9720     11D9  3000               	movlw	0
  9721     11DA  00F0               	movwf	?___ftpack
  9722     11DB  3000               	movlw	0
  9723     11DC  00F1               	movwf	?___ftpack+1
  9724     11DD  3000               	movlw	0
  9725     11DE  00F2               	movwf	?___ftpack+2
  9726     11DF  0008               	return
  9727     11E0                     i1l3173:
  9728     11E0  3001               	movlw	1
  9729     11E1  00FF               	movwf	127
  9730     11E2  087F               	movf	127,w
  9731     11E3  07F3               	addwf	___ftpack@exp,f
  9732     11E4  3001               	movlw	1
  9733     11E5                     u365_25:
  9734     11E5  1003               	clrc
  9735     11E6  0CF2               	rrf	___ftpack@arg+2,f
  9736     11E7  0CF1               	rrf	___ftpack@arg+1,f
  9737     11E8  0CF0               	rrf	___ftpack@arg,f
  9738     11E9  3EFF               	addlw	-1
  9739     11EA  1D03               	skipz
  9740     11EB  29E5               	goto	u365_25
  9741     11EC                     i1l3177:
  9742     11EC  30FE               	movlw	254
  9743     11ED  0572               	andwf	___ftpack@arg+2,w
  9744     11EE  1903               	btfsc	3,2
  9745     11EF  2A07               	goto	i1l3185
  9746     11F0  29E0               	goto	i1l3173
  9747     11F1                     i1l3179:
  9748     11F1  3001               	movlw	1
  9749     11F2  00FF               	movwf	127
  9750     11F3  087F               	movf	127,w
  9751     11F4  07F3               	addwf	___ftpack@exp,f
  9752     11F5  3001               	movlw	1
  9753     11F6  07F0               	addwf	___ftpack@arg,f
  9754     11F7  3000               	movlw	0
  9755     11F8  1803               	skipnc
  9756     11F9  3001               	movlw	1
  9757     11FA  07F1               	addwf	___ftpack@arg+1,f
  9758     11FB  3000               	movlw	0
  9759     11FC  1803               	skipnc
  9760     11FD  3001               	movlw	1
  9761     11FE  07F2               	addwf	___ftpack@arg+2,f
  9762     11FF  3001               	movlw	1
  9763     1200                     u367_25:
  9764     1200  1003               	clrc
  9765     1201  0CF2               	rrf	___ftpack@arg+2,f
  9766     1202  0CF1               	rrf	___ftpack@arg+1,f
  9767     1203  0CF0               	rrf	___ftpack@arg,f
  9768     1204  3EFF               	addlw	-1
  9769     1205  1D03               	skipz
  9770     1206  2A00               	goto	u367_25
  9771     1207                     i1l3185:
  9772     1207  30FF               	movlw	255
  9773     1208  0572               	andwf	___ftpack@arg+2,w
  9774     1209  1903               	btfsc	3,2
  9775     120A  2A1A               	goto	i1l3189
  9776     120B  29F1               	goto	i1l3179
  9777     120C                     i1l3191:
  9778     120C  3002               	movlw	2
  9779     120D  0273               	subwf	___ftpack@exp,w
  9780     120E  1C03               	btfss	3,0
  9781     120F  2A1C               	goto	i1l799
  9782     1210  3001               	movlw	1
  9783     1211  02F3               	subwf	___ftpack@exp,f
  9784     1212  3001               	movlw	1
  9785     1213                     u369_25:
  9786     1213  1003               	clrc
  9787     1214  0DF0               	rlf	___ftpack@arg,f
  9788     1215  0DF1               	rlf	___ftpack@arg+1,f
  9789     1216  0DF2               	rlf	___ftpack@arg+2,f
  9790     1217  3EFF               	addlw	-1
  9791     1218  1D03               	skipz
  9792     1219  2A13               	goto	u369_25
  9793     121A                     i1l3189:
  9794     121A  1FF1               	btfss	___ftpack@arg+1,7
  9795     121B  2A0C               	goto	i1l3191
  9796     121C                     i1l799:
  9797     121C  1873               	btfsc	___ftpack@exp,0
  9798     121D  2A24               	goto	i1l800
  9799     121E  30FF               	movlw	255
  9800     121F  05F0               	andwf	___ftpack@arg,f
  9801     1220  307F               	movlw	127
  9802     1221  05F1               	andwf	___ftpack@arg+1,f
  9803     1222  30FF               	movlw	255
  9804     1223  05F2               	andwf	___ftpack@arg+2,f
  9805     1224                     i1l800:
  9806     1224  1003               	clrc
  9807     1225  0CF3               	rrf	___ftpack@exp,f
  9808     1226  0873               	movf	___ftpack@exp,w
  9809     1227  00F5               	movwf	??___ftpack
  9810     1228  01F6               	clrf	??___ftpack+1
  9811     1229  01F7               	clrf	??___ftpack+2
  9812     122A  3010               	movlw	16
  9813     122B                     u373_25:
  9814     122B  1003               	clrc
  9815     122C  0DF5               	rlf	??___ftpack,f
  9816     122D  0DF6               	rlf	??___ftpack+1,f
  9817     122E  0DF7               	rlf	??___ftpack+2,f
  9818     122F  3EFF               	addlw	-1
  9819     1230  1D03               	skipz
  9820     1231  2A2B               	goto	u373_25
  9821     1232  0875               	movf	??___ftpack,w
  9822     1233  04F0               	iorwf	___ftpack@arg,f
  9823     1234  0876               	movf	??___ftpack+1,w
  9824     1235  04F1               	iorwf	___ftpack@arg+1,f
  9825     1236  0877               	movf	??___ftpack+2,w
  9826     1237  04F2               	iorwf	___ftpack@arg+2,f
  9827     1238  0874               	movf	___ftpack@sign,w
  9828     1239  1903               	btfsc	3,2
  9829     123A  0008               	return
  9830     123B  17F2               	bsf	___ftpack@arg+2,7
  9831     123C  0008               	return
  9832     123D                     __end_of___ftpack:
  9833                           
  9834                           	psect	text47
  9835     1B33                     __ptext47:	
  9836 ;; *************** function _DC_Speed *****************
  9837 ;; Defined at:
  9838 ;;		line 35 in file "Compressor_motor.c"
  9839 ;; Parameters:    Size  Location     Type
  9840 ;;  dutyCycle       2    0[COMMON] unsigned int 
  9841 ;; Auto vars:     Size  Location     Type
  9842 ;;		None
  9843 ;; Return value:  Size  Location     Type
  9844 ;;                  1    wreg      void 
  9845 ;; Registers used:
  9846 ;;		wreg, status,2, status,0
  9847 ;; Tracked objects:
  9848 ;;		On entry : 300/0
  9849 ;;		On exit  : 300/0
  9850 ;;		Unchanged: 0/0
  9851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9852 ;;      Params:         2       0       0       0       0
  9853 ;;      Locals:         0       0       0       0       0
  9854 ;;      Temps:          2       0       0       0       0
  9855 ;;      Totals:         4       0       0       0       0
  9856 ;;Total ram usage:        4 bytes
  9857 ;; Hardware stack levels used: 1
  9858 ;; This function calls:
  9859 ;;		Nothing
  9860 ;; This function is called by:
  9861 ;;		_SpeedControl
  9862 ;; This function uses a non-reentrant model
  9863 ;;
  9864                           
  9865     1B33                     _DC_Speed:	
  9866                           ;psect for function _DC_Speed
  9867                           
  9868                           
  9869                           ;Compressor_motor.c: 36:     if(dutyCycle <= 16000000/(16*2000))
  9870                           
  9871                           ;incstack = 0
  9872                           ; Regs used in _DC_Speed: [wreg+status,2+status,0]
  9873     1B33  3001               	movlw	1
  9874     1B34  0271               	subwf	DC_Speed@dutyCycle+1,w
  9875     1B35  30F5               	movlw	245
  9876     1B36  1903               	skipnz
  9877     1B37  0270               	subwf	DC_Speed@dutyCycle,w
  9878     1B38  1803               	skipnc
  9879     1B39  0008               	return
  9880                           
  9881                           ;Compressor_motor.c: 37:     {;Compressor_motor.c: 39:         CCP1CONbits.CCP1Y = (duty
      +                          Cycle) & 1;
  9882     1B3A  0870               	movf	DC_Speed@dutyCycle,w
  9883     1B3B  3901               	andlw	1
  9884     1B3C  00F2               	movwf	??_DC_Speed
  9885     1B3D  0EF2               	swapf	??_DC_Speed,f
  9886     1B3E  0817               	movf	23,w	;volatile
  9887     1B3F  0672               	xorwf	??_DC_Speed,w
  9888     1B40  39EF               	andlw	-17
  9889     1B41  0672               	xorwf	??_DC_Speed,w
  9890     1B42  0097               	movwf	23	;volatile
  9891                           
  9892                           ;Compressor_motor.c: 40:         CCP1CONbits.CCP1X = (dutyCycle) & 2;
  9893     1B43  0870               	movf	DC_Speed@dutyCycle,w
  9894     1B44  3902               	andlw	2
  9895     1B45  00F2               	movwf	??_DC_Speed
  9896     1B46  0EF2               	swapf	??_DC_Speed,f
  9897     1B47  0DF2               	rlf	??_DC_Speed,f
  9898     1B48  0817               	movf	23,w	;volatile
  9899     1B49  0672               	xorwf	??_DC_Speed,w
  9900     1B4A  39DF               	andlw	-33
  9901     1B4B  0672               	xorwf	??_DC_Speed,w
  9902     1B4C  0097               	movwf	23	;volatile
  9903                           
  9904                           ;Compressor_motor.c: 42:         CCPR1L = (dutyCycle) >> 2;
  9905     1B4D  0871               	movf	DC_Speed@dutyCycle+1,w
  9906     1B4E  00F3               	movwf	??_DC_Speed+1
  9907     1B4F  0870               	movf	DC_Speed@dutyCycle,w
  9908     1B50  00F2               	movwf	??_DC_Speed
  9909     1B51  1003               	clrc
  9910     1B52  0CF3               	rrf	??_DC_Speed+1,f
  9911     1B53  0CF2               	rrf	??_DC_Speed,f
  9912     1B54  1003               	clrc
  9913     1B55  0CF3               	rrf	??_DC_Speed+1,f
  9914     1B56  0CF2               	rrf	??_DC_Speed,f
  9915     1B57  0872               	movf	??_DC_Speed,w
  9916     1B58  0095               	movwf	21	;volatile
  9917                           
  9918                           ;Compressor_motor.c: 44:         TMR2ON = 1;
  9919     1B59  1512               	bsf	18,2	;volatile
  9920     1B5A  0008               	return
  9921     1B5B                     __end_of_DC_Speed:
  9922                           
  9923                           	psect	text48
  9924     10CD                     __ptext48:	
  9925 ;; *************** function _Master_SendCommand *****************
  9926 ;; Defined at:
  9927 ;;		line 16 in file "Master_ModbusRTU.c"
  9928 ;; Parameters:    Size  Location     Type
  9929 ;;  sla_add         1    wreg     unsigned char 
  9930 ;;  function        1   12[COMMON] unsigned char 
  9931 ;; Auto vars:     Size  Location     Type
  9932 ;;  sla_add         1    0[BANK0 ] unsigned char 
  9933 ;;  CRC             2    1[BANK0 ] unsigned int 
  9934 ;; Return value:  Size  Location     Type
  9935 ;;                  1    wreg      void 
  9936 ;; Registers used:
  9937 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9938 ;; Tracked objects:
  9939 ;;		On entry : 300/100
  9940 ;;		On exit  : 300/100
  9941 ;;		Unchanged: 0/0
  9942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9943 ;;      Params:         1       0       0       0       0
  9944 ;;      Locals:         0       3       0       0       0
  9945 ;;      Temps:          0       0       0       0       0
  9946 ;;      Totals:         1       3       0       0       0
  9947 ;;Total ram usage:        4 bytes
  9948 ;; Hardware stack levels used: 1
  9949 ;; Hardware stack levels required when called: 2
  9950 ;; This function calls:
  9951 ;;		_CRCcheck
  9952 ;;		_UARTsendString
  9953 ;; This function is called by:
  9954 ;;		_ISR
  9955 ;; This function uses a non-reentrant model
  9956 ;;
  9957                           
  9958     10CD                     _Master_SendCommand:	
  9959                           ;psect for function _Master_SendCommand
  9960                           
  9961                           
  9962                           ;incstack = 0
  9963                           ; Regs used in _Master_SendCommand: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9964                           ;Master_SendCommand@sla_add stored from wreg
  9965     10CD  1283               	bcf	3,5	;RP0=0, select bank0
  9966     10CE  00A0               	movwf	Master_SendCommand@sla_add
  9967                           
  9968                           ;Master_ModbusRTU.c: 17:     if(send == 0){
  9969     10CF  186F               	btfsc	_send/(0+8),_send& (0+7)
  9970     10D0  28F9               	goto	i1l4741
  9971                           
  9972                           ;Master_ModbusRTU.c: 19:         ModbusFrame[0] = sla_add;
  9973     10D1  0820               	movf	Master_SendCommand@sla_add,w
  9974     10D2  1683               	bsf	3,5	;RP0=1, select bank1
  9975     10D3  00E3               	movwf	_ModbusFrame^(0+128)
  9976                           
  9977                           ;Master_ModbusRTU.c: 20:         ModbusFrame[1] = function;
  9978     10D4  087C               	movf	Master_SendCommand@function,w
  9979     10D5  00E4               	movwf	(_ModbusFrame^(0+128)+1)
  9980                           
  9981                           ;Master_ModbusRTU.c: 21:         ModbusFrame[2] = 0x61;
  9982     10D6  3061               	movlw	97
  9983     10D7  00E5               	movwf	(_ModbusFrame^(0+128)+2)
  9984                           
  9985                           ;Master_ModbusRTU.c: 22:         ModbusFrame[3] = 0x62;
  9986     10D8  3062               	movlw	98
  9987     10D9  00E6               	movwf	(_ModbusFrame^(0+128)+3)
  9988                           
  9989                           ;Master_ModbusRTU.c: 23:         ModbusFrame[4] = 0x63;
  9990     10DA  3063               	movlw	99
  9991     10DB  00E7               	movwf	(_ModbusFrame^(0+128)+4)
  9992                           
  9993                           ;Master_ModbusRTU.c: 24:         ModbusFrame[5] = 0x64;
  9994     10DC  3064               	movlw	100
  9995     10DD  00E8               	movwf	(_ModbusFrame^(0+128)+5)
  9996                           
  9997                           ;Master_ModbusRTU.c: 25:         uint16_t CRC = CRCcheck(ModbusFrame,4 + 2);
  9998     10DE  3006               	movlw	6
  9999     10DF  00F0               	movwf	CRCcheck@len
 10000     10E0  30E3               	movlw	(low (_ModbusFrame| 0))& (0+255)
 10001     10E1  120A  118A  27B1  160A  118A  	fcall	_CRCcheck
 10002     10E6  0871               	movf	?_CRCcheck+1,w
 10003     10E7  1283               	bcf	3,5	;RP0=0, select bank0
 10004     10E8  00A2               	movwf	Master_SendCommand@CRC+1
 10005     10E9  0870               	movf	?_CRCcheck,w
 10006     10EA  00A1               	movwf	Master_SendCommand@CRC
 10007                           
 10008                           ;Master_ModbusRTU.c: 26:         ModbusFrame[6] = CRC & 0xFF;
 10009     10EB  0821               	movf	Master_SendCommand@CRC,w
 10010     10EC  1683               	bsf	3,5	;RP0=1, select bank1
 10011     10ED  00E9               	movwf	(_ModbusFrame^(0+128)+6)
 10012                           
 10013                           ;Master_ModbusRTU.c: 27:         ModbusFrame[7] = CRC >> 8;
 10014     10EE  1283               	bcf	3,5	;RP0=0, select bank0
 10015     10EF  0822               	movf	Master_SendCommand@CRC+1,w
 10016     10F0  1683               	bsf	3,5	;RP0=1, select bank1
 10017     10F1  00EA               	movwf	(_ModbusFrame^(0+128)+7)
 10018                           
 10019                           ;Master_ModbusRTU.c: 28:         ModbusFrame[8] = 0x00;
 10020     10F2  01EB               	clrf	(_ModbusFrame^(0+128)+8)
 10021                           
 10022                           ;Master_ModbusRTU.c: 30:         UARTsendString((char*)ModbusFrame);
 10023     10F3  30E3               	movlw	(low (_ModbusFrame| 0))& (0+255)
 10024     10F4  160A  158A  2291   	fcall	_UARTsendString
 10025                           
 10026                           ;Master_ModbusRTU.c: 31:         send = 1;
 10027     10F7  1283               	bcf	3,5	;RP0=0, select bank0
 10028     10F8  146F               	bsf	_send/(0+8),_send& (0+7)
 10029     10F9                     i1l4741:
 10030                           
 10031                           ;Master_ModbusRTU.c: 33:     memory.last_slave = sla_add;
 10032     10F9  0820               	movf	Master_SendCommand@sla_add,w
 10033     10FA  1683               	bsf	3,5	;RP0=1, select bank1
 10034     10FB  00D1               	movwf	_memory^(0+128)
 10035                           
 10036                           ;Master_ModbusRTU.c: 34:     memory.last_function = function;
 10037     10FC  087C               	movf	Master_SendCommand@function,w
 10038     10FD  00D2               	movwf	(_memory^(0+128)+1)
 10039     10FE  0008               	return
 10040     10FF                     __end_of_Master_SendCommand:
 10041                           
 10042                           	psect	text49
 10043     1BB5                     __ptext49:	
 10044 ;; *************** function _Master_DataHandling *****************
 10045 ;; Defined at:
 10046 ;;		line 100 in file "Master_ModbusRTU.c"
 10047 ;; Parameters:    Size  Location     Type
 10048 ;;  buf             1    wreg     PTR unsigned char 
 10049 ;;		 -> rcv_buffer(9), 
 10050 ;; Auto vars:     Size  Location     Type
 10051 ;;  buf             1    9[BANK0 ] PTR unsigned char 
 10052 ;;		 -> rcv_buffer(9), 
 10053 ;;  eframe          2    7[BANK0 ] struct ErrorFrame
 10054 ;; Return value:  Size  Location     Type
 10055 ;;		None               void
 10056 ;; Registers used:
 10057 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10058 ;; Tracked objects:
 10059 ;;		On entry : B00/0
 10060 ;;		On exit  : A00/0
 10061 ;;		Unchanged: 0/0
 10062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10063 ;;      Params:         0       0       0       0       0
 10064 ;;      Locals:         0       3       0       0       0
 10065 ;;      Temps:          0       0       0       0       0
 10066 ;;      Totals:         0       3       0       0       0
 10067 ;;Total ram usage:        3 bytes
 10068 ;; Hardware stack levels used: 1
 10069 ;; Hardware stack levels required when called: 3
 10070 ;; This function calls:
 10071 ;;		_ReceiveData_Check
 10072 ;;		_SendErrorFrame
 10073 ;; This function is called by:
 10074 ;;		_ISR
 10075 ;; This function uses a non-reentrant model
 10076 ;;
 10077                           
 10078     1BB5                     _Master_DataHandling:	
 10079                           ;psect for function _Master_DataHandling
 10080                           
 10081                           
 10082                           ;incstack = 0
 10083                           ; Regs used in _Master_DataHandling: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10084                           ;Master_DataHandling@buf stored from wreg
 10085     1BB5  00A9               	movwf	Master_DataHandling@buf
 10086                           
 10087                           ;Master_ModbusRTU.c: 100: __bit Master_DataHandling(uint8_t *buf);Master_ModbusRTU.c: 10
      +                          1: {;Master_ModbusRTU.c: 102:     if(buf[0] != memory.last_slave){
 10088     1BB6  0829               	movf	Master_DataHandling@buf,w
 10089     1BB7  0084               	movwf	4
 10090     1BB8  0800               	movf	0,w
 10091     1BB9  1683               	bsf	3,5	;RP0=1, select bank1
 10092     1BBA  0651               	xorwf	_memory^(0+128),w
 10093     1BBB  1D03               	btfss	3,2
 10094     1BBC  2BBF               	goto	i1l4775
 10095     1BBD  2BC1               	goto	i1l4779
 10096     1BBE                     i1l4781:
 10097                           
 10098                           ;Master_ModbusRTU.c: 107:         RB1 = 1;
 10099     1BBE  1486               	bsf	6,1	;volatile
 10100     1BBF                     i1l4775:
 10101                           
 10102                           ;Master_ModbusRTU.c: 103:         return 0;
 10103     1BBF  1003               	clrc
 10104     1BC0  0008               	return
 10105     1BC1                     i1l4779:
 10106                           
 10107                           ;Master_ModbusRTU.c: 106:     if((buf[1] & 0x80) == 0x80){
 10108     1BC1  1283               	bcf	3,5	;RP0=0, select bank0
 10109     1BC2  0A29               	incf	Master_DataHandling@buf,w
 10110     1BC3  0084               	movwf	4
 10111     1BC4  1B80               	btfsc	0,7
 10112     1BC5  2BBE               	goto	i1l4781
 10113                           
 10114                           ;Master_ModbusRTU.c: 111:     ErrorFrame eframe = ReceiveData_Check(buf);
 10115     1BC6  0829               	movf	Master_DataHandling@buf,w
 10116     1BC7  160A  158A  23E5  160A  158A  	fcall	_ReceiveData_Check
 10117     1BCC  087D               	movf	?_ReceiveData_Check+1,w
 10118     1BCD  00A8               	movwf	Master_DataHandling@eframe+1
 10119     1BCE  087C               	movf	?_ReceiveData_Check,w
 10120     1BCF  00A7               	movwf	Master_DataHandling@eframe
 10121                           
 10122                           ;Master_ModbusRTU.c: 113:     if(eframe.Function_error == 0x01 || eframe.CRC_error == 0x
      +                          01){
 10123     1BD0  0327               	decf	Master_DataHandling@eframe,w
 10124     1BD1  1D03               	btfss	3,2
 10125     1BD2  0328               	decf	Master_DataHandling@eframe+1,w
 10126     1BD3  1D03               	btfss	3,2
 10127     1BD4  2BE3               	goto	i1l4799
 10128                           
 10129                           ;Master_ModbusRTU.c: 115:         SendErrorFrame(eframe, buf[1]);
 10130     1BD5  0828               	movf	Master_DataHandling@eframe+1,w
 10131     1BD6  00A1               	movwf	SendErrorFrame@Eframe+1
 10132     1BD7  0827               	movf	Master_DataHandling@eframe,w
 10133     1BD8  00A0               	movwf	SendErrorFrame@Eframe
 10134     1BD9  0A29               	incf	Master_DataHandling@buf,w
 10135     1BDA  0084               	movwf	4
 10136     1BDB  0800               	movf	0,w
 10137     1BDC  00A2               	movwf	SendErrorFrame@function
 10138     1BDD  160A  158A  235B  160A  158A  	fcall	_SendErrorFrame
 10139     1BE2  2BBF               	goto	i1l4775
 10140     1BE3                     i1l4799:
 10141                           
 10142                           ;Master_ModbusRTU.c: 119:     return 1;
 10143     1BE3  1403               	setc
 10144     1BE4  0008               	return
 10145     1BE5                     __end_of_Master_DataHandling:
 10146                           
 10147                           	psect	text50
 10148     1B5B                     __ptext50:	
 10149 ;; *************** function _SendErrorFrame *****************
 10150 ;; Defined at:
 10151 ;;		line 80 in file "Master_ModbusRTU.c"
 10152 ;; Parameters:    Size  Location     Type
 10153 ;;  Eframe          2    0[BANK0 ] struct ErrorFrame
 10154 ;;  function        1    2[BANK0 ] unsigned char 
 10155 ;; Auto vars:     Size  Location     Type
 10156 ;;  CRC             2   12[COMMON] unsigned int 
 10157 ;; Return value:  Size  Location     Type
 10158 ;;                  1    wreg      void 
 10159 ;; Registers used:
 10160 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10161 ;; Tracked objects:
 10162 ;;		On entry : B00/0
 10163 ;;		On exit  : B00/0
 10164 ;;		Unchanged: 0/0
 10165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10166 ;;      Params:         0       3       0       0       0
 10167 ;;      Locals:         2       0       0       0       0
 10168 ;;      Temps:          0       0       0       0       0
 10169 ;;      Totals:         2       3       0       0       0
 10170 ;;Total ram usage:        5 bytes
 10171 ;; Hardware stack levels used: 1
 10172 ;; Hardware stack levels required when called: 2
 10173 ;; This function calls:
 10174 ;;		_CRCcheck
 10175 ;;		_UARTsendString
 10176 ;; This function is called by:
 10177 ;;		_Master_DataHandling
 10178 ;; This function uses a non-reentrant model
 10179 ;;
 10180                           
 10181     1B5B                     _SendErrorFrame:	
 10182                           ;psect for function _SendErrorFrame
 10183                           
 10184                           
 10185                           ;Master_ModbusRTU.c: 81:     if(send == 0){
 10186                           
 10187                           ;incstack = 0
 10188                           ; Regs used in _SendErrorFrame: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10189     1B5B  186F               	btfsc	_send/(0+8),_send& (0+7)
 10190     1B5C  0008               	return
 10191                           
 10192                           ;Master_ModbusRTU.c: 83:         ModbusFrame[0] = memory.last_slave;
 10193     1B5D  1683               	bsf	3,5	;RP0=1, select bank1
 10194     1B5E  0851               	movf	_memory^(0+128),w
 10195     1B5F  00E3               	movwf	_ModbusFrame^(0+128)
 10196                           
 10197                           ;Master_ModbusRTU.c: 84:         ModbusFrame[1] = function | 0x80;
 10198     1B60  1283               	bcf	3,5	;RP0=0, select bank0
 10199     1B61  0822               	movf	SendErrorFrame@function,w
 10200     1B62  3880               	iorlw	128
 10201     1B63  1683               	bsf	3,5	;RP0=1, select bank1
 10202     1B64  00E4               	movwf	(_ModbusFrame^(0+128)+1)
 10203                           
 10204                           ;Master_ModbusRTU.c: 85:         ModbusFrame[2] = 0x00;
 10205     1B65  01E5               	clrf	(_ModbusFrame^(0+128)+2)
 10206                           
 10207                           ;Master_ModbusRTU.c: 86:         ModbusFrame[3] = Eframe.Function_error;
 10208     1B66  1283               	bcf	3,5	;RP0=0, select bank0
 10209     1B67  0820               	movf	SendErrorFrame@Eframe,w
 10210     1B68  1683               	bsf	3,5	;RP0=1, select bank1
 10211     1B69  00E6               	movwf	(_ModbusFrame^(0+128)+3)
 10212                           
 10213                           ;Master_ModbusRTU.c: 87:         ModbusFrame[4] = Eframe.CRC_error;
 10214     1B6A  1283               	bcf	3,5	;RP0=0, select bank0
 10215     1B6B  0821               	movf	SendErrorFrame@Eframe+1,w
 10216     1B6C  1683               	bsf	3,5	;RP0=1, select bank1
 10217     1B6D  00E7               	movwf	(_ModbusFrame^(0+128)+4)
 10218                           
 10219                           ;Master_ModbusRTU.c: 88:         ModbusFrame[5] = 0x00;
 10220     1B6E  01E8               	clrf	(_ModbusFrame^(0+128)+5)
 10221                           
 10222                           ;Master_ModbusRTU.c: 89:         uint16_t CRC = CRCcheck(ModbusFrame,4 + 2);
 10223     1B6F  3006               	movlw	6
 10224     1B70  00F0               	movwf	CRCcheck@len
 10225     1B71  30E3               	movlw	(low (_ModbusFrame| 0))& (0+255)
 10226     1B72  120A  118A  27B1  160A  158A  	fcall	_CRCcheck
 10227     1B77  0871               	movf	?_CRCcheck+1,w
 10228     1B78  00FD               	movwf	SendErrorFrame@CRC+1
 10229     1B79  0870               	movf	?_CRCcheck,w
 10230     1B7A  00FC               	movwf	SendErrorFrame@CRC
 10231                           
 10232                           ;Master_ModbusRTU.c: 90:         ModbusFrame[6] = CRC & 0xFF;
 10233     1B7B  087C               	movf	SendErrorFrame@CRC,w
 10234     1B7C  1683               	bsf	3,5	;RP0=1, select bank1
 10235     1B7D  00E9               	movwf	(_ModbusFrame^(0+128)+6)
 10236                           
 10237                           ;Master_ModbusRTU.c: 91:         ModbusFrame[7] = CRC >> 8;
 10238     1B7E  087D               	movf	SendErrorFrame@CRC+1,w
 10239     1B7F  00EA               	movwf	(_ModbusFrame^(0+128)+7)
 10240                           
 10241                           ;Master_ModbusRTU.c: 92:         ModbusFrame[8] = 0x00;
 10242     1B80  01EB               	clrf	(_ModbusFrame^(0+128)+8)
 10243                           
 10244                           ;Master_ModbusRTU.c: 94:         UARTsendString((char*)ModbusFrame);
 10245     1B81  30E3               	movlw	(low (_ModbusFrame| 0))& (0+255)
 10246     1B82  160A  158A  2291   	fcall	_UARTsendString
 10247                           
 10248                           ;Master_ModbusRTU.c: 95:         send = 1;
 10249     1B85  1283               	bcf	3,5	;RP0=0, select bank0
 10250     1B86  146F               	bsf	_send/(0+8),_send& (0+7)
 10251     1B87  0008               	return
 10252     1B88                     __end_of_SendErrorFrame:
 10253                           
 10254                           	psect	text51
 10255     1A91                     __ptext51:	
 10256 ;; *************** function _UARTsendString *****************
 10257 ;; Defined at:
 10258 ;;		line 81 in file "PIC16F877A_UART.c"
 10259 ;; Parameters:    Size  Location     Type
 10260 ;;  str             1    wreg     PTR unsigned char 
 10261 ;;		 -> ModbusFrame(9), 
 10262 ;; Auto vars:     Size  Location     Type
 10263 ;;  str             1    4[COMMON] PTR unsigned char 
 10264 ;;		 -> ModbusFrame(9), 
 10265 ;;  i               2    2[COMMON] int 
 10266 ;; Return value:  Size  Location     Type
 10267 ;;                  1    wreg      void 
 10268 ;; Registers used:
 10269 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10270 ;; Tracked objects:
 10271 ;;		On entry : 300/100
 10272 ;;		On exit  : A00/0
 10273 ;;		Unchanged: 0/0
 10274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10275 ;;      Params:         0       0       0       0       0
 10276 ;;      Locals:         3       0       0       0       0
 10277 ;;      Temps:          1       0       0       0       0
 10278 ;;      Totals:         4       0       0       0       0
 10279 ;;Total ram usage:        4 bytes
 10280 ;; Hardware stack levels used: 1
 10281 ;; Hardware stack levels required when called: 1
 10282 ;; This function calls:
 10283 ;;		_UARTsendChar
 10284 ;; This function is called by:
 10285 ;;		_Master_SendCommand
 10286 ;;		_SendErrorFrame
 10287 ;; This function uses a non-reentrant model
 10288 ;;
 10289                           
 10290     1A91                     _UARTsendString:	
 10291                           ;psect for function _UARTsendString
 10292                           
 10293                           
 10294                           ;incstack = 0
 10295                           ; Regs used in _UARTsendString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10296                           ;UARTsendString@str stored from wreg
 10297     1A91  00F4               	movwf	UARTsendString@str
 10298                           
 10299                           ;PIC16F877A_UART.c: 81: void UARTsendString(char *str);PIC16F877A_UART.c: 82: {;PIC16F87
      +                          7A_UART.c: 83:     for (int i = 0; str[i] != '\0'; ++i)
 10300     1A92  01F2               	clrf	UARTsendString@i
 10301     1A93  01F3               	clrf	UARTsendString@i+1
 10302     1A94                     i1l3803:
 10303     1A94  0872               	movf	UARTsendString@i,w
 10304     1A95  0774               	addwf	UARTsendString@str,w
 10305     1A96  00F1               	movwf	??_UARTsendString
 10306     1A97  0871               	movf	??_UARTsendString,w
 10307     1A98  0084               	movwf	4
 10308     1A99  1383               	bcf	3,7	;select IRP bank0
 10309     1A9A  0800               	movf	0,w
 10310     1A9B  1903               	btfsc	3,2
 10311     1A9C  0008               	return
 10312                           
 10313                           ;PIC16F877A_UART.c: 84:         UARTsendChar(str[i]);
 10314     1A9D  0872               	movf	UARTsendString@i,w
 10315     1A9E  0774               	addwf	UARTsendString@str,w
 10316     1A9F  00F1               	movwf	??_UARTsendString
 10317     1AA0  0871               	movf	??_UARTsendString,w
 10318     1AA1  0084               	movwf	4
 10319     1AA2  0800               	movf	0,w
 10320     1AA3  160A  158A  2156  160A  158A  	fcall	_UARTsendChar
 10321     1AA8  3001               	movlw	1
 10322     1AA9  07F2               	addwf	UARTsendString@i,f
 10323     1AAA  1803               	skipnc
 10324     1AAB  0AF3               	incf	UARTsendString@i+1,f
 10325     1AAC  3000               	movlw	0
 10326     1AAD  07F3               	addwf	UARTsendString@i+1,f
 10327     1AAE  2A94               	goto	i1l3803
 10328     1AAF                     __end_of_UARTsendString:
 10329                           
 10330                           	psect	text52
 10331     1956                     __ptext52:	
 10332 ;; *************** function _UARTsendChar *****************
 10333 ;; Defined at:
 10334 ;;		line 73 in file "PIC16F877A_UART.c"
 10335 ;; Parameters:    Size  Location     Type
 10336 ;;  c               1    wreg     unsigned char 
 10337 ;; Auto vars:     Size  Location     Type
 10338 ;;  c               1    0[COMMON] unsigned char 
 10339 ;; Return value:  Size  Location     Type
 10340 ;;                  1    wreg      void 
 10341 ;; Registers used:
 10342 ;;		wreg
 10343 ;; Tracked objects:
 10344 ;;		On entry : A00/100
 10345 ;;		On exit  : B00/0
 10346 ;;		Unchanged: 800/0
 10347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10348 ;;      Params:         0       0       0       0       0
 10349 ;;      Locals:         1       0       0       0       0
 10350 ;;      Temps:          0       0       0       0       0
 10351 ;;      Totals:         1       0       0       0       0
 10352 ;;Total ram usage:        1 bytes
 10353 ;; Hardware stack levels used: 1
 10354 ;; This function calls:
 10355 ;;		Nothing
 10356 ;; This function is called by:
 10357 ;;		_UARTsendString
 10358 ;; This function uses a non-reentrant model
 10359 ;;
 10360                           
 10361     1956                     _UARTsendChar:	
 10362                           ;psect for function _UARTsendChar
 10363                           
 10364                           
 10365                           ;incstack = 0
 10366                           ; Regs used in _UARTsendChar: [wreg]
 10367                           ;UARTsendChar@c stored from wreg
 10368     1956  00F0               	movwf	UARTsendChar@c
 10369     1957                     i1l294:	
 10370                           ;PIC16F877A_UART.c: 73: void UARTsendChar(char c);PIC16F877A_UART.c: 74: {;PIC16F877A_UA
      +                          RT.c: 76:     while (! TRMT);
 10371                           
 10372     1957  1683               	bsf	3,5	;RP0=1, select bank1
 10373     1958  1C98               	btfss	24,1	;volatile
 10374     1959  2957               	goto	i1l294
 10375                           
 10376                           ;PIC16F877A_UART.c: 77:     TXREG = c;
 10377     195A  0870               	movf	UARTsendChar@c,w
 10378     195B  1283               	bcf	3,5	;RP0=0, select bank0
 10379     195C  0099               	movwf	25	;volatile
 10380     195D  0008               	return
 10381     195E                     __end_of_UARTsendChar:
 10382                           
 10383                           	psect	text53
 10384     1BE5                     __ptext53:	
 10385 ;; *************** function _ReceiveData_Check *****************
 10386 ;; Defined at:
 10387 ;;		line 58 in file "Master_ModbusRTU.c"
 10388 ;; Parameters:    Size  Location     Type
 10389 ;;  str             1    wreg     PTR unsigned char 
 10390 ;;		 -> rcv_buffer(9), 
 10391 ;; Auto vars:     Size  Location     Type
 10392 ;;  str             1    6[BANK0 ] PTR unsigned char 
 10393 ;;		 -> rcv_buffer(9), 
 10394 ;;  eframe          2    4[BANK0 ] struct ErrorFrame
 10395 ;;  CRC             2    2[BANK0 ] unsigned int 
 10396 ;;  CRCH            1    1[BANK0 ] unsigned char 
 10397 ;;  CRCL            1    0[BANK0 ] unsigned char 
 10398 ;; Return value:  Size  Location     Type
 10399 ;;                  2   12[COMMON] struct ErrorFrame
 10400 ;; Registers used:
 10401 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10402 ;; Tracked objects:
 10403 ;;		On entry : B00/0
 10404 ;;		On exit  : B00/0
 10405 ;;		Unchanged: 0/0
 10406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10407 ;;      Params:         2       0       0       0       0
 10408 ;;      Locals:         0       7       0       0       0
 10409 ;;      Temps:          0       0       0       0       0
 10410 ;;      Totals:         2       7       0       0       0
 10411 ;;Total ram usage:        9 bytes
 10412 ;; Hardware stack levels used: 1
 10413 ;; Hardware stack levels required when called: 1
 10414 ;; This function calls:
 10415 ;;		_CRCcheck
 10416 ;; This function is called by:
 10417 ;;		_Master_DataHandling
 10418 ;; This function uses a non-reentrant model
 10419 ;;
 10420                           
 10421     1BE5                     _ReceiveData_Check:	
 10422                           ;psect for function _ReceiveData_Check
 10423                           
 10424                           
 10425                           ;incstack = 0
 10426                           ; Regs used in _ReceiveData_Check: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10427                           ;ReceiveData_Check@str stored from wreg
 10428     1BE5  00A6               	movwf	ReceiveData_Check@str
 10429                           
 10430                           ;Master_ModbusRTU.c: 58: ErrorFrame ReceiveData_Check(uint8_t *str);Master_ModbusRTU.c: 
      +                          59: {;Master_ModbusRTU.c: 60:     ErrorFrame eframe;;Master_ModbusRTU.c: 62:     if(str[
      +                          1] != memory.last_function){
 10431     1BE6  0A26               	incf	ReceiveData_Check@str,w
 10432     1BE7  0084               	movwf	4
 10433     1BE8  0800               	movf	0,w
 10434     1BE9  1683               	bsf	3,5	;RP0=1, select bank1
 10435     1BEA  0652               	xorwf	(_memory^(0+128)+1),w
 10436     1BEB  1903               	skipnz
 10437     1BEC  2BF1               	goto	i1l4605
 10438                           
 10439                           ;Master_ModbusRTU.c: 63:         eframe.Function_error = 1;
 10440     1BED  1283               	bcf	3,5	;RP0=0, select bank0
 10441     1BEE  01A4               	clrf	ReceiveData_Check@eframe
 10442     1BEF  0AA4               	incf	ReceiveData_Check@eframe,f
 10443                           
 10444                           ;Master_ModbusRTU.c: 64:     }else{
 10445     1BF0  2BF3               	goto	i1l4607
 10446     1BF1                     i1l4605:
 10447                           
 10448                           ;Master_ModbusRTU.c: 65:         eframe.Function_error = 0;
 10449     1BF1  1283               	bcf	3,5	;RP0=0, select bank0
 10450     1BF2  01A4               	clrf	ReceiveData_Check@eframe
 10451     1BF3                     i1l4607:
 10452                           
 10453                           ;Master_ModbusRTU.c: 68:     uint16_t CRC = CRCcheck(str, 4 + 2);
 10454     1BF3  3006               	movlw	6
 10455     1BF4  00F0               	movwf	CRCcheck@len
 10456     1BF5  0826               	movf	ReceiveData_Check@str,w
 10457     1BF6  120A  118A  27B1  160A  158A  	fcall	_CRCcheck
 10458     1BFB  0871               	movf	?_CRCcheck+1,w
 10459     1BFC  1283               	bcf	3,5	;RP0=0, select bank0
 10460     1BFD  00A3               	movwf	ReceiveData_Check@CRC+1
 10461     1BFE  0870               	movf	?_CRCcheck,w
 10462     1BFF  00A2               	movwf	ReceiveData_Check@CRC
 10463                           
 10464                           ;Master_ModbusRTU.c: 69:     uint8_t CRCL = CRC & 0xFF;
 10465     1C00  0822               	movf	ReceiveData_Check@CRC,w
 10466     1C01  00A0               	movwf	ReceiveData_Check@CRCL
 10467                           
 10468                           ;Master_ModbusRTU.c: 70:     uint8_t CRCH = CRC >> 8;
 10469     1C02  0823               	movf	ReceiveData_Check@CRC+1,w
 10470     1C03  00A1               	movwf	ReceiveData_Check@CRCH
 10471                           
 10472                           ;Master_ModbusRTU.c: 71:     if(str[6] != CRCL || str[7] != CRCH){
 10473     1C04  0826               	movf	ReceiveData_Check@str,w
 10474     1C05  3E06               	addlw	6
 10475     1C06  0084               	movwf	4
 10476     1C07  1383               	bcf	3,7	;select IRP bank0
 10477     1C08  0800               	movf	0,w
 10478     1C09  0620               	xorwf	ReceiveData_Check@CRCL,w
 10479     1C0A  1D03               	skipz
 10480     1C0B  2C13               	goto	i1l130
 10481     1C0C  0826               	movf	ReceiveData_Check@str,w
 10482     1C0D  3E07               	addlw	7
 10483     1C0E  0084               	movwf	4
 10484     1C0F  0800               	movf	0,w
 10485     1C10  0621               	xorwf	ReceiveData_Check@CRCH,w
 10486     1C11  1903               	skipnz
 10487     1C12  2C16               	goto	i1l4617
 10488     1C13                     i1l130:
 10489                           
 10490                           ;Master_ModbusRTU.c: 72:         eframe.CRC_error = 1;
 10491     1C13  01A5               	clrf	ReceiveData_Check@eframe+1
 10492     1C14  0AA5               	incf	ReceiveData_Check@eframe+1,f
 10493                           
 10494                           ;Master_ModbusRTU.c: 73:     }else{
 10495     1C15  2C17               	goto	i1l4619
 10496     1C16                     i1l4617:
 10497                           
 10498                           ;Master_ModbusRTU.c: 74:         eframe.CRC_error = 0;
 10499     1C16  01A5               	clrf	ReceiveData_Check@eframe+1
 10500     1C17                     i1l4619:
 10501                           
 10502                           ;Master_ModbusRTU.c: 76:     return eframe;
 10503     1C17  0825               	movf	ReceiveData_Check@eframe+1,w
 10504     1C18  00FD               	movwf	?_ReceiveData_Check+1
 10505     1C19  0824               	movf	ReceiveData_Check@eframe,w
 10506     1C1A  00FC               	movwf	?_ReceiveData_Check
 10507     1C1B  0008               	return
 10508     1C1C                     __end_of_ReceiveData_Check:
 10509                           
 10510                           	psect	text54
 10511     07B1                     __ptext54:	
 10512 ;; *************** function _CRCcheck *****************
 10513 ;; Defined at:
 10514 ;;		line 38 in file "Master_ModbusRTU.c"
 10515 ;; Parameters:    Size  Location     Type
 10516 ;;  buf             1    wreg     PTR unsigned char 
 10517 ;;		 -> ModbusFrame(9), rcv_buffer(9), 
 10518 ;;  len             1    0[COMMON] unsigned char 
 10519 ;; Auto vars:     Size  Location     Type
 10520 ;;  buf             1    5[COMMON] PTR unsigned char 
 10521 ;;		 -> ModbusFrame(9), rcv_buffer(9), 
 10522 ;;  index           2    8[COMMON] unsigned int 
 10523 ;;  pos             2    6[COMMON] unsigned int 
 10524 ;;  crc             2   10[COMMON] unsigned int 
 10525 ;; Return value:  Size  Location     Type
 10526 ;;                  2    0[COMMON] unsigned int 
 10527 ;; Registers used:
 10528 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10529 ;; Tracked objects:
 10530 ;;		On entry : 200/100
 10531 ;;		On exit  : 200/0
 10532 ;;		Unchanged: 200/0
 10533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10534 ;;      Params:         2       0       0       0       0
 10535 ;;      Locals:         7       0       0       0       0
 10536 ;;      Temps:          3       0       0       0       0
 10537 ;;      Totals:        12       0       0       0       0
 10538 ;;Total ram usage:       12 bytes
 10539 ;; Hardware stack levels used: 1
 10540 ;; This function calls:
 10541 ;;		Nothing
 10542 ;; This function is called by:
 10543 ;;		_Master_SendCommand
 10544 ;;		_ReceiveData_Check
 10545 ;;		_SendErrorFrame
 10546 ;; This function uses a non-reentrant model
 10547 ;;
 10548                           
 10549     07B1                     _CRCcheck:	
 10550                           ;psect for function _CRCcheck
 10551                           
 10552                           
 10553                           ;incstack = 0
 10554                           ; Regs used in _CRCcheck: [wreg-fsr0h+status,2+status,0]
 10555                           ;CRCcheck@buf stored from wreg
 10556     07B1  00F5               	movwf	CRCcheck@buf
 10557                           
 10558                           ;Master_ModbusRTU.c: 39:     uint16_t crc = 0xFFFF;
 10559     07B2  30FF               	movlw	255
 10560     07B3  00FA               	movwf	CRCcheck@crc
 10561     07B4  30FF               	movlw	255
 10562     07B5  00FB               	movwf	CRCcheck@crc+1
 10563                           
 10564                           ;Master_ModbusRTU.c: 40:     for (uint16_t pos = 0; pos < len; pos++)
 10565     07B6  01F6               	clrf	CRCcheck@pos
 10566     07B7  01F7               	clrf	CRCcheck@pos+1
 10567     07B8                     i1l116:
 10568     07B8  0870               	movf	CRCcheck@len,w
 10569     07B9  00F2               	movwf	??_CRCcheck
 10570     07BA  01F3               	clrf	??_CRCcheck+1
 10571     07BB  0873               	movf	??_CRCcheck+1,w
 10572     07BC  0277               	subwf	CRCcheck@pos+1,w
 10573     07BD  1D03               	skipz
 10574     07BE  2FC1               	goto	u519_25
 10575     07BF  0872               	movf	??_CRCcheck,w
 10576     07C0  0276               	subwf	CRCcheck@pos,w
 10577     07C1                     u519_25:
 10578     07C1  1803               	btfsc	3,0
 10579     07C2  2FFA               	goto	i1l3793
 10580                           
 10581                           ;Master_ModbusRTU.c: 41:     {;Master_ModbusRTU.c: 42:         crc ^= (unsigned int)buf[
      +                          pos];
 10582     07C3  0876               	movf	CRCcheck@pos,w
 10583     07C4  0775               	addwf	CRCcheck@buf,w
 10584     07C5  00F2               	movwf	??_CRCcheck
 10585     07C6  0872               	movf	??_CRCcheck,w
 10586     07C7  0084               	movwf	4
 10587     07C8  1383               	bcf	3,7	;select IRP bank0
 10588     07C9  0800               	movf	0,w
 10589     07CA  00F3               	movwf	??_CRCcheck+1
 10590     07CB  01F4               	clrf	??_CRCcheck+2
 10591     07CC  0873               	movf	??_CRCcheck+1,w
 10592     07CD  06FA               	xorwf	CRCcheck@crc,f
 10593     07CE  0874               	movf	??_CRCcheck+2,w
 10594     07CF  06FB               	xorwf	CRCcheck@crc+1,f
 10595                           
 10596                           ;Master_ModbusRTU.c: 43:         for (uint16_t index = 8; index != 0; index--)
 10597     07D0  3008               	movlw	8
 10598     07D1  00F8               	movwf	CRCcheck@index
 10599     07D2  3000               	movlw	0
 10600     07D3  00F9               	movwf	CRCcheck@index+1
 10601     07D4                     i1l118:
 10602                           
 10603                           ;Master_ModbusRTU.c: 44:         {;Master_ModbusRTU.c: 45:             if ((crc & 0x0001
      +                          ) != 0){
 10604     07D4  1C7A               	btfss	CRCcheck@crc,0
 10605     07D5  2FE2               	goto	i1l3785
 10606                           
 10607                           ;Master_ModbusRTU.c: 46:                 crc >>= 1;
 10608     07D6  3001               	movlw	1
 10609     07D7                     u516_25:
 10610     07D7  1003               	clrc
 10611     07D8  0CFB               	rrf	CRCcheck@crc+1,f
 10612     07D9  0CFA               	rrf	CRCcheck@crc,f
 10613     07DA  3EFF               	addlw	-1
 10614     07DB  1D03               	skipz
 10615     07DC  2FD7               	goto	u516_25
 10616                           
 10617                           ;Master_ModbusRTU.c: 47:                 crc ^= 0xA001;
 10618     07DD  3001               	movlw	1
 10619     07DE  06FA               	xorwf	CRCcheck@crc,f
 10620     07DF  30A0               	movlw	160
 10621     07E0  06FB               	xorwf	CRCcheck@crc+1,f
 10622                           
 10623                           ;Master_ModbusRTU.c: 48:             }
 10624     07E1  2FE9               	goto	i1l3787
 10625     07E2                     i1l3785:
 10626                           
 10627                           ;Master_ModbusRTU.c: 50:                 crc >>= 1;
 10628     07E2  3001               	movlw	1
 10629     07E3                     u517_25:
 10630     07E3  1003               	clrc
 10631     07E4  0CFB               	rrf	CRCcheck@crc+1,f
 10632     07E5  0CFA               	rrf	CRCcheck@crc,f
 10633     07E6  3EFF               	addlw	-1
 10634     07E7  1D03               	skipz
 10635     07E8  2FE3               	goto	u517_25
 10636     07E9                     i1l3787:
 10637                           
 10638                           ;Master_ModbusRTU.c: 51:         }
 10639     07E9  3001               	movlw	1
 10640     07EA  02F8               	subwf	CRCcheck@index,f
 10641     07EB  3000               	movlw	0
 10642     07EC  1C03               	skipc
 10643     07ED  03F9               	decf	CRCcheck@index+1,f
 10644     07EE  02F9               	subwf	CRCcheck@index+1,f
 10645     07EF  0878               	movf	CRCcheck@index,w
 10646     07F0  0479               	iorwf	CRCcheck@index+1,w
 10647     07F1  1D03               	btfss	3,2
 10648     07F2  2FD4               	goto	i1l118
 10649                           
 10650                           ;Master_ModbusRTU.c: 52:     }
 10651     07F3  3001               	movlw	1
 10652     07F4  07F6               	addwf	CRCcheck@pos,f
 10653     07F5  1803               	skipnc
 10654     07F6  0AF7               	incf	CRCcheck@pos+1,f
 10655     07F7  3000               	movlw	0
 10656     07F8  07F7               	addwf	CRCcheck@pos+1,f
 10657     07F9  2FB8               	goto	i1l116
 10658     07FA                     i1l3793:
 10659                           
 10660                           ;Master_ModbusRTU.c: 54:     return crc;
 10661     07FA  087B               	movf	CRCcheck@crc+1,w
 10662     07FB  00F1               	movwf	?_CRCcheck+1
 10663     07FC  087A               	movf	CRCcheck@crc,w
 10664     07FD  00F0               	movwf	?_CRCcheck
 10665     07FE  0008               	return
 10666     07FF                     __end_of_CRCcheck:
 10667                           
 10668                           	psect	text55
 10669     1C1C                     __ptext55:	
 10670 ;; *************** function _HCH1000_freqToHumidity *****************
 10671 ;; Defined at:
 10672 ;;		line 81 in file "RS485_Master.c"
 10673 ;; Parameters:    Size  Location     Type
 10674 ;;  freq            2   72[BANK0 ] unsigned int 
 10675 ;; Auto vars:     Size  Location     Type
 10676 ;;		None
 10677 ;; Return value:  Size  Location     Type
 10678 ;;                  3   72[BANK0 ] float 
 10679 ;; Registers used:
 10680 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 10681 ;; Tracked objects:
 10682 ;;		On entry : 300/0
 10683 ;;		On exit  : 300/0
 10684 ;;		Unchanged: 0/0
 10685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10686 ;;      Params:         0       3       0       0       0
 10687 ;;      Locals:         0       0       0       0       0
 10688 ;;      Temps:          0       0       0       0       0
 10689 ;;      Totals:         0       3       0       0       0
 10690 ;;Total ram usage:        3 bytes
 10691 ;; Hardware stack levels used: 1
 10692 ;; Hardware stack levels required when called: 2
 10693 ;; This function calls:
 10694 ;;		___flmul
 10695 ;;		___flsub
 10696 ;;		___xxtofl
 10697 ;; This function is called by:
 10698 ;;		_ISR
 10699 ;; This function uses a non-reentrant model
 10700 ;;
 10701                           
 10702     1C1C                     _HCH1000_freqToHumidity:	
 10703                           ;psect for function _HCH1000_freqToHumidity
 10704                           
 10705                           
 10706                           ;RS485_Master.c: 81: float HCH1000_freqToHumidity(uint16_t freq);RS485_Master.c: 82: {;R
      +                          S485_Master.c: 83:     return 565.1 - 0.076725 * freq;
 10707                           
 10708                           ;incstack = 0
 10709                           ; Regs used in _HCH1000_freqToHumidity: [wreg+status,2+status,0+btemp+1+pclath+cstack]
 10710     1C1C  303D               	movlw	61
 10711     1C1D  00A3               	movwf	___flmul@b+3
 10712     1C1E  309D               	movlw	157
 10713     1C1F  00A2               	movwf	___flmul@b+2
 10714     1C20  3021               	movlw	33
 10715     1C21  00A1               	movwf	___flmul@b+1
 10716     1C22  30FF               	movlw	255
 10717     1C23  00A0               	movwf	___flmul@b
 10718     1C24  0868               	movf	HCH1000_freqToHumidity@freq,w
 10719     1C25  00F0               	movwf	___xxtofl@val
 10720     1C26  0869               	movf	HCH1000_freqToHumidity@freq+1,w
 10721     1C27  00F1               	movwf	___xxtofl@val+1
 10722     1C28  01F2               	clrf	___xxtofl@val+2
 10723     1C29  01F3               	clrf	___xxtofl@val+3
 10724     1C2A  3000               	movlw	0
 10725     1C2B  160A  118A  23B6  160A  158A  	fcall	___xxtofl
 10726     1C30  0873               	movf	?___xxtofl+3,w
 10727     1C31  1283               	bcf	3,5	;RP0=0, select bank0
 10728     1C32  00A7               	movwf	___flmul@a+3
 10729     1C33  0872               	movf	?___xxtofl+2,w
 10730     1C34  00A6               	movwf	___flmul@a+2
 10731     1C35  0871               	movf	?___xxtofl+1,w
 10732     1C36  00A5               	movwf	___flmul@a+1
 10733     1C37  0870               	movf	?___xxtofl,w
 10734     1C38  00A4               	movwf	___flmul@a
 10735     1C39  120A  158A  21F9  160A  158A  	fcall	___flmul
 10736     1C3E  0823               	movf	?___flmul+3,w
 10737     1C3F  00E3               	movwf	___flsub@a+3
 10738     1C40  0822               	movf	?___flmul+2,w
 10739     1C41  00E2               	movwf	___flsub@a+2
 10740     1C42  0821               	movf	?___flmul+1,w
 10741     1C43  00E1               	movwf	___flsub@a+1
 10742     1C44  0820               	movf	?___flmul,w
 10743     1C45  00E0               	movwf	___flsub@a
 10744     1C46  3044               	movlw	68
 10745     1C47  00E7               	movwf	___flsub@b+3
 10746     1C48  300D               	movlw	13
 10747     1C49  00E6               	movwf	___flsub@b+2
 10748     1C4A  3046               	movlw	70
 10749     1C4B  00E5               	movwf	___flsub@b+1
 10750     1C4C  3066               	movlw	102
 10751     1C4D  00E4               	movwf	___flsub@b
 10752     1C4E  160A  158A  2273   	fcall	___flsub
 10753     1C51  0861               	movf	?___flsub+1,w
 10754     1C52  00E8               	movwf	?_HCH1000_freqToHumidity
 10755     1C53  0862               	movf	?___flsub+2,w
 10756     1C54  00E9               	movwf	?_HCH1000_freqToHumidity+1
 10757     1C55  0863               	movf	?___flsub+3,w
 10758     1C56  00EA               	movwf	?_HCH1000_freqToHumidity+2
 10759     1C57  0008               	return
 10760     1C58                     __end_of_HCH1000_freqToHumidity:
 10761                           
 10762                           	psect	text56
 10763     13B6                     __ptext56:	
 10764 ;; *************** function ___xxtofl *****************
 10765 ;; Defined at:
 10766 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\xxtofl.c"
 10767 ;; Parameters:    Size  Location     Type
 10768 ;;  sign            1    wreg     unsigned char 
 10769 ;;  val             4    0[COMMON] long 
 10770 ;; Auto vars:     Size  Location     Type
 10771 ;;  sign            1    8[COMMON] unsigned char 
 10772 ;;  arg             4   10[COMMON] unsigned long 
 10773 ;;  exp             1    9[COMMON] unsigned char 
 10774 ;; Return value:  Size  Location     Type
 10775 ;;                  4    0[COMMON] unsigned char 
 10776 ;; Registers used:
 10777 ;;		wreg, status,2, status,0, btemp+1
 10778 ;; Tracked objects:
 10779 ;;		On entry : 200/100
 10780 ;;		On exit  : 200/0
 10781 ;;		Unchanged: 200/0
 10782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10783 ;;      Params:         4       0       0       0       0
 10784 ;;      Locals:         6       0       0       0       0
 10785 ;;      Temps:          4       0       0       0       0
 10786 ;;      Totals:        14       0       0       0       0
 10787 ;;Total ram usage:       14 bytes
 10788 ;; Hardware stack levels used: 1
 10789 ;; This function calls:
 10790 ;;		Nothing
 10791 ;; This function is called by:
 10792 ;;		_HCH1000_freqToHumidity
 10793 ;;		_TC72_toFloat
 10794 ;;		_sprintf
 10795 ;; This function uses a non-reentrant model
 10796 ;;
 10797                           
 10798     13B6                     ___xxtofl:	
 10799                           ;psect for function ___xxtofl
 10800                           
 10801                           
 10802                           ;incstack = 0
 10803                           ; Regs used in ___xxtofl: [wreg+status,2+status,0+btemp+1]
 10804                           ;___xxtofl@sign stored from wreg
 10805     13B6  00F8               	movwf	___xxtofl@sign
 10806     13B7  0878               	movf	___xxtofl@sign,w
 10807     13B8  1D03               	btfss	3,2
 10808     13B9  1FF3               	btfss	___xxtofl@val+3,7
 10809     13BA  2BCB               	goto	i1l4277
 10810     13BB  0970               	comf	___xxtofl@val,w
 10811     13BC  00FA               	movwf	___xxtofl@arg
 10812     13BD  0971               	comf	___xxtofl@val+1,w
 10813     13BE  00FB               	movwf	___xxtofl@arg+1
 10814     13BF  0972               	comf	___xxtofl@val+2,w
 10815     13C0  00FC               	movwf	___xxtofl@arg+2
 10816     13C1  0973               	comf	___xxtofl@val+3,w
 10817     13C2  00FD               	movwf	___xxtofl@arg+3
 10818     13C3  0AFA               	incf	___xxtofl@arg,f
 10819     13C4  1903               	skipnz
 10820     13C5  0AFB               	incf	___xxtofl@arg+1,f
 10821     13C6  1903               	skipnz
 10822     13C7  0AFC               	incf	___xxtofl@arg+2,f
 10823     13C8  1903               	skipnz
 10824     13C9  0AFD               	incf	___xxtofl@arg+3,f
 10825     13CA  2BD3               	goto	i1l1185
 10826     13CB                     i1l4277:
 10827     13CB  0873               	movf	___xxtofl@val+3,w
 10828     13CC  00FD               	movwf	___xxtofl@arg+3
 10829     13CD  0872               	movf	___xxtofl@val+2,w
 10830     13CE  00FC               	movwf	___xxtofl@arg+2
 10831     13CF  0871               	movf	___xxtofl@val+1,w
 10832     13D0  00FB               	movwf	___xxtofl@arg+1
 10833     13D1  0870               	movf	___xxtofl@val,w
 10834     13D2  00FA               	movwf	___xxtofl@arg
 10835     13D3                     i1l1185:
 10836     13D3  0873               	movf	___xxtofl@val+3,w
 10837     13D4  0472               	iorwf	___xxtofl@val+2,w
 10838     13D5  0471               	iorwf	___xxtofl@val+1,w
 10839     13D6  0470               	iorwf	___xxtofl@val,w
 10840     13D7  1D03               	skipz
 10841     13D8  2BE2               	goto	i1l4283
 10842     13D9  3000               	movlw	0
 10843     13DA  00F3               	movwf	?___xxtofl+3
 10844     13DB  3000               	movlw	0
 10845     13DC  00F2               	movwf	?___xxtofl+2
 10846     13DD  3000               	movlw	0
 10847     13DE  00F1               	movwf	?___xxtofl+1
 10848     13DF  3000               	movlw	0
 10849     13E0  00F0               	movwf	?___xxtofl
 10850     13E1  0008               	return
 10851     13E2                     i1l4283:
 10852     13E2  3096               	movlw	150
 10853     13E3  00F9               	movwf	___xxtofl@exp
 10854     13E4                     i1l4289:
 10855     13E4  30FE               	movlw	254
 10856     13E5  057D               	andwf	___xxtofl@arg+3,w
 10857     13E6  1903               	btfsc	3,2
 10858     13E7  2C11               	goto	i1l4297
 10859     13E8  3001               	movlw	1
 10860     13E9  00FF               	movwf	127
 10861     13EA  087F               	movf	127,w
 10862     13EB  07F9               	addwf	___xxtofl@exp,f
 10863     13EC  3001               	movlw	1
 10864     13ED                     u643_25:
 10865     13ED  1003               	clrc
 10866     13EE  0CFD               	rrf	___xxtofl@arg+3,f
 10867     13EF  0CFC               	rrf	___xxtofl@arg+2,f
 10868     13F0  0CFB               	rrf	___xxtofl@arg+1,f
 10869     13F1  0CFA               	rrf	___xxtofl@arg,f
 10870     13F2  3EFF               	addlw	-1
 10871     13F3  1D03               	skipz
 10872     13F4  2BED               	goto	u643_25
 10873     13F5  2BE4               	goto	i1l4289
 10874     13F6                     i1l4291:
 10875     13F6  3001               	movlw	1
 10876     13F7  00FF               	movwf	127
 10877     13F8  087F               	movf	127,w
 10878     13F9  07F9               	addwf	___xxtofl@exp,f
 10879     13FA  3001               	movlw	1
 10880     13FB  07FA               	addwf	___xxtofl@arg,f
 10881     13FC  3000               	movlw	0
 10882     13FD  1803               	skipnc
 10883     13FE  3001               	movlw	1
 10884     13FF  07FB               	addwf	___xxtofl@arg+1,f
 10885     1400  3000               	movlw	0
 10886     1401  1803               	skipnc
 10887     1402  3001               	movlw	1
 10888     1403  07FC               	addwf	___xxtofl@arg+2,f
 10889     1404  3000               	movlw	0
 10890     1405  1803               	skipnc
 10891     1406  3001               	movlw	1
 10892     1407  07FD               	addwf	___xxtofl@arg+3,f
 10893     1408  3001               	movlw	1
 10894     1409                     u645_25:
 10895     1409  1003               	clrc
 10896     140A  0CFD               	rrf	___xxtofl@arg+3,f
 10897     140B  0CFC               	rrf	___xxtofl@arg+2,f
 10898     140C  0CFB               	rrf	___xxtofl@arg+1,f
 10899     140D  0CFA               	rrf	___xxtofl@arg,f
 10900     140E  3EFF               	addlw	-1
 10901     140F  1D03               	skipz
 10902     1410  2C09               	goto	u645_25
 10903     1411                     i1l4297:
 10904     1411  30FF               	movlw	255
 10905     1412  057D               	andwf	___xxtofl@arg+3,w
 10906     1413  1903               	btfsc	3,2
 10907     1414  2C25               	goto	i1l4301
 10908     1415  2BF6               	goto	i1l4291
 10909     1416                     i1l4303:
 10910     1416  3002               	movlw	2
 10911     1417  0279               	subwf	___xxtofl@exp,w
 10912     1418  1C03               	btfss	3,0
 10913     1419  2C27               	goto	i1l1198
 10914     141A  3001               	movlw	1
 10915     141B  02F9               	subwf	___xxtofl@exp,f
 10916     141C  3001               	movlw	1
 10917     141D  00F4               	movwf	??___xxtofl
 10918     141E                     u647_25:
 10919     141E  1003               	clrc
 10920     141F  0DFA               	rlf	___xxtofl@arg,f
 10921     1420  0DFB               	rlf	___xxtofl@arg+1,f
 10922     1421  0DFC               	rlf	___xxtofl@arg+2,f
 10923     1422  0DFD               	rlf	___xxtofl@arg+3,f
 10924     1423  0BF4               	decfsz	??___xxtofl,f
 10925     1424  2C1E               	goto	u647_25
 10926     1425                     i1l4301:
 10927     1425  1FFC               	btfss	___xxtofl@arg+2,7
 10928     1426  2C16               	goto	i1l4303
 10929     1427                     i1l1198:
 10930     1427  1879               	btfsc	___xxtofl@exp,0
 10931     1428  2C31               	goto	i1l1199
 10932     1429  30FF               	movlw	255
 10933     142A  05FA               	andwf	___xxtofl@arg,f
 10934     142B  30FF               	movlw	255
 10935     142C  05FB               	andwf	___xxtofl@arg+1,f
 10936     142D  307F               	movlw	127
 10937     142E  05FC               	andwf	___xxtofl@arg+2,f
 10938     142F  30FF               	movlw	255
 10939     1430  05FD               	andwf	___xxtofl@arg+3,f
 10940     1431                     i1l1199:
 10941     1431  1003               	clrc
 10942     1432  0CF9               	rrf	___xxtofl@exp,f
 10943     1433  0879               	movf	___xxtofl@exp,w
 10944     1434  00F4               	movwf	??___xxtofl
 10945     1435  01F5               	clrf	??___xxtofl+1
 10946     1436  01F6               	clrf	??___xxtofl+2
 10947     1437  01F7               	clrf	??___xxtofl+3
 10948     1438  3018               	movlw	24
 10949     1439                     u651_25:
 10950     1439  1003               	clrc
 10951     143A  0DF4               	rlf	??___xxtofl,f
 10952     143B  0DF5               	rlf	??___xxtofl+1,f
 10953     143C  0DF6               	rlf	??___xxtofl+2,f
 10954     143D  0DF7               	rlf	??___xxtofl+3,f
 10955     143E  3EFF               	addlw	-1
 10956     143F  1D03               	skipz
 10957     1440  2C39               	goto	u651_25
 10958     1441  0874               	movf	??___xxtofl,w
 10959     1442  04FA               	iorwf	___xxtofl@arg,f
 10960     1443  0875               	movf	??___xxtofl+1,w
 10961     1444  04FB               	iorwf	___xxtofl@arg+1,f
 10962     1445  0876               	movf	??___xxtofl+2,w
 10963     1446  04FC               	iorwf	___xxtofl@arg+2,f
 10964     1447  0877               	movf	??___xxtofl+3,w
 10965     1448  04FD               	iorwf	___xxtofl@arg+3,f
 10966     1449  0878               	movf	___xxtofl@sign,w
 10967     144A  1D03               	btfss	3,2
 10968     144B  1FF3               	btfss	___xxtofl@val+3,7
 10969     144C  2C4E               	goto	i1l4315
 10970     144D  17FD               	bsf	___xxtofl@arg+3,7
 10971     144E                     i1l4315:
 10972     144E  087D               	movf	___xxtofl@arg+3,w
 10973     144F  00F3               	movwf	?___xxtofl+3
 10974     1450  087C               	movf	___xxtofl@arg+2,w
 10975     1451  00F2               	movwf	?___xxtofl+2
 10976     1452  087B               	movf	___xxtofl@arg+1,w
 10977     1453  00F1               	movwf	?___xxtofl+1
 10978     1454  087A               	movf	___xxtofl@arg,w
 10979     1455  00F0               	movwf	?___xxtofl
 10980     1456  0008               	return
 10981     1457                     __end_of___xxtofl:
 10982                           
 10983                           	psect	text57
 10984     1A73                     __ptext57:	
 10985 ;; *************** function ___flsub *****************
 10986 ;; Defined at:
 10987 ;;		line 242 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\sprcadd.c"
 10988 ;; Parameters:    Size  Location     Type
 10989 ;;  a               4   64[BANK0 ] unsigned char 
 10990 ;;  b               4   68[BANK0 ] unsigned char 
 10991 ;; Auto vars:     Size  Location     Type
 10992 ;;		None
 10993 ;; Return value:  Size  Location     Type
 10994 ;;                  4   64[BANK0 ] unsigned char 
 10995 ;; Registers used:
 10996 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 10997 ;; Tracked objects:
 10998 ;;		On entry : 300/0
 10999 ;;		On exit  : 300/0
 11000 ;;		Unchanged: 0/0
 11001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11002 ;;      Params:         0       8       0       0       0
 11003 ;;      Locals:         0       0       0       0       0
 11004 ;;      Temps:          0       0       0       0       0
 11005 ;;      Totals:         0       8       0       0       0
 11006 ;;Total ram usage:        8 bytes
 11007 ;; Hardware stack levels used: 1
 11008 ;; Hardware stack levels required when called: 1
 11009 ;; This function calls:
 11010 ;;		___fladd
 11011 ;; This function is called by:
 11012 ;;		_HCH1000_freqToHumidity
 11013 ;;		_sprintf
 11014 ;; This function uses a non-reentrant model
 11015 ;;
 11016                           
 11017     1A73                     ___flsub:	
 11018                           ;psect for function ___flsub
 11019                           
 11020                           
 11021                           ;incstack = 0
 11022                           ; Regs used in ___flsub: [wreg+status,2+status,0+btemp+1+pclath+cstack]
 11023     1A73  3080               	movlw	128
 11024     1A74  06E3               	xorwf	___flsub@a+3,f
 11025     1A75  0867               	movf	___flsub@b+3,w
 11026     1A76  00CF               	movwf	___fladd@b+3
 11027     1A77  0866               	movf	___flsub@b+2,w
 11028     1A78  00CE               	movwf	___fladd@b+2
 11029     1A79  0865               	movf	___flsub@b+1,w
 11030     1A7A  00CD               	movwf	___fladd@b+1
 11031     1A7B  0864               	movf	___flsub@b,w
 11032     1A7C  00CC               	movwf	___fladd@b
 11033     1A7D  0863               	movf	___flsub@a+3,w
 11034     1A7E  00D3               	movwf	___fladd@a+3
 11035     1A7F  0862               	movf	___flsub@a+2,w
 11036     1A80  00D2               	movwf	___fladd@a+2
 11037     1A81  0861               	movf	___flsub@a+1,w
 11038     1A82  00D1               	movwf	___fladd@a+1
 11039     1A83  0860               	movf	___flsub@a,w
 11040     1A84  00D0               	movwf	___fladd@a
 11041     1A85  120A  118A  25B4   	fcall	___fladd
 11042     1A88  084F               	movf	?___fladd+3,w
 11043     1A89  00E3               	movwf	?___flsub+3
 11044     1A8A  084E               	movf	?___fladd+2,w
 11045     1A8B  00E2               	movwf	?___flsub+2
 11046     1A8C  084D               	movf	?___fladd+1,w
 11047     1A8D  00E1               	movwf	?___flsub+1
 11048     1A8E  084C               	movf	?___fladd,w
 11049     1A8F  00E0               	movwf	?___flsub
 11050     1A90  0008               	return
 11051     1A91                     __end_of___flsub:
 11052                           
 11053                           	psect	text58
 11054     05B4                     __ptext58:	
 11055 ;; *************** function ___fladd *****************
 11056 ;; Defined at:
 11057 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\sprcadd.c"
 11058 ;; Parameters:    Size  Location     Type
 11059 ;;  b               4   44[BANK0 ] unsigned char 
 11060 ;;  a               4   48[BANK0 ] unsigned char 
 11061 ;; Auto vars:     Size  Location     Type
 11062 ;;  grs             1   63[BANK0 ] unsigned char 
 11063 ;;  bexp            1   62[BANK0 ] unsigned char 
 11064 ;;  aexp            1   61[BANK0 ] unsigned char 
 11065 ;;  signs           1   60[BANK0 ] unsigned char 
 11066 ;; Return value:  Size  Location     Type
 11067 ;;                  4   44[BANK0 ] unsigned char 
 11068 ;; Registers used:
 11069 ;;		wreg, status,2, status,0, btemp+1
 11070 ;; Tracked objects:
 11071 ;;		On entry : 300/0
 11072 ;;		On exit  : 300/0
 11073 ;;		Unchanged: 0/0
 11074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11075 ;;      Params:         0       8       0       0       0
 11076 ;;      Locals:         0       4       0       0       0
 11077 ;;      Temps:          0       8       0       0       0
 11078 ;;      Totals:         0      20       0       0       0
 11079 ;;Total ram usage:       20 bytes
 11080 ;; Hardware stack levels used: 1
 11081 ;; This function calls:
 11082 ;;		Nothing
 11083 ;; This function is called by:
 11084 ;;		_sprintf
 11085 ;;		___flsub
 11086 ;; This function uses a non-reentrant model
 11087 ;;
 11088                           
 11089     05B4                     ___fladd:	
 11090                           ;psect for function ___fladd
 11091                           
 11092                           
 11093                           ;incstack = 0
 11094                           ; Regs used in ___fladd: [wreg+status,2+status,0+btemp+1]
 11095     05B4  084F               	movf	___fladd@b+3,w
 11096     05B5  3980               	andlw	128
 11097     05B6  00DC               	movwf	___fladd@signs
 11098     05B7  084F               	movf	___fladd@b+3,w
 11099     05B8  00D4               	movwf	??___fladd
 11100     05B9  0754               	addwf	??___fladd,w
 11101     05BA  00DE               	movwf	___fladd@bexp
 11102     05BB  1BCE               	btfsc	___fladd@b+2,7
 11103     05BC  145E               	bsf	___fladd@bexp,0
 11104     05BD  085E               	movf	___fladd@bexp,w
 11105     05BE  1903               	btfsc	3,2
 11106     05BF  2DCE               	goto	i1l3435
 11107     05C0  0A5E               	incf	___fladd@bexp,w
 11108     05C1  1D03               	btfss	3,2
 11109     05C2  2DCB               	goto	i1l3431
 11110     05C3  3000               	movlw	0
 11111     05C4  00CF               	movwf	___fladd@b+3
 11112     05C5  3000               	movlw	0
 11113     05C6  00CE               	movwf	___fladd@b+2
 11114     05C7  3000               	movlw	0
 11115     05C8  00CD               	movwf	___fladd@b+1
 11116     05C9  3000               	movlw	0
 11117     05CA  00CC               	movwf	___fladd@b
 11118     05CB                     i1l3431:
 11119     05CB  17CE               	bsf	___fladd@b+2,7
 11120     05CC  01CF               	clrf	___fladd@b+3
 11121     05CD  2DD6               	goto	i1l3437
 11122     05CE                     i1l3435:
 11123     05CE  3000               	movlw	0
 11124     05CF  00CF               	movwf	___fladd@b+3
 11125     05D0  3000               	movlw	0
 11126     05D1  00CE               	movwf	___fladd@b+2
 11127     05D2  3000               	movlw	0
 11128     05D3  00CD               	movwf	___fladd@b+1
 11129     05D4  3000               	movlw	0
 11130     05D5  00CC               	movwf	___fladd@b
 11131     05D6                     i1l3437:
 11132     05D6  0853               	movf	___fladd@a+3,w
 11133     05D7  3980               	andlw	128
 11134     05D8  00DD               	movwf	___fladd@aexp
 11135     05D9  085D               	movf	___fladd@aexp,w
 11136     05DA  065C               	xorwf	___fladd@signs,w
 11137     05DB  1D03               	btfss	3,2
 11138     05DC  175C               	bsf	___fladd@signs,6
 11139     05DD  0853               	movf	___fladd@a+3,w
 11140     05DE  00D4               	movwf	??___fladd
 11141     05DF  0754               	addwf	??___fladd,w
 11142     05E0  00DD               	movwf	___fladd@aexp
 11143     05E1  1BD2               	btfsc	___fladd@a+2,7
 11144     05E2  145D               	bsf	___fladd@aexp,0
 11145     05E3  085D               	movf	___fladd@aexp,w
 11146     05E4  1903               	btfsc	3,2
 11147     05E5  2DF4               	goto	i1l3459
 11148     05E6  0A5D               	incf	___fladd@aexp,w
 11149     05E7  1D03               	btfss	3,2
 11150     05E8  2DF1               	goto	i1l3455
 11151     05E9  3000               	movlw	0
 11152     05EA  00D3               	movwf	___fladd@a+3
 11153     05EB  3000               	movlw	0
 11154     05EC  00D2               	movwf	___fladd@a+2
 11155     05ED  3000               	movlw	0
 11156     05EE  00D1               	movwf	___fladd@a+1
 11157     05EF  3000               	movlw	0
 11158     05F0  00D0               	movwf	___fladd@a
 11159     05F1                     i1l3455:
 11160     05F1  17D2               	bsf	___fladd@a+2,7
 11161     05F2  01D3               	clrf	___fladd@a+3
 11162     05F3  2DFC               	goto	i1l1045
 11163     05F4                     i1l3459:
 11164     05F4  3000               	movlw	0
 11165     05F5  00D3               	movwf	___fladd@a+3
 11166     05F6  3000               	movlw	0
 11167     05F7  00D2               	movwf	___fladd@a+2
 11168     05F8  3000               	movlw	0
 11169     05F9  00D1               	movwf	___fladd@a+1
 11170     05FA  3000               	movlw	0
 11171     05FB  00D0               	movwf	___fladd@a
 11172     05FC                     i1l1045:
 11173     05FC  085E               	movf	___fladd@bexp,w
 11174     05FD  025D               	subwf	___fladd@aexp,w
 11175     05FE  1803               	skipnc
 11176     05FF  2E24               	goto	i1l3495
 11177     0600  1F5C               	btfss	___fladd@signs,6
 11178     0601  2E06               	goto	i1l3465
 11179     0602  3080               	movlw	128
 11180     0603  00FF               	movwf	127
 11181     0604  087F               	movf	127,w
 11182     0605  06DC               	xorwf	___fladd@signs,f
 11183     0606                     i1l3465:
 11184     0606  085E               	movf	___fladd@bexp,w
 11185     0607  00DF               	movwf	___fladd@grs
 11186     0608  085D               	movf	___fladd@aexp,w
 11187     0609  00DE               	movwf	___fladd@bexp
 11188     060A  085F               	movf	___fladd@grs,w
 11189     060B  00DD               	movwf	___fladd@aexp
 11190     060C  084C               	movf	___fladd@b,w
 11191     060D  00DF               	movwf	___fladd@grs
 11192     060E  0850               	movf	___fladd@a,w
 11193     060F  00CC               	movwf	___fladd@b
 11194     0610  085F               	movf	___fladd@grs,w
 11195     0611  00D0               	movwf	___fladd@a
 11196     0612  084D               	movf	___fladd@b+1,w
 11197     0613  00DF               	movwf	___fladd@grs
 11198     0614  0851               	movf	___fladd@a+1,w
 11199     0615  00CD               	movwf	___fladd@b+1
 11200     0616  085F               	movf	___fladd@grs,w
 11201     0617  00D1               	movwf	___fladd@a+1
 11202     0618  084E               	movf	___fladd@b+2,w
 11203     0619  00DF               	movwf	___fladd@grs
 11204     061A  0852               	movf	___fladd@a+2,w
 11205     061B  00CE               	movwf	___fladd@b+2
 11206     061C  085F               	movf	___fladd@grs,w
 11207     061D  00D2               	movwf	___fladd@a+2
 11208     061E  084F               	movf	___fladd@b+3,w
 11209     061F  00DF               	movwf	___fladd@grs
 11210     0620  0853               	movf	___fladd@a+3,w
 11211     0621  00CF               	movwf	___fladd@b+3
 11212     0622  085F               	movf	___fladd@grs,w
 11213     0623  00D3               	movwf	___fladd@a+3
 11214     0624                     i1l3495:
 11215     0624  01DF               	clrf	___fladd@grs
 11216     0625  085D               	movf	___fladd@aexp,w
 11217     0626  00D4               	movwf	??___fladd
 11218     0627  01D5               	clrf	??___fladd+1
 11219     0628  0855               	movf	??___fladd+1,w
 11220     0629  00D7               	movwf	??___fladd+3
 11221     062A  085E               	movf	___fladd@bexp,w
 11222     062B  0254               	subwf	??___fladd,w
 11223     062C  00D6               	movwf	??___fladd+2
 11224     062D  1C03               	skipc
 11225     062E  03D7               	decf	??___fladd+3,f
 11226     062F  0857               	movf	??___fladd+3,w
 11227     0630  3A80               	xorlw	128
 11228     0631  00FF               	movwf	127
 11229     0632  3080               	movlw	128
 11230     0633  027F               	subwf	127,w
 11231     0634  1D03               	skipz
 11232     0635  2E38               	goto	u438_25
 11233     0636  301A               	movlw	26
 11234     0637  0256               	subwf	??___fladd+2,w
 11235     0638                     u438_25:
 11236     0638  1C03               	skipc
 11237     0639  2E6B               	goto	i1l3513
 11238     063A  1283               	bcf	3,5	;RP0=0, select bank0
 11239     063B  1303               	bcf	3,6	;RP1=0, select bank0
 11240     063C  084F               	movf	___fladd@b+3,w
 11241     063D  044E               	iorwf	___fladd@b+2,w
 11242     063E  044D               	iorwf	___fladd@b+1,w
 11243     063F  044C               	iorwf	___fladd@b,w
 11244     0640  1903               	btfsc	3,2
 11245     0641  2E44               	goto	u439_20
 11246     0642  3001               	movlw	1
 11247     0643  2E45               	goto	u440_20
 11248     0644                     u439_20:
 11249     0644  3000               	movlw	0
 11250     0645                     u440_20:
 11251     0645  00DF               	movwf	___fladd@grs
 11252     0646  3000               	movlw	0
 11253     0647  00CF               	movwf	___fladd@b+3
 11254     0648  3000               	movlw	0
 11255     0649  00CE               	movwf	___fladd@b+2
 11256     064A  3000               	movlw	0
 11257     064B  00CD               	movwf	___fladd@b+1
 11258     064C  3000               	movlw	0
 11259     064D  00CC               	movwf	___fladd@b
 11260     064E  085D               	movf	___fladd@aexp,w
 11261     064F  00DE               	movwf	___fladd@bexp
 11262     0650  2E71               	goto	i1l1049
 11263     0651                     i1l1051:
 11264     0651  1C5F               	btfss	___fladd@grs,0
 11265     0652  2E5A               	goto	i1l3503
 11266     0653  085F               	movf	___fladd@grs,w
 11267     0654  00D4               	movwf	??___fladd
 11268     0655  1003               	clrc
 11269     0656  0C54               	rrf	??___fladd,w
 11270     0657  3801               	iorlw	1
 11271     0658  00DF               	movwf	___fladd@grs
 11272     0659  2E5C               	goto	i1l3505
 11273     065A                     i1l3503:
 11274     065A  1003               	clrc
 11275     065B  0CDF               	rrf	___fladd@grs,f
 11276     065C                     i1l3505:
 11277     065C  184C               	btfsc	___fladd@b,0
 11278     065D  17DF               	bsf	___fladd@grs,7
 11279     065E  3001               	movlw	1
 11280     065F  00D4               	movwf	??___fladd
 11281     0660                     u443_25:
 11282     0660  0D4F               	rlf	___fladd@b+3,w
 11283     0661  0CCF               	rrf	___fladd@b+3,f
 11284     0662  0CCE               	rrf	___fladd@b+2,f
 11285     0663  0CCD               	rrf	___fladd@b+1,f
 11286     0664  0CCC               	rrf	___fladd@b,f
 11287     0665  0BD4               	decfsz	??___fladd& (0+127),f
 11288     0666  2E60               	goto	u443_25
 11289     0667  3001               	movlw	1
 11290     0668  00FF               	movwf	127
 11291     0669  087F               	movf	127,w
 11292     066A  07DE               	addwf	___fladd@bexp,f
 11293     066B                     i1l3513:
 11294     066B  1283               	bcf	3,5	;RP0=0, select bank0
 11295     066C  1303               	bcf	3,6	;RP1=0, select bank0
 11296     066D  085D               	movf	___fladd@aexp,w
 11297     066E  025E               	subwf	___fladd@bexp,w
 11298     066F  1C03               	skipc
 11299     0670  2E51               	goto	i1l1051
 11300     0671                     i1l1049:
 11301     0671  1B5C               	btfsc	___fladd@signs,6
 11302     0672  2EB0               	goto	i1l3539
 11303     0673  085E               	movf	___fladd@bexp,w
 11304     0674  1D03               	btfss	3,2
 11305     0675  2E7F               	goto	i1l3521
 11306     0676  3000               	movlw	0
 11307     0677  00CF               	movwf	?___fladd+3
 11308     0678  3000               	movlw	0
 11309     0679  00CE               	movwf	?___fladd+2
 11310     067A  3000               	movlw	0
 11311     067B  00CD               	movwf	?___fladd+1
 11312     067C  3000               	movlw	0
 11313     067D  00CC               	movwf	?___fladd
 11314     067E  0008               	return
 11315     067F                     i1l3521:
 11316     067F  0850               	movf	___fladd@a,w
 11317     0680  07CC               	addwf	___fladd@b,f
 11318     0681  0851               	movf	___fladd@a+1,w
 11319     0682  1103               	clrz
 11320     0683  1803               	skipnc
 11321     0684  3E01               	addlw	1
 11322     0685  1D03               	btfss	3,2
 11323     0686  07CD               	addwf	___fladd@b+1,f
 11324     0687  0852               	movf	___fladd@a+2,w
 11325     0688  1103               	clrz
 11326     0689  1803               	skipnc
 11327     068A  3E01               	addlw	1
 11328     068B  1D03               	btfss	3,2
 11329     068C  07CE               	addwf	___fladd@b+2,f
 11330     068D  0853               	movf	___fladd@a+3,w
 11331     068E  1103               	clrz
 11332     068F  1803               	skipnc
 11333     0690  3E01               	addlw	1
 11334     0691  1D03               	btfss	3,2
 11335     0692  07CF               	addwf	___fladd@b+3,f
 11336     0693  1C4F               	btfss	___fladd@b+3,0
 11337     0694  2F52               	goto	i1l3575
 11338     0695  1C5F               	btfss	___fladd@grs,0
 11339     0696  2E9E               	goto	i1l3529
 11340     0697  085F               	movf	___fladd@grs,w
 11341     0698  00D4               	movwf	??___fladd
 11342     0699  1003               	clrc
 11343     069A  0C54               	rrf	??___fladd,w
 11344     069B  3801               	iorlw	1
 11345     069C  00DF               	movwf	___fladd@grs
 11346     069D  2EA0               	goto	i1l3531
 11347     069E                     i1l3529:
 11348     069E  1003               	clrc
 11349     069F  0CDF               	rrf	___fladd@grs,f
 11350     06A0                     i1l3531:
 11351     06A0  184C               	btfsc	___fladd@b,0
 11352     06A1  17DF               	bsf	___fladd@grs,7
 11353     06A2  3001               	movlw	1
 11354     06A3  00D4               	movwf	??___fladd
 11355     06A4                     u451_25:
 11356     06A4  0D4F               	rlf	___fladd@b+3,w
 11357     06A5  0CCF               	rrf	___fladd@b+3,f
 11358     06A6  0CCE               	rrf	___fladd@b+2,f
 11359     06A7  0CCD               	rrf	___fladd@b+1,f
 11360     06A8  0CCC               	rrf	___fladd@b,f
 11361     06A9  0BD4               	decfsz	??___fladd& (0+127),f
 11362     06AA  2EA4               	goto	u451_25
 11363     06AB  3001               	movlw	1
 11364     06AC  00FF               	movwf	127
 11365     06AD  087F               	movf	127,w
 11366     06AE  07DE               	addwf	___fladd@bexp,f
 11367     06AF  2F52               	goto	i1l3575
 11368     06B0                     i1l3539:
 11369     06B0  084F               	movf	___fladd@b+3,w
 11370     06B1  3A80               	xorlw	128
 11371     06B2  00FF               	movwf	127
 11372     06B3  0853               	movf	___fladd@a+3,w
 11373     06B4  3A80               	xorlw	128
 11374     06B5  027F               	subwf	127,w
 11375     06B6  1D03               	skipz
 11376     06B7  2EC2               	goto	u452_23
 11377     06B8  0852               	movf	___fladd@a+2,w
 11378     06B9  024E               	subwf	___fladd@b+2,w
 11379     06BA  1D03               	skipz
 11380     06BB  2EC2               	goto	u452_23
 11381     06BC  0851               	movf	___fladd@a+1,w
 11382     06BD  024D               	subwf	___fladd@b+1,w
 11383     06BE  1D03               	skipz
 11384     06BF  2EC2               	goto	u452_23
 11385     06C0  0850               	movf	___fladd@a,w
 11386     06C1  024C               	subwf	___fladd@b,w
 11387     06C2                     u452_23:
 11388     06C2  1803               	skipnc
 11389     06C3  2F1A               	goto	i1l3551
 11390     06C4  30FF               	movlw	255
 11391     06C5  00D4               	movwf	??___fladd
 11392     06C6  30FF               	movlw	255
 11393     06C7  00D5               	movwf	??___fladd+1
 11394     06C8  30FF               	movlw	255
 11395     06C9  00D6               	movwf	??___fladd+2
 11396     06CA  30FF               	movlw	255
 11397     06CB  00D7               	movwf	??___fladd+3
 11398     06CC  0850               	movf	___fladd@a,w
 11399     06CD  00D8               	movwf	??___fladd+4
 11400     06CE  0851               	movf	___fladd@a+1,w
 11401     06CF  00D9               	movwf	??___fladd+5
 11402     06D0  0852               	movf	___fladd@a+2,w
 11403     06D1  00DA               	movwf	??___fladd+6
 11404     06D2  0853               	movf	___fladd@a+3,w
 11405     06D3  00DB               	movwf	??___fladd+7
 11406     06D4  084C               	movf	___fladd@b,w
 11407     06D5  02D8               	subwf	??___fladd+4,f
 11408     06D6  084D               	movf	___fladd@b+1,w
 11409     06D7  1C03               	skipc
 11410     06D8  0F4D               	incfsz	___fladd@b+1,w
 11411     06D9  2EDB               	goto	u453_21
 11412     06DA  2EDC               	goto	u453_22
 11413     06DB                     u453_21:
 11414     06DB  02D9               	subwf	??___fladd+5,f
 11415     06DC                     u453_22:
 11416     06DC  084E               	movf	___fladd@b+2,w
 11417     06DD  1C03               	skipc
 11418     06DE  0F4E               	incfsz	___fladd@b+2,w
 11419     06DF  2EE1               	goto	u453_23
 11420     06E0  2EE2               	goto	u453_24
 11421     06E1                     u453_23:
 11422     06E1  02DA               	subwf	??___fladd+6,f
 11423     06E2                     u453_24:
 11424     06E2  084F               	movf	___fladd@b+3,w
 11425     06E3  1C03               	skipc
 11426     06E4  0F4F               	incfsz	___fladd@b+3,w
 11427     06E5  2EE7               	goto	u453_25
 11428     06E6  2EE8               	goto	u453_26
 11429     06E7                     u453_25:
 11430     06E7  02DB               	subwf	??___fladd+7,f
 11431     06E8                     u453_26:
 11432     06E8  0858               	movf	??___fladd+4,w
 11433     06E9  07D4               	addwf	??___fladd,f
 11434     06EA  0859               	movf	??___fladd+5,w
 11435     06EB  1803               	skipnc
 11436     06EC  0F59               	incfsz	??___fladd+5,w
 11437     06ED  2EEF               	goto	u454_20
 11438     06EE  2EF0               	goto	u454_21
 11439     06EF                     u454_20:
 11440     06EF  07D5               	addwf	??___fladd+1,f
 11441     06F0                     u454_21:
 11442     06F0  085A               	movf	??___fladd+6,w
 11443     06F1  1803               	skipnc
 11444     06F2  0F5A               	incfsz	??___fladd+6,w
 11445     06F3  2EF5               	goto	u454_22
 11446     06F4  2EF6               	goto	u454_23
 11447     06F5                     u454_22:
 11448     06F5  07D6               	addwf	??___fladd+2,f
 11449     06F6                     u454_23:
 11450     06F6  085B               	movf	??___fladd+7,w
 11451     06F7  1803               	skipnc
 11452     06F8  0A5B               	incf	??___fladd+7,w
 11453     06F9  07D7               	addwf	??___fladd+3,f
 11454     06FA  0857               	movf	??___fladd+3,w
 11455     06FB  00CF               	movwf	___fladd@b+3
 11456     06FC  0856               	movf	??___fladd+2,w
 11457     06FD  00CE               	movwf	___fladd@b+2
 11458     06FE  0855               	movf	??___fladd+1,w
 11459     06FF  00CD               	movwf	___fladd@b+1
 11460     0700  0854               	movf	??___fladd,w
 11461     0701  00CC               	movwf	___fladd@b
 11462     0702  3080               	movlw	128
 11463     0703  00FF               	movwf	127
 11464     0704  087F               	movf	127,w
 11465     0705  06DC               	xorwf	___fladd@signs,f
 11466     0706  09DF               	comf	___fladd@grs,f
 11467     0707  0ADF               	incf	___fladd@grs,f
 11468     0708  085F               	movf	___fladd@grs,w
 11469     0709  1D03               	btfss	3,2
 11470     070A  2F28               	goto	i1l1066
 11471     070B  3001               	movlw	1
 11472     070C  07CC               	addwf	___fladd@b,f
 11473     070D  3000               	movlw	0
 11474     070E  1803               	skipnc
 11475     070F  3001               	movlw	1
 11476     0710  07CD               	addwf	___fladd@b+1,f
 11477     0711  3000               	movlw	0
 11478     0712  1803               	skipnc
 11479     0713  3001               	movlw	1
 11480     0714  07CE               	addwf	___fladd@b+2,f
 11481     0715  3000               	movlw	0
 11482     0716  1803               	skipnc
 11483     0717  3001               	movlw	1
 11484     0718  07CF               	addwf	___fladd@b+3,f
 11485     0719  2F28               	goto	i1l1066
 11486     071A                     i1l3551:
 11487     071A  0850               	movf	___fladd@a,w
 11488     071B  02CC               	subwf	___fladd@b,f
 11489     071C  0851               	movf	___fladd@a+1,w
 11490     071D  1C03               	skipc
 11491     071E  0F51               	incfsz	___fladd@a+1,w
 11492     071F  02CD               	subwf	___fladd@b+1,f
 11493     0720  0852               	movf	___fladd@a+2,w
 11494     0721  1C03               	skipc
 11495     0722  0F52               	incfsz	___fladd@a+2,w
 11496     0723  02CE               	subwf	___fladd@b+2,f
 11497     0724  0853               	movf	___fladd@a+3,w
 11498     0725  1C03               	skipc
 11499     0726  0F53               	incfsz	___fladd@a+3,w
 11500     0727  02CF               	subwf	___fladd@b+3,f
 11501     0728                     i1l1066:
 11502     0728  084F               	movf	___fladd@b+3,w
 11503     0729  044E               	iorwf	___fladd@b+2,w
 11504     072A  044D               	iorwf	___fladd@b+1,w
 11505     072B  044C               	iorwf	___fladd@b,w
 11506     072C  1D03               	skipz
 11507     072D  2F50               	goto	i1l3573
 11508     072E  085F               	movf	___fladd@grs,w
 11509     072F  1D03               	btfss	3,2
 11510     0730  2F50               	goto	i1l3573
 11511     0731  3000               	movlw	0
 11512     0732  00CF               	movwf	?___fladd+3
 11513     0733  3000               	movlw	0
 11514     0734  00CE               	movwf	?___fladd+2
 11515     0735  3000               	movlw	0
 11516     0736  00CD               	movwf	?___fladd+1
 11517     0737  3000               	movlw	0
 11518     0738  00CC               	movwf	?___fladd
 11519     0739  0008               	return
 11520     073A                     i1l3559:
 11521     073A  3001               	movlw	1
 11522     073B  00D4               	movwf	??___fladd
 11523     073C                     u458_25:
 11524     073C  1003               	clrc
 11525     073D  0DCC               	rlf	___fladd@b,f
 11526     073E  0DCD               	rlf	___fladd@b+1,f
 11527     073F  0DCE               	rlf	___fladd@b+2,f
 11528     0740  0DCF               	rlf	___fladd@b+3,f
 11529     0741  0BD4               	decfsz	??___fladd,f
 11530     0742  2F3C               	goto	u458_25
 11531     0743  1BDF               	btfsc	___fladd@grs,7
 11532     0744  144C               	bsf	___fladd@b,0
 11533     0745  1C5F               	btfss	___fladd@grs,0
 11534     0746  2F49               	goto	i1l3567
 11535     0747  1403               	setc
 11536     0748  2F4A               	goto	L10
 11537     0749                     i1l3567:
 11538     0749  1003               	clrc
 11539     074A                     L10:
 11540     074A  0DDF               	rlf	___fladd@grs,f
 11541     074B  085E               	movf	___fladd@bexp,w
 11542     074C  1903               	btfsc	3,2
 11543     074D  2F50               	goto	i1l3573
 11544     074E  3001               	movlw	1
 11545     074F  02DE               	subwf	___fladd@bexp,f
 11546     0750                     i1l3573:
 11547     0750  1FCE               	btfss	___fladd@b+2,7
 11548     0751  2F3A               	goto	i1l3559
 11549     0752                     i1l3575:
 11550     0752  01DD               	clrf	___fladd@aexp
 11551     0753  1FDF               	btfss	___fladd@grs,7
 11552     0754  2F5D               	goto	i1l3585
 11553     0755  085F               	movf	___fladd@grs,w
 11554     0756  397F               	andlw	127
 11555     0757  1903               	btfsc	3,2
 11556     0758  184C               	btfsc	___fladd@b,0
 11557     0759  2F5B               	goto	i1l3581
 11558     075A  2F5D               	goto	i1l3585
 11559     075B                     i1l3581:
 11560     075B  01DD               	clrf	___fladd@aexp
 11561     075C  0ADD               	incf	___fladd@aexp,f
 11562     075D                     i1l3585:
 11563     075D  085D               	movf	___fladd@aexp,w
 11564     075E  1903               	btfsc	3,2
 11565     075F  2F90               	goto	i1l3595
 11566     0760  3001               	movlw	1
 11567     0761  07CC               	addwf	___fladd@b,f
 11568     0762  3000               	movlw	0
 11569     0763  1803               	skipnc
 11570     0764  3001               	movlw	1
 11571     0765  07CD               	addwf	___fladd@b+1,f
 11572     0766  3000               	movlw	0
 11573     0767  1803               	skipnc
 11574     0768  3001               	movlw	1
 11575     0769  07CE               	addwf	___fladd@b+2,f
 11576     076A  3000               	movlw	0
 11577     076B  1803               	skipnc
 11578     076C  3001               	movlw	1
 11579     076D  07CF               	addwf	___fladd@b+3,f
 11580     076E  1C4F               	btfss	___fladd@b+3,0
 11581     076F  2F90               	goto	i1l3595
 11582     0770  084C               	movf	___fladd@b,w
 11583     0771  00D4               	movwf	??___fladd
 11584     0772  084D               	movf	___fladd@b+1,w
 11585     0773  00D5               	movwf	??___fladd+1
 11586     0774  084E               	movf	___fladd@b+2,w
 11587     0775  00D6               	movwf	??___fladd+2
 11588     0776  084F               	movf	___fladd@b+3,w
 11589     0777  00D7               	movwf	??___fladd+3
 11590     0778  3001               	movlw	1
 11591     0779  00D8               	movwf	??___fladd+4
 11592     077A                     u468_25:
 11593     077A  0D57               	rlf	??___fladd+3,w
 11594     077B  0CD7               	rrf	??___fladd+3,f
 11595     077C  0CD6               	rrf	??___fladd+2,f
 11596     077D  0CD5               	rrf	??___fladd+1,f
 11597     077E  0CD4               	rrf	??___fladd,f
 11598     077F  0BD8               	decfsz	??___fladd+4,f
 11599     0780  2F7A               	goto	u468_25
 11600     0781  0857               	movf	??___fladd+3,w
 11601     0782  00CF               	movwf	___fladd@b+3
 11602     0783  0856               	movf	??___fladd+2,w
 11603     0784  00CE               	movwf	___fladd@b+2
 11604     0785  0855               	movf	??___fladd+1,w
 11605     0786  00CD               	movwf	___fladd@b+1
 11606     0787  0854               	movf	??___fladd,w
 11607     0788  00CC               	movwf	___fladd@b
 11608     0789  0A5E               	incf	___fladd@bexp,w
 11609     078A  1903               	btfsc	3,2
 11610     078B  2F90               	goto	i1l3595
 11611     078C  3001               	movlw	1
 11612     078D  00FF               	movwf	127
 11613     078E  087F               	movf	127,w
 11614     078F  07DE               	addwf	___fladd@bexp,f
 11615     0790                     i1l3595:
 11616     0790  0A5E               	incf	___fladd@bexp,w
 11617     0791  1D03               	btfss	3,2
 11618     0792  085E               	movf	___fladd@bexp,w
 11619     0793  1D03               	btfss	3,2
 11620     0794  2FA0               	goto	i1l3605
 11621     0795  3000               	movlw	0
 11622     0796  00CF               	movwf	___fladd@b+3
 11623     0797  3000               	movlw	0
 11624     0798  00CE               	movwf	___fladd@b+2
 11625     0799  3000               	movlw	0
 11626     079A  00CD               	movwf	___fladd@b+1
 11627     079B  3000               	movlw	0
 11628     079C  00CC               	movwf	___fladd@b
 11629     079D  085E               	movf	___fladd@bexp,w
 11630     079E  1903               	btfsc	3,2
 11631     079F  01DC               	clrf	___fladd@signs
 11632     07A0                     i1l3605:
 11633     07A0  1C5E               	btfss	___fladd@bexp,0
 11634     07A1  2FA4               	goto	i1l3609
 11635     07A2  17CE               	bsf	___fladd@b+2,7
 11636     07A3  2FA8               	goto	i1l3611
 11637     07A4                     i1l3609:
 11638     07A4  307F               	movlw	127
 11639     07A5  00FF               	movwf	127
 11640     07A6  087F               	movf	127,w
 11641     07A7  05CE               	andwf	___fladd@b+2,f
 11642     07A8                     i1l3611:
 11643     07A8  085E               	movf	___fladd@bexp,w
 11644     07A9  00D4               	movwf	??___fladd
 11645     07AA  1003               	clrc
 11646     07AB  0C54               	rrf	??___fladd,w
 11647     07AC  00CF               	movwf	___fladd@b+3
 11648     07AD  1FDC               	btfss	___fladd@signs,7
 11649     07AE  0008               	return
 11650     07AF  17CF               	bsf	___fladd@b+3,7
 11651     07B0  0008               	return
 11652     07B1                     __end_of___fladd:
 11653                           
 11654                           	psect	text59
 11655     09F9                     __ptext59:	
 11656 ;; *************** function ___flmul *****************
 11657 ;; Defined at:
 11658 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\sprcmul.c"
 11659 ;; Parameters:    Size  Location     Type
 11660 ;;  b               4    0[BANK0 ] unsigned char 
 11661 ;;  a               4    4[BANK0 ] unsigned char 
 11662 ;; Auto vars:     Size  Location     Type
 11663 ;;  prod            4   20[BANK0 ] struct .
 11664 ;;  grs             4   15[BANK0 ] unsigned long 
 11665 ;;  temp            2   24[BANK0 ] struct .
 11666 ;;  bexp            1   19[BANK0 ] unsigned char 
 11667 ;;  aexp            1   14[BANK0 ] unsigned char 
 11668 ;;  sign            1   13[BANK0 ] unsigned char 
 11669 ;; Return value:  Size  Location     Type
 11670 ;;                  4    0[BANK0 ] unsigned char 
 11671 ;; Registers used:
 11672 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 11673 ;; Tracked objects:
 11674 ;;		On entry : 300/0
 11675 ;;		On exit  : 300/0
 11676 ;;		Unchanged: 0/0
 11677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11678 ;;      Params:         0       8       0       0       0
 11679 ;;      Locals:         0      13       0       0       0
 11680 ;;      Temps:          0       5       0       0       0
 11681 ;;      Totals:         0      26       0       0       0
 11682 ;;Total ram usage:       26 bytes
 11683 ;; Hardware stack levels used: 1
 11684 ;; Hardware stack levels required when called: 1
 11685 ;; This function calls:
 11686 ;;		__Umul8_16
 11687 ;; This function is called by:
 11688 ;;		_HCH1000_freqToHumidity
 11689 ;;		_TC72_toFloat
 11690 ;;		_fround
 11691 ;;		_scale
 11692 ;;		_sprintf
 11693 ;; This function uses a non-reentrant model
 11694 ;;
 11695                           
 11696     09F9                     ___flmul:	
 11697                           ;psect for function ___flmul
 11698                           
 11699                           
 11700                           ;incstack = 0
 11701 ;; hardware stack exceeded
 11702                           ; Regs used in ___flmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
 11703     09F9  0823               	movf	___flmul@b+3,w
 11704     09FA  3980               	andlw	128
 11705     09FB  00AD               	movwf	___flmul@sign
 11706     09FC  0823               	movf	___flmul@b+3,w
 11707     09FD  00A8               	movwf	??___flmul
 11708     09FE  0728               	addwf	??___flmul,w
 11709     09FF  00B3               	movwf	___flmul@bexp
 11710     0A00  1BA2               	btfsc	___flmul@b+2,7
 11711     0A01  1433               	bsf	___flmul@bexp,0
 11712     0A02  0833               	movf	___flmul@bexp,w
 11713     0A03  1903               	btfsc	3,2
 11714     0A04  2A12               	goto	i1l3633
 11715     0A05  0A33               	incf	___flmul@bexp,w
 11716     0A06  1D03               	btfss	3,2
 11717     0A07  2A10               	goto	i1l3631
 11718     0A08  3000               	movlw	0
 11719     0A09  00A3               	movwf	___flmul@b+3
 11720     0A0A  3000               	movlw	0
 11721     0A0B  00A2               	movwf	___flmul@b+2
 11722     0A0C  3000               	movlw	0
 11723     0A0D  00A1               	movwf	___flmul@b+1
 11724     0A0E  3000               	movlw	0
 11725     0A0F  00A0               	movwf	___flmul@b
 11726     0A10                     i1l3631:
 11727     0A10  17A2               	bsf	___flmul@b+2,7
 11728     0A11  2A1A               	goto	i1l3635
 11729     0A12                     i1l3633:
 11730     0A12  3000               	movlw	0
 11731     0A13  00A3               	movwf	___flmul@b+3
 11732     0A14  3000               	movlw	0
 11733     0A15  00A2               	movwf	___flmul@b+2
 11734     0A16  3000               	movlw	0
 11735     0A17  00A1               	movwf	___flmul@b+1
 11736     0A18  3000               	movlw	0
 11737     0A19  00A0               	movwf	___flmul@b
 11738     0A1A                     i1l3635:
 11739     0A1A  0827               	movf	___flmul@a+3,w
 11740     0A1B  3980               	andlw	128
 11741     0A1C  00FF               	movwf	127
 11742     0A1D  087F               	movf	127,w
 11743     0A1E  06AD               	xorwf	___flmul@sign,f
 11744     0A1F  0827               	movf	___flmul@a+3,w
 11745     0A20  00A8               	movwf	??___flmul
 11746     0A21  0728               	addwf	??___flmul,w
 11747     0A22  00AE               	movwf	___flmul@aexp
 11748     0A23  1BA6               	btfsc	___flmul@a+2,7
 11749     0A24  142E               	bsf	___flmul@aexp,0
 11750     0A25  082E               	movf	___flmul@aexp,w
 11751     0A26  1903               	btfsc	3,2
 11752     0A27  2A35               	goto	i1l3651
 11753     0A28  0A2E               	incf	___flmul@aexp,w
 11754     0A29  1D03               	btfss	3,2
 11755     0A2A  2A33               	goto	i1l3649
 11756     0A2B  3000               	movlw	0
 11757     0A2C  00A7               	movwf	___flmul@a+3
 11758     0A2D  3000               	movlw	0
 11759     0A2E  00A6               	movwf	___flmul@a+2
 11760     0A2F  3000               	movlw	0
 11761     0A30  00A5               	movwf	___flmul@a+1
 11762     0A31  3000               	movlw	0
 11763     0A32  00A4               	movwf	___flmul@a
 11764     0A33                     i1l3649:
 11765     0A33  17A6               	bsf	___flmul@a+2,7
 11766     0A34  2A3D               	goto	i1l3653
 11767     0A35                     i1l3651:
 11768     0A35  3000               	movlw	0
 11769     0A36  00A7               	movwf	___flmul@a+3
 11770     0A37  3000               	movlw	0
 11771     0A38  00A6               	movwf	___flmul@a+2
 11772     0A39  3000               	movlw	0
 11773     0A3A  00A5               	movwf	___flmul@a+1
 11774     0A3B  3000               	movlw	0
 11775     0A3C  00A4               	movwf	___flmul@a
 11776     0A3D                     i1l3653:
 11777     0A3D  082E               	movf	___flmul@aexp,w
 11778     0A3E  1D03               	btfss	3,2
 11779     0A3F  0833               	movf	___flmul@bexp,w
 11780     0A40  1D03               	btfss	3,2
 11781     0A41  2A4B               	goto	i1l3661
 11782     0A42  3000               	movlw	0
 11783     0A43  00A3               	movwf	?___flmul+3
 11784     0A44  3000               	movlw	0
 11785     0A45  00A2               	movwf	?___flmul+2
 11786     0A46  3000               	movlw	0
 11787     0A47  00A1               	movwf	?___flmul+1
 11788     0A48  3000               	movlw	0
 11789     0A49  00A0               	movwf	?___flmul
 11790     0A4A  0008               	return
 11791     0A4B                     i1l3661:
 11792     0A4B  0820               	movf	___flmul@b,w
 11793     0A4C  00F0               	movwf	__Umul8_16@multiplicand
 11794     0A4D  0826               	movf	___flmul@a+2,w
 11795     0A4E  160A  158A  2310  120A  158A  	fcall	__Umul8_16
 11796     0A53  0871               	movf	?__Umul8_16+1,w
 11797     0A54  00B9               	movwf	___flmul@temp+1
 11798     0A55  0870               	movf	?__Umul8_16,w
 11799     0A56  00B8               	movwf	___flmul@temp
 11800     0A57  0838               	movf	___flmul@temp,w
 11801     0A58  00A8               	movwf	??___flmul
 11802     0A59  01A9               	clrf	??___flmul+1
 11803     0A5A  01AA               	clrf	??___flmul+2
 11804     0A5B  01AB               	clrf	??___flmul+3
 11805     0A5C  082B               	movf	??___flmul+3,w
 11806     0A5D  00B2               	movwf	___flmul@grs+3
 11807     0A5E  082A               	movf	??___flmul+2,w
 11808     0A5F  00B1               	movwf	___flmul@grs+2
 11809     0A60  0829               	movf	??___flmul+1,w
 11810     0A61  00B0               	movwf	___flmul@grs+1
 11811     0A62  0828               	movf	??___flmul,w
 11812     0A63  00AF               	movwf	___flmul@grs
 11813     0A64  0839               	movf	___flmul@temp+1,w
 11814     0A65  00A8               	movwf	??___flmul
 11815     0A66  01A9               	clrf	??___flmul+1
 11816     0A67  01AA               	clrf	??___flmul+2
 11817     0A68  01AB               	clrf	??___flmul+3
 11818     0A69  082B               	movf	??___flmul+3,w
 11819     0A6A  00B7               	movwf	___flmul@prod+3
 11820     0A6B  082A               	movf	??___flmul+2,w
 11821     0A6C  00B6               	movwf	___flmul@prod+2
 11822     0A6D  0829               	movf	??___flmul+1,w
 11823     0A6E  00B5               	movwf	___flmul@prod+1
 11824     0A6F  0828               	movf	??___flmul,w
 11825     0A70  00B4               	movwf	___flmul@prod
 11826     0A71  0821               	movf	___flmul@b+1,w
 11827     0A72  00F0               	movwf	__Umul8_16@multiplicand
 11828     0A73  0825               	movf	___flmul@a+1,w
 11829     0A74  160A  158A  2310  120A  158A  	fcall	__Umul8_16
 11830     0A79  0871               	movf	?__Umul8_16+1,w
 11831     0A7A  00B9               	movwf	___flmul@temp+1
 11832     0A7B  0870               	movf	?__Umul8_16,w
 11833     0A7C  00B8               	movwf	___flmul@temp
 11834     0A7D  0838               	movf	___flmul@temp,w
 11835     0A7E  00A8               	movwf	??___flmul
 11836     0A7F  01A9               	clrf	??___flmul+1
 11837     0A80  01AA               	clrf	??___flmul+2
 11838     0A81  01AB               	clrf	??___flmul+3
 11839     0A82  0828               	movf	??___flmul,w
 11840     0A83  07AF               	addwf	___flmul@grs,f
 11841     0A84  0829               	movf	??___flmul+1,w
 11842     0A85  1103               	clrz
 11843     0A86  1803               	skipnc
 11844     0A87  3E01               	addlw	1
 11845     0A88  1D03               	btfss	3,2
 11846     0A89  07B0               	addwf	___flmul@grs+1,f
 11847     0A8A  082A               	movf	??___flmul+2,w
 11848     0A8B  1103               	clrz
 11849     0A8C  1803               	skipnc
 11850     0A8D  3E01               	addlw	1
 11851     0A8E  1D03               	btfss	3,2
 11852     0A8F  07B1               	addwf	___flmul@grs+2,f
 11853     0A90  082B               	movf	??___flmul+3,w
 11854     0A91  1103               	clrz
 11855     0A92  1803               	skipnc
 11856     0A93  3E01               	addlw	1
 11857     0A94  1D03               	btfss	3,2
 11858     0A95  07B2               	addwf	___flmul@grs+3,f
 11859     0A96  0839               	movf	___flmul@temp+1,w
 11860     0A97  00A8               	movwf	??___flmul
 11861     0A98  01A9               	clrf	??___flmul+1
 11862     0A99  01AA               	clrf	??___flmul+2
 11863     0A9A  01AB               	clrf	??___flmul+3
 11864     0A9B  0828               	movf	??___flmul,w
 11865     0A9C  07B4               	addwf	___flmul@prod,f
 11866     0A9D  0829               	movf	??___flmul+1,w
 11867     0A9E  1103               	clrz
 11868     0A9F  1803               	skipnc
 11869     0AA0  3E01               	addlw	1
 11870     0AA1  1D03               	btfss	3,2
 11871     0AA2  07B5               	addwf	___flmul@prod+1,f
 11872     0AA3  082A               	movf	??___flmul+2,w
 11873     0AA4  1103               	clrz
 11874     0AA5  1803               	skipnc
 11875     0AA6  3E01               	addlw	1
 11876     0AA7  1D03               	btfss	3,2
 11877     0AA8  07B6               	addwf	___flmul@prod+2,f
 11878     0AA9  082B               	movf	??___flmul+3,w
 11879     0AAA  1103               	clrz
 11880     0AAB  1803               	skipnc
 11881     0AAC  3E01               	addlw	1
 11882     0AAD  1D03               	btfss	3,2
 11883     0AAE  07B7               	addwf	___flmul@prod+3,f
 11884     0AAF  0822               	movf	___flmul@b+2,w
 11885     0AB0  00F0               	movwf	__Umul8_16@multiplicand
 11886     0AB1  0824               	movf	___flmul@a,w
 11887     0AB2  160A  158A  2310  120A  158A  	fcall	__Umul8_16
 11888     0AB7  0871               	movf	?__Umul8_16+1,w
 11889     0AB8  00B9               	movwf	___flmul@temp+1
 11890     0AB9  0870               	movf	?__Umul8_16,w
 11891     0ABA  00B8               	movwf	___flmul@temp
 11892     0ABB  0838               	movf	___flmul@temp,w
 11893     0ABC  00A8               	movwf	??___flmul
 11894     0ABD  01A9               	clrf	??___flmul+1
 11895     0ABE  01AA               	clrf	??___flmul+2
 11896     0ABF  01AB               	clrf	??___flmul+3
 11897     0AC0  0828               	movf	??___flmul,w
 11898     0AC1  07AF               	addwf	___flmul@grs,f
 11899     0AC2  0829               	movf	??___flmul+1,w
 11900     0AC3  1103               	clrz
 11901     0AC4  1803               	skipnc
 11902     0AC5  3E01               	addlw	1
 11903     0AC6  1D03               	btfss	3,2
 11904     0AC7  07B0               	addwf	___flmul@grs+1,f
 11905     0AC8  082A               	movf	??___flmul+2,w
 11906     0AC9  1103               	clrz
 11907     0ACA  1803               	skipnc
 11908     0ACB  3E01               	addlw	1
 11909     0ACC  1D03               	btfss	3,2
 11910     0ACD  07B1               	addwf	___flmul@grs+2,f
 11911     0ACE  082B               	movf	??___flmul+3,w
 11912     0ACF  1103               	clrz
 11913     0AD0  1803               	skipnc
 11914     0AD1  3E01               	addlw	1
 11915     0AD2  1D03               	btfss	3,2
 11916     0AD3  07B2               	addwf	___flmul@grs+3,f
 11917     0AD4  0839               	movf	___flmul@temp+1,w
 11918     0AD5  00A8               	movwf	??___flmul
 11919     0AD6  01A9               	clrf	??___flmul+1
 11920     0AD7  01AA               	clrf	??___flmul+2
 11921     0AD8  01AB               	clrf	??___flmul+3
 11922     0AD9  0828               	movf	??___flmul,w
 11923     0ADA  07B4               	addwf	___flmul@prod,f
 11924     0ADB  0829               	movf	??___flmul+1,w
 11925     0ADC  1103               	clrz
 11926     0ADD  1803               	skipnc
 11927     0ADE  3E01               	addlw	1
 11928     0ADF  1D03               	btfss	3,2
 11929     0AE0  07B5               	addwf	___flmul@prod+1,f
 11930     0AE1  082A               	movf	??___flmul+2,w
 11931     0AE2  1103               	clrz
 11932     0AE3  1803               	skipnc
 11933     0AE4  3E01               	addlw	1
 11934     0AE5  1D03               	btfss	3,2
 11935     0AE6  07B6               	addwf	___flmul@prod+2,f
 11936     0AE7  082B               	movf	??___flmul+3,w
 11937     0AE8  1103               	clrz
 11938     0AE9  1803               	skipnc
 11939     0AEA  3E01               	addlw	1
 11940     0AEB  1D03               	btfss	3,2
 11941     0AEC  07B7               	addwf	___flmul@prod+3,f
 11942     0AED  3008               	movlw	8
 11943     0AEE  00A8               	movwf	??___flmul
 11944     0AEF                     u487_25:
 11945     0AEF  1003               	clrc
 11946     0AF0  0DAF               	rlf	___flmul@grs,f
 11947     0AF1  0DB0               	rlf	___flmul@grs+1,f
 11948     0AF2  0DB1               	rlf	___flmul@grs+2,f
 11949     0AF3  0DB2               	rlf	___flmul@grs+3,f
 11950     0AF4  0BA8               	decfsz	??___flmul,f
 11951     0AF5  2AEF               	goto	u487_25
 11952     0AF6  0821               	movf	___flmul@b+1,w
 11953     0AF7  00F0               	movwf	__Umul8_16@multiplicand
 11954     0AF8  0824               	movf	___flmul@a,w
 11955     0AF9  160A  158A  2310  120A  158A  	fcall	__Umul8_16
 11956     0AFE  0871               	movf	?__Umul8_16+1,w
 11957     0AFF  00B9               	movwf	___flmul@temp+1
 11958     0B00  0870               	movf	?__Umul8_16,w
 11959     0B01  00B8               	movwf	___flmul@temp
 11960     0B02  0838               	movf	___flmul@temp,w
 11961     0B03  00A8               	movwf	??___flmul
 11962     0B04  0839               	movf	___flmul@temp+1,w
 11963     0B05  00A9               	movwf	??___flmul+1
 11964     0B06  01AA               	clrf	??___flmul+2
 11965     0B07  01AB               	clrf	??___flmul+3
 11966     0B08  0828               	movf	??___flmul,w
 11967     0B09  07AF               	addwf	___flmul@grs,f
 11968     0B0A  0829               	movf	??___flmul+1,w
 11969     0B0B  1103               	clrz
 11970     0B0C  1803               	skipnc
 11971     0B0D  3E01               	addlw	1
 11972     0B0E  1D03               	btfss	3,2
 11973     0B0F  07B0               	addwf	___flmul@grs+1,f
 11974     0B10  082A               	movf	??___flmul+2,w
 11975     0B11  1103               	clrz
 11976     0B12  1803               	skipnc
 11977     0B13  3E01               	addlw	1
 11978     0B14  1D03               	btfss	3,2
 11979     0B15  07B1               	addwf	___flmul@grs+2,f
 11980     0B16  082B               	movf	??___flmul+3,w
 11981     0B17  1103               	clrz
 11982     0B18  1803               	skipnc
 11983     0B19  3E01               	addlw	1
 11984     0B1A  1D03               	btfss	3,2
 11985     0B1B  07B2               	addwf	___flmul@grs+3,f
 11986     0B1C  0820               	movf	___flmul@b,w
 11987     0B1D  00F0               	movwf	__Umul8_16@multiplicand
 11988     0B1E  0825               	movf	___flmul@a+1,w
 11989     0B1F  160A  158A  2310  120A  158A  	fcall	__Umul8_16
 11990     0B24  0871               	movf	?__Umul8_16+1,w
 11991     0B25  00B9               	movwf	___flmul@temp+1
 11992     0B26  0870               	movf	?__Umul8_16,w
 11993     0B27  00B8               	movwf	___flmul@temp
 11994     0B28  0838               	movf	___flmul@temp,w
 11995     0B29  00A8               	movwf	??___flmul
 11996     0B2A  0839               	movf	___flmul@temp+1,w
 11997     0B2B  00A9               	movwf	??___flmul+1
 11998     0B2C  01AA               	clrf	??___flmul+2
 11999     0B2D  01AB               	clrf	??___flmul+3
 12000     0B2E  0828               	movf	??___flmul,w
 12001     0B2F  07AF               	addwf	___flmul@grs,f
 12002     0B30  0829               	movf	??___flmul+1,w
 12003     0B31  1103               	clrz
 12004     0B32  1803               	skipnc
 12005     0B33  3E01               	addlw	1
 12006     0B34  1D03               	btfss	3,2
 12007     0B35  07B0               	addwf	___flmul@grs+1,f
 12008     0B36  082A               	movf	??___flmul+2,w
 12009     0B37  1103               	clrz
 12010     0B38  1803               	skipnc
 12011     0B39  3E01               	addlw	1
 12012     0B3A  1D03               	btfss	3,2
 12013     0B3B  07B1               	addwf	___flmul@grs+2,f
 12014     0B3C  082B               	movf	??___flmul+3,w
 12015     0B3D  1103               	clrz
 12016     0B3E  1803               	skipnc
 12017     0B3F  3E01               	addlw	1
 12018     0B40  1D03               	btfss	3,2
 12019     0B41  07B2               	addwf	___flmul@grs+3,f
 12020     0B42  3008               	movlw	8
 12021     0B43  00A8               	movwf	??___flmul
 12022     0B44                     u490_25:
 12023     0B44  1003               	clrc
 12024     0B45  0DAF               	rlf	___flmul@grs,f
 12025     0B46  0DB0               	rlf	___flmul@grs+1,f
 12026     0B47  0DB1               	rlf	___flmul@grs+2,f
 12027     0B48  0DB2               	rlf	___flmul@grs+3,f
 12028     0B49  0BA8               	decfsz	??___flmul,f
 12029     0B4A  2B44               	goto	u490_25
 12030     0B4B  0820               	movf	___flmul@b,w
 12031     0B4C  00F0               	movwf	__Umul8_16@multiplicand
 12032     0B4D  0824               	movf	___flmul@a,w
 12033     0B4E  160A  158A  2310  120A  158A  	fcall	__Umul8_16
 12034     0B53  0871               	movf	?__Umul8_16+1,w
 12035     0B54  00B9               	movwf	___flmul@temp+1
 12036     0B55  0870               	movf	?__Umul8_16,w
 12037     0B56  00B8               	movwf	___flmul@temp
 12038     0B57  0838               	movf	___flmul@temp,w
 12039     0B58  00A8               	movwf	??___flmul
 12040     0B59  0839               	movf	___flmul@temp+1,w
 12041     0B5A  00A9               	movwf	??___flmul+1
 12042     0B5B  01AA               	clrf	??___flmul+2
 12043     0B5C  01AB               	clrf	??___flmul+3
 12044     0B5D  0828               	movf	??___flmul,w
 12045     0B5E  07AF               	addwf	___flmul@grs,f
 12046     0B5F  0829               	movf	??___flmul+1,w
 12047     0B60  1103               	clrz
 12048     0B61  1803               	skipnc
 12049     0B62  3E01               	addlw	1
 12050     0B63  1D03               	btfss	3,2
 12051     0B64  07B0               	addwf	___flmul@grs+1,f
 12052     0B65  082A               	movf	??___flmul+2,w
 12053     0B66  1103               	clrz
 12054     0B67  1803               	skipnc
 12055     0B68  3E01               	addlw	1
 12056     0B69  1D03               	btfss	3,2
 12057     0B6A  07B1               	addwf	___flmul@grs+2,f
 12058     0B6B  082B               	movf	??___flmul+3,w
 12059     0B6C  1103               	clrz
 12060     0B6D  1803               	skipnc
 12061     0B6E  3E01               	addlw	1
 12062     0B6F  1D03               	btfss	3,2
 12063     0B70  07B2               	addwf	___flmul@grs+3,f
 12064     0B71  0821               	movf	___flmul@b+1,w
 12065     0B72  00F0               	movwf	__Umul8_16@multiplicand
 12066     0B73  0826               	movf	___flmul@a+2,w
 12067     0B74  160A  158A  2310  120A  158A  	fcall	__Umul8_16
 12068     0B79  0871               	movf	?__Umul8_16+1,w
 12069     0B7A  00B9               	movwf	___flmul@temp+1
 12070     0B7B  0870               	movf	?__Umul8_16,w
 12071     0B7C  00B8               	movwf	___flmul@temp
 12072     0B7D  0838               	movf	___flmul@temp,w
 12073     0B7E  00A8               	movwf	??___flmul
 12074     0B7F  0839               	movf	___flmul@temp+1,w
 12075     0B80  00A9               	movwf	??___flmul+1
 12076     0B81  01AA               	clrf	??___flmul+2
 12077     0B82  01AB               	clrf	??___flmul+3
 12078     0B83  0828               	movf	??___flmul,w
 12079     0B84  07B4               	addwf	___flmul@prod,f
 12080     0B85  0829               	movf	??___flmul+1,w
 12081     0B86  1103               	clrz
 12082     0B87  1803               	skipnc
 12083     0B88  3E01               	addlw	1
 12084     0B89  1D03               	btfss	3,2
 12085     0B8A  07B5               	addwf	___flmul@prod+1,f
 12086     0B8B  082A               	movf	??___flmul+2,w
 12087     0B8C  1103               	clrz
 12088     0B8D  1803               	skipnc
 12089     0B8E  3E01               	addlw	1
 12090     0B8F  1D03               	btfss	3,2
 12091     0B90  07B6               	addwf	___flmul@prod+2,f
 12092     0B91  082B               	movf	??___flmul+3,w
 12093     0B92  1103               	clrz
 12094     0B93  1803               	skipnc
 12095     0B94  3E01               	addlw	1
 12096     0B95  1D03               	btfss	3,2
 12097     0B96  07B7               	addwf	___flmul@prod+3,f
 12098     0B97  0822               	movf	___flmul@b+2,w
 12099     0B98  00F0               	movwf	__Umul8_16@multiplicand
 12100     0B99  0825               	movf	___flmul@a+1,w
 12101     0B9A  160A  158A  2310  120A  158A  	fcall	__Umul8_16
 12102     0B9F  0871               	movf	?__Umul8_16+1,w
 12103     0BA0  00B9               	movwf	___flmul@temp+1
 12104     0BA1  0870               	movf	?__Umul8_16,w
 12105     0BA2  00B8               	movwf	___flmul@temp
 12106     0BA3  0838               	movf	___flmul@temp,w
 12107     0BA4  00A8               	movwf	??___flmul
 12108     0BA5  0839               	movf	___flmul@temp+1,w
 12109     0BA6  00A9               	movwf	??___flmul+1
 12110     0BA7  01AA               	clrf	??___flmul+2
 12111     0BA8  01AB               	clrf	??___flmul+3
 12112     0BA9  0828               	movf	??___flmul,w
 12113     0BAA  07B4               	addwf	___flmul@prod,f
 12114     0BAB  0829               	movf	??___flmul+1,w
 12115     0BAC  1103               	clrz
 12116     0BAD  1803               	skipnc
 12117     0BAE  3E01               	addlw	1
 12118     0BAF  1D03               	btfss	3,2
 12119     0BB0  07B5               	addwf	___flmul@prod+1,f
 12120     0BB1  082A               	movf	??___flmul+2,w
 12121     0BB2  1103               	clrz
 12122     0BB3  1803               	skipnc
 12123     0BB4  3E01               	addlw	1
 12124     0BB5  1D03               	btfss	3,2
 12125     0BB6  07B6               	addwf	___flmul@prod+2,f
 12126     0BB7  082B               	movf	??___flmul+3,w
 12127     0BB8  1103               	clrz
 12128     0BB9  1803               	skipnc
 12129     0BBA  3E01               	addlw	1
 12130     0BBB  1D03               	btfss	3,2
 12131     0BBC  07B7               	addwf	___flmul@prod+3,f
 12132     0BBD  0822               	movf	___flmul@b+2,w
 12133     0BBE  00F0               	movwf	__Umul8_16@multiplicand
 12134     0BBF  0826               	movf	___flmul@a+2,w
 12135     0BC0  160A  158A  2310  120A  158A  	fcall	__Umul8_16
 12136     0BC5  0871               	movf	?__Umul8_16+1,w
 12137     0BC6  00B9               	movwf	___flmul@temp+1
 12138     0BC7  0870               	movf	?__Umul8_16,w
 12139     0BC8  00B8               	movwf	___flmul@temp
 12140     0BC9  0838               	movf	___flmul@temp,w
 12141     0BCA  00A8               	movwf	??___flmul
 12142     0BCB  0839               	movf	___flmul@temp+1,w
 12143     0BCC  00A9               	movwf	??___flmul+1
 12144     0BCD  01AA               	clrf	??___flmul+2
 12145     0BCE  01AB               	clrf	??___flmul+3
 12146     0BCF  3008               	movlw	8
 12147     0BD0                     u494_25:
 12148     0BD0  1003               	clrc
 12149     0BD1  0DA8               	rlf	??___flmul,f
 12150     0BD2  0DA9               	rlf	??___flmul+1,f
 12151     0BD3  0DAA               	rlf	??___flmul+2,f
 12152     0BD4  0DAB               	rlf	??___flmul+3,f
 12153     0BD5  3EFF               	addlw	-1
 12154     0BD6  1D03               	skipz
 12155     0BD7  2BD0               	goto	u494_25
 12156     0BD8  0828               	movf	??___flmul,w
 12157     0BD9  07B4               	addwf	___flmul@prod,f
 12158     0BDA  0829               	movf	??___flmul+1,w
 12159     0BDB  1103               	clrz
 12160     0BDC  1803               	skipnc
 12161     0BDD  3E01               	addlw	1
 12162     0BDE  1D03               	btfss	3,2
 12163     0BDF  07B5               	addwf	___flmul@prod+1,f
 12164     0BE0  082A               	movf	??___flmul+2,w
 12165     0BE1  1103               	clrz
 12166     0BE2  1803               	skipnc
 12167     0BE3  3E01               	addlw	1
 12168     0BE4  1D03               	btfss	3,2
 12169     0BE5  07B6               	addwf	___flmul@prod+2,f
 12170     0BE6  082B               	movf	??___flmul+3,w
 12171     0BE7  1103               	clrz
 12172     0BE8  1803               	skipnc
 12173     0BE9  3E01               	addlw	1
 12174     0BEA  1D03               	btfss	3,2
 12175     0BEB  07B7               	addwf	___flmul@prod+3,f
 12176     0BEC  0832               	movf	___flmul@grs+3,w
 12177     0BED  00A8               	movwf	??___flmul
 12178     0BEE  01A9               	clrf	??___flmul+1
 12179     0BEF  01AA               	clrf	??___flmul+2
 12180     0BF0  01AB               	clrf	??___flmul+3
 12181     0BF1  0828               	movf	??___flmul,w
 12182     0BF2  07B4               	addwf	___flmul@prod,f
 12183     0BF3  0829               	movf	??___flmul+1,w
 12184     0BF4  1103               	clrz
 12185     0BF5  1803               	skipnc
 12186     0BF6  3E01               	addlw	1
 12187     0BF7  1D03               	btfss	3,2
 12188     0BF8  07B5               	addwf	___flmul@prod+1,f
 12189     0BF9  082A               	movf	??___flmul+2,w
 12190     0BFA  1103               	clrz
 12191     0BFB  1803               	skipnc
 12192     0BFC  3E01               	addlw	1
 12193     0BFD  1D03               	btfss	3,2
 12194     0BFE  07B6               	addwf	___flmul@prod+2,f
 12195     0BFF  082B               	movf	??___flmul+3,w
 12196     0C00  1103               	clrz
 12197     0C01  1803               	skipnc
 12198     0C02  3E01               	addlw	1
 12199     0C03  1D03               	btfss	3,2
 12200     0C04  07B7               	addwf	___flmul@prod+3,f
 12201     0C05  3008               	movlw	8
 12202     0C06  00A8               	movwf	??___flmul
 12203     0C07                     u497_25:
 12204     0C07  1003               	clrc
 12205     0C08  0DAF               	rlf	___flmul@grs,f
 12206     0C09  0DB0               	rlf	___flmul@grs+1,f
 12207     0C0A  0DB1               	rlf	___flmul@grs+2,f
 12208     0C0B  0DB2               	rlf	___flmul@grs+3,f
 12209     0C0C  0BA8               	decfsz	??___flmul,f
 12210     0C0D  2C07               	goto	u497_25
 12211     0C0E  0833               	movf	___flmul@bexp,w
 12212     0C0F  072E               	addwf	___flmul@aexp,w
 12213     0C10  00A8               	movwf	??___flmul
 12214     0C11  01A9               	clrf	??___flmul+1
 12215     0C12  0DA9               	rlf	??___flmul+1,f
 12216     0C13  0828               	movf	??___flmul,w
 12217     0C14  3E82               	addlw	130
 12218     0C15  00B8               	movwf	___flmul@temp
 12219     0C16  0829               	movf	??___flmul+1,w
 12220     0C17  1803               	skipnc
 12221     0C18  3E01               	addlw	1
 12222     0C19  3EFF               	addlw	255
 12223     0C1A  00B9               	movwf	___flmul@temp+1
 12224     0C1B                     i1l3713:
 12225     0C1B  1BB6               	btfsc	___flmul@prod+2,7
 12226     0C1C  2C38               	goto	i1l3715
 12227     0C1D  3001               	movlw	1
 12228     0C1E  00A8               	movwf	??___flmul
 12229     0C1F                     u498_25:
 12230     0C1F  1003               	clrc
 12231     0C20  0DB4               	rlf	___flmul@prod,f
 12232     0C21  0DB5               	rlf	___flmul@prod+1,f
 12233     0C22  0DB6               	rlf	___flmul@prod+2,f
 12234     0C23  0DB7               	rlf	___flmul@prod+3,f
 12235     0C24  0BA8               	decfsz	??___flmul,f
 12236     0C25  2C1F               	goto	u498_25
 12237     0C26  1BB2               	btfsc	___flmul@grs+3,7
 12238     0C27  1434               	bsf	___flmul@prod,0
 12239     0C28  3001               	movlw	1
 12240     0C29  00A8               	movwf	??___flmul
 12241     0C2A                     u500_25:
 12242     0C2A  1003               	clrc
 12243     0C2B  0DAF               	rlf	___flmul@grs,f
 12244     0C2C  0DB0               	rlf	___flmul@grs+1,f
 12245     0C2D  0DB1               	rlf	___flmul@grs+2,f
 12246     0C2E  0DB2               	rlf	___flmul@grs+3,f
 12247     0C2F  0BA8               	decfsz	??___flmul,f
 12248     0C30  2C2A               	goto	u500_25
 12249     0C31  30FF               	movlw	255
 12250     0C32  07B8               	addwf	___flmul@temp,f
 12251     0C33  1803               	skipnc
 12252     0C34  0AB9               	incf	___flmul@temp+1,f
 12253     0C35  30FF               	movlw	255
 12254     0C36  07B9               	addwf	___flmul@temp+1,f
 12255     0C37  2C1B               	goto	i1l3713
 12256     0C38                     i1l3715:
 12257     0C38  01AE               	clrf	___flmul@aexp
 12258     0C39  1FB2               	btfss	___flmul@grs+3,7
 12259     0C3A  2C51               	goto	i1l3725
 12260     0C3B  30FF               	movlw	255
 12261     0C3C  052F               	andwf	___flmul@grs,w
 12262     0C3D  00A8               	movwf	??___flmul
 12263     0C3E  30FF               	movlw	255
 12264     0C3F  0530               	andwf	___flmul@grs+1,w
 12265     0C40  00A9               	movwf	??___flmul+1
 12266     0C41  30FF               	movlw	255
 12267     0C42  0531               	andwf	___flmul@grs+2,w
 12268     0C43  00AA               	movwf	??___flmul+2
 12269     0C44  307F               	movlw	127
 12270     0C45  0532               	andwf	___flmul@grs+3,w
 12271     0C46  00AB               	movwf	??___flmul+3
 12272     0C47  082B               	movf	??___flmul+3,w
 12273     0C48  042A               	iorwf	??___flmul+2,w
 12274     0C49  0429               	iorwf	??___flmul+1,w
 12275     0C4A  0428               	iorwf	??___flmul,w
 12276     0C4B  1903               	skipnz
 12277     0C4C  1834               	btfsc	___flmul@prod,0
 12278     0C4D  2C4F               	goto	i1l3721
 12279     0C4E  2C51               	goto	i1l3725
 12280     0C4F                     i1l3721:
 12281     0C4F  01AE               	clrf	___flmul@aexp
 12282     0C50  0AAE               	incf	___flmul@aexp,f
 12283     0C51                     i1l3725:
 12284     0C51  082E               	movf	___flmul@aexp,w
 12285     0C52  1903               	btfsc	3,2
 12286     0C53  2C83               	goto	i1l3735
 12287     0C54  3001               	movlw	1
 12288     0C55  07B4               	addwf	___flmul@prod,f
 12289     0C56  3000               	movlw	0
 12290     0C57  1803               	skipnc
 12291     0C58  3001               	movlw	1
 12292     0C59  07B5               	addwf	___flmul@prod+1,f
 12293     0C5A  3000               	movlw	0
 12294     0C5B  1803               	skipnc
 12295     0C5C  3001               	movlw	1
 12296     0C5D  07B6               	addwf	___flmul@prod+2,f
 12297     0C5E  3000               	movlw	0
 12298     0C5F  1803               	skipnc
 12299     0C60  3001               	movlw	1
 12300     0C61  07B7               	addwf	___flmul@prod+3,f
 12301     0C62  1C37               	btfss	___flmul@prod+3,0
 12302     0C63  2C83               	goto	i1l3735
 12303     0C64  0834               	movf	___flmul@prod,w
 12304     0C65  00A8               	movwf	??___flmul
 12305     0C66  0835               	movf	___flmul@prod+1,w
 12306     0C67  00A9               	movwf	??___flmul+1
 12307     0C68  0836               	movf	___flmul@prod+2,w
 12308     0C69  00AA               	movwf	??___flmul+2
 12309     0C6A  0837               	movf	___flmul@prod+3,w
 12310     0C6B  00AB               	movwf	??___flmul+3
 12311     0C6C  3001               	movlw	1
 12312     0C6D  00AC               	movwf	??___flmul+4
 12313     0C6E                     u507_25:
 12314     0C6E  0D2B               	rlf	??___flmul+3,w
 12315     0C6F  0CAB               	rrf	??___flmul+3,f
 12316     0C70  0CAA               	rrf	??___flmul+2,f
 12317     0C71  0CA9               	rrf	??___flmul+1,f
 12318     0C72  0CA8               	rrf	??___flmul,f
 12319     0C73  0BAC               	decfsz	??___flmul+4,f
 12320     0C74  2C6E               	goto	u507_25
 12321     0C75  082B               	movf	??___flmul+3,w
 12322     0C76  00B7               	movwf	___flmul@prod+3
 12323     0C77  082A               	movf	??___flmul+2,w
 12324     0C78  00B6               	movwf	___flmul@prod+2
 12325     0C79  0829               	movf	??___flmul+1,w
 12326     0C7A  00B5               	movwf	___flmul@prod+1
 12327     0C7B  0828               	movf	??___flmul,w
 12328     0C7C  00B4               	movwf	___flmul@prod
 12329     0C7D  3001               	movlw	1
 12330     0C7E  07B8               	addwf	___flmul@temp,f
 12331     0C7F  1803               	skipnc
 12332     0C80  0AB9               	incf	___flmul@temp+1,f
 12333     0C81  3000               	movlw	0
 12334     0C82  07B9               	addwf	___flmul@temp+1,f
 12335     0C83                     i1l3735:
 12336     0C83  0839               	movf	___flmul@temp+1,w
 12337     0C84  3A80               	xorlw	128
 12338     0C85  00FF               	movwf	127
 12339     0C86  3080               	movlw	128
 12340     0C87  027F               	subwf	127,w
 12341     0C88  1D03               	skipz
 12342     0C89  2C8C               	goto	u508_25
 12343     0C8A  30FF               	movlw	255
 12344     0C8B  0238               	subwf	___flmul@temp,w
 12345     0C8C                     u508_25:
 12346     0C8C  1C03               	skipc
 12347     0C8D  2C99               	goto	i1l3739
 12348     0C8E  307F               	movlw	127
 12349     0C8F  1283               	bcf	3,5	;RP0=0, select bank0
 12350     0C90  1303               	bcf	3,6	;RP1=0, select bank0
 12351     0C91  00B7               	movwf	___flmul@prod+3
 12352     0C92  3080               	movlw	128
 12353     0C93  00B6               	movwf	___flmul@prod+2
 12354     0C94  3000               	movlw	0
 12355     0C95  00B5               	movwf	___flmul@prod+1
 12356     0C96  3000               	movlw	0
 12357     0C97  00B4               	movwf	___flmul@prod
 12358     0C98  2CC5               	goto	i1l3753
 12359     0C99                     i1l3739:
 12360     0C99  1283               	bcf	3,5	;RP0=0, select bank0
 12361     0C9A  1303               	bcf	3,6	;RP1=0, select bank0
 12362     0C9B  0839               	movf	___flmul@temp+1,w
 12363     0C9C  3A80               	xorlw	128
 12364     0C9D  00FF               	movwf	127
 12365     0C9E  3080               	movlw	128
 12366     0C9F  027F               	subwf	127,w
 12367     0CA0  1D03               	skipz
 12368     0CA1  2CA4               	goto	u509_25
 12369     0CA2  3001               	movlw	1
 12370     0CA3  0238               	subwf	___flmul@temp,w
 12371     0CA4                     u509_25:
 12372     0CA4  1803               	skipnc
 12373     0CA5  2CB2               	goto	i1l3745
 12374     0CA6  3000               	movlw	0
 12375     0CA7  1283               	bcf	3,5	;RP0=0, select bank0
 12376     0CA8  1303               	bcf	3,6	;RP1=0, select bank0
 12377     0CA9  00B7               	movwf	___flmul@prod+3
 12378     0CAA  3000               	movlw	0
 12379     0CAB  00B6               	movwf	___flmul@prod+2
 12380     0CAC  3000               	movlw	0
 12381     0CAD  00B5               	movwf	___flmul@prod+1
 12382     0CAE  3000               	movlw	0
 12383     0CAF  00B4               	movwf	___flmul@prod
 12384     0CB0  01AD               	clrf	___flmul@sign
 12385     0CB1  2CC5               	goto	i1l3753
 12386     0CB2                     i1l3745:
 12387     0CB2  1283               	bcf	3,5	;RP0=0, select bank0
 12388     0CB3  1303               	bcf	3,6	;RP1=0, select bank0
 12389     0CB4  0838               	movf	___flmul@temp,w
 12390     0CB5  00B3               	movwf	___flmul@bexp
 12391     0CB6  30FF               	movlw	255
 12392     0CB7  05B4               	andwf	___flmul@prod,f
 12393     0CB8  30FF               	movlw	255
 12394     0CB9  05B5               	andwf	___flmul@prod+1,f
 12395     0CBA  307F               	movlw	127
 12396     0CBB  05B6               	andwf	___flmul@prod+2,f
 12397     0CBC  3000               	movlw	0
 12398     0CBD  05B7               	andwf	___flmul@prod+3,f
 12399     0CBE  1833               	btfsc	___flmul@bexp,0
 12400     0CBF  17B6               	bsf	___flmul@prod+2,7
 12401     0CC0  0833               	movf	___flmul@bexp,w
 12402     0CC1  00A8               	movwf	??___flmul
 12403     0CC2  1003               	clrc
 12404     0CC3  0C28               	rrf	??___flmul,w
 12405     0CC4  00B7               	movwf	___flmul@prod+3
 12406     0CC5                     i1l3753:
 12407     0CC5  082D               	movf	___flmul@sign,w
 12408     0CC6  00FF               	movwf	127
 12409     0CC7  087F               	movf	127,w
 12410     0CC8  04B7               	iorwf	___flmul@prod+3,f
 12411     0CC9  0837               	movf	___flmul@prod+3,w
 12412     0CCA  00A3               	movwf	?___flmul+3
 12413     0CCB  0836               	movf	___flmul@prod+2,w
 12414     0CCC  00A2               	movwf	?___flmul+2
 12415     0CCD  0835               	movf	___flmul@prod+1,w
 12416     0CCE  00A1               	movwf	?___flmul+1
 12417     0CCF  0834               	movf	___flmul@prod,w
 12418     0CD0  00A0               	movwf	?___flmul
 12419     0CD1  0008               	return
 12420     0CD2                     __end_of___flmul:
 12421                           
 12422                           	psect	text60
 12423     1B10                     __ptext60:	
 12424 ;; *************** function __Umul8_16 *****************
 12425 ;; Defined at:
 12426 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul8_16.c"
 12427 ;; Parameters:    Size  Location     Type
 12428 ;;  multiplier      1    wreg     unsigned char 
 12429 ;;  multiplicand    1    0[COMMON] unsigned char 
 12430 ;; Auto vars:     Size  Location     Type
 12431 ;;  multiplier      1    8[COMMON] unsigned char 
 12432 ;;  word_mpld       2    6[COMMON] unsigned int 
 12433 ;;  product         2    4[COMMON] unsigned int 
 12434 ;; Return value:  Size  Location     Type
 12435 ;;                  2    0[COMMON] unsigned int 
 12436 ;; Registers used:
 12437 ;;		wreg, status,2, status,0
 12438 ;; Tracked objects:
 12439 ;;		On entry : 300/0
 12440 ;;		On exit  : 300/0
 12441 ;;		Unchanged: 300/0
 12442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12443 ;;      Params:         2       0       0       0       0
 12444 ;;      Locals:         5       0       0       0       0
 12445 ;;      Temps:          2       0       0       0       0
 12446 ;;      Totals:         9       0       0       0       0
 12447 ;;Total ram usage:        9 bytes
 12448 ;; Hardware stack levels used: 1
 12449 ;; This function calls:
 12450 ;;		Nothing
 12451 ;; This function is called by:
 12452 ;;		___flmul
 12453 ;; This function uses a non-reentrant model
 12454 ;;
 12455                           
 12456     1B10                     __Umul8_16:	
 12457                           ;psect for function __Umul8_16
 12458                           
 12459                           
 12460                           ;incstack = 0
 12461 ;; hardware stack exceeded
 12462                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 12463                           ;__Umul8_16@multiplier stored from wreg
 12464     1B10  00F8               	movwf	__Umul8_16@multiplier
 12465     1B11  01F4               	clrf	__Umul8_16@product
 12466     1B12  01F5               	clrf	__Umul8_16@product+1
 12467     1B13  0870               	movf	__Umul8_16@multiplicand,w
 12468     1B14  00F2               	movwf	??__Umul8_16
 12469     1B15  01F3               	clrf	??__Umul8_16+1
 12470     1B16  0872               	movf	??__Umul8_16,w
 12471     1B17  00F6               	movwf	__Umul8_16@word_mpld
 12472     1B18  0873               	movf	??__Umul8_16+1,w
 12473     1B19  00F7               	movwf	__Umul8_16@word_mpld+1
 12474     1B1A                     i1l3205:
 12475     1B1A  1C78               	btfss	__Umul8_16@multiplier,0
 12476     1B1B  2B22               	goto	i1l1160
 12477     1B1C  0876               	movf	__Umul8_16@word_mpld,w
 12478     1B1D  07F4               	addwf	__Umul8_16@product,f
 12479     1B1E  1803               	skipnc
 12480     1B1F  0AF5               	incf	__Umul8_16@product+1,f
 12481     1B20  0877               	movf	__Umul8_16@word_mpld+1,w
 12482     1B21  07F5               	addwf	__Umul8_16@product+1,f
 12483     1B22                     i1l1160:
 12484     1B22  3001               	movlw	1
 12485     1B23                     u376_25:
 12486     1B23  1003               	clrc
 12487     1B24  0DF6               	rlf	__Umul8_16@word_mpld,f
 12488     1B25  0DF7               	rlf	__Umul8_16@word_mpld+1,f
 12489     1B26  3EFF               	addlw	-1
 12490     1B27  1D03               	skipz
 12491     1B28  2B23               	goto	u376_25
 12492     1B29  1003               	clrc
 12493     1B2A  0CF8               	rrf	__Umul8_16@multiplier,f
 12494     1B2B  0878               	movf	__Umul8_16@multiplier,w
 12495     1B2C  1D03               	btfss	3,2
 12496     1B2D  2B1A               	goto	i1l3205
 12497     1B2E  0875               	movf	__Umul8_16@product+1,w
 12498     1B2F  00F1               	movwf	?__Umul8_16+1
 12499     1B30  0874               	movf	__Umul8_16@product,w
 12500     1B31  00F0               	movwf	?__Umul8_16
 12501     1B32  0008               	return
 12502     1B33                     __end_of__Umul8_16:
 12503     007E                     btemp	set	126	;btemp
 12504     007E                     wtemp0	set	126
 12505                           
 12506                           	psect	idloc
 12507                           
 12508                           ;Config register IDLOC0 @ 0x2000
 12509                           ;	unspecified, using default values
 12510     2000                     	org	8192
 12511     2000  3FFF               	dw	16383
 12512                           
 12513                           ;Config register IDLOC1 @ 0x2001
 12514                           ;	unspecified, using default values
 12515     2001                     	org	8193
 12516     2001  3FFF               	dw	16383
 12517                           
 12518                           ;Config register IDLOC2 @ 0x2002
 12519                           ;	unspecified, using default values
 12520     2002                     	org	8194
 12521     2002  3FFF               	dw	16383
 12522                           
 12523                           ;Config register IDLOC3 @ 0x2003
 12524                           ;	unspecified, using default values
 12525     2003                     	org	8195
 12526     2003  3FFF               	dw	16383
 12527                           
 12528                           	psect	config
 12529                           
 12530                           ;Config register CONFIG @ 0x2007
 12531                           ;	Oscillator Selection bits
 12532                           ;	FOSC = HS, HS oscillator
 12533                           ;	Watchdog Timer Enable bit
 12534                           ;	WDTE = OFF, WDT disabled
 12535                           ;	Power-up Timer Enable bit
 12536                           ;	PWRTE = OFF, PWRT disabled
 12537                           ;	Brown-out Reset Enable bit
 12538                           ;	BOREN = ON, BOR enabled
 12539                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
 12540                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
 12541                           ;	Data EEPROM Memory Code Protection bit
 12542                           ;	CPD = OFF, Data EEPROM code protection off
 12543                           ;	Flash Program Memory Write Enable bits
 12544                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
 12545                           ;	In-Circuit Debugger Mode bit
 12546                           ;	DEBUG = 0x1, unprogrammed default
 12547                           ;	Flash Program Memory Code Protection bit
 12548                           ;	CP = OFF, Code protection off
 12549     2007                     	org	8199
 12550     2007  3FFA               	dw	16378

Data Sizes:
    Strings     41
    Constant    144
    Data        3
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     77      80
    BANK1            80     43      79
    BANK3            96      6      40
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK1[1]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_3(CODE[15]), STR_2(CODE[13]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> str2(BANK3[17]), str1(BANK3[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    UARTrcvString@rcv_buffer	PTR unsigned char  size(1) Largest target is 9
		 -> rcv_buffer(BANK1[9]), 

    UARTsendString@str	PTR unsigned char  size(1) Largest target is 9
		 -> ModbusFrame(BANK1[9]), 

    LCD_Write_String@str	PTR unsigned char  size(2) Largest target is 17
		 -> str2(BANK3[17]), str1(BANK3[17]), STR_1(CODE[13]), 

    Master_DataHandling@buf	PTR unsigned char  size(1) Largest target is 9
		 -> rcv_buffer(BANK1[9]), 

    ReceiveData_Check@str	PTR unsigned char  size(1) Largest target is 9
		 -> rcv_buffer(BANK1[9]), 

    CRCcheck@buf	PTR unsigned char  size(1) Largest target is 9
		 -> ModbusFrame(BANK1[9]), rcv_buffer(BANK1[9]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _sprintf->___awdiv
    _sprintf->___lldiv
    _sprintf->___xxtofl
    _scale->___awdiv
    ___awdiv->___awmod
    ___lbdiv->___lbmod
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->i1_LCD_DATA
    _LCD_Set_Cursor->i1_LCD_CMD
    _LCD_Clear->i1_LCD_CMD
    i1_LCD_CMD->i1_LCD_DATA
    _UARTrcvString->_UARTrcvChar
    _TC72_toFloat->___xxtofl
    ___awtoft->___ftpack
    ___ftadd->___xxtofl
    _Master_SendCommand->_CRCcheck
    _Master_DataHandling->_ReceiveData_Check
    _Master_DataHandling->_SendErrorFrame
    _SendErrorFrame->_CRCcheck
    _UARTsendString->_UARTsendChar
    _ReceiveData_Check->_CRCcheck
    _HCH1000_freqToHumidity->___xxtofl
    ___flsub->___xxtofl
    ___flmul->___awdiv
    ___flmul->___xxtofl

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _displayData->_sprintf
    _sprintf->___flsub
    _scale->___flmul
    _fround->___flmul
    ___fltol->_scale
    _TC72_toFloat->___ftadd
    _SpeedControl->_proportionalControl
    _proportionalControl->___fttol
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftadd->___flmul
    ___ftmul->___ftsub
    _Master_DataHandling->_ReceiveData_Check
    _HCH1000_freqToHumidity->___flsub
    ___flsub->___fladd
    ___fladd->_fround

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    _ISR->_displayData
    _displayData->_sprintf
    _SpeedControl->_proportionalControl

Critical Paths under _main in BANK3

    _main->_LCD_Init
    _timer0TimerInit->_timer0SetPrescaler
    _LCD_Init->_LCD_CMD
    _LCD_CMD->_LCD_DATA

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     457
                           _LCD_Init
               _compressorMotor_Init
                 _mobusRTUmasterInit
                    _timer0TimerInit
 ---------------------------------------------------------------------------------
 (1) _timer0TimerInit                                      2     0      2     259
                                              2 BANK3      2     0      2
                 _timer0SetPrescaler
 ---------------------------------------------------------------------------------
 (2) _timer0SetPrescaler                                   2     0      2     161
                                              0 BANK3      2     0      2
 ---------------------------------------------------------------------------------
 (1) _mobusRTUmasterInit                                   0     0      0       0
                   _UARTTransRcvInit
 ---------------------------------------------------------------------------------
 (2) _UARTTransRcvInit                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _compressorMotor_Init                                 0     0      0       0
                           _PWM_Init
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (2) _Timer2_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     198
                                              4 BANK3      2     2      0
                            _LCD_CMD
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (2) _LCD_CMD                                              3     3      0     110
                                              1 BANK3      3     3      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (2) _LCD_DATA                                             1     1      0      88
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  6     6      0   65998
                                             37 BANK1      6     6      0
             _HCH1000_freqToHumidity
                          _LCD_Clear
                     _LCD_Set_Cursor
                   _LCD_Write_String
                _Master_DataHandling
                 _Master_SendCommand
                       _SpeedControl
                       _TC72_toFloat
                      _UARTrcvString
                        _displayData
 ---------------------------------------------------------------------------------
 (5) _displayData                                          4     4      0   32690
                                             33 BANK1      4     4      0
                          _LCD_Clear
                     _LCD_Set_Cursor
                   _LCD_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _sprintf                                             41    36      5   31476
                                             72 BANK0      5     0      5
                                              0 BANK1     33    33      0
                            ___awdiv
                            ___fladd
                             ___fleq
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (7) _scale                                               19    15      4    7713
                                             26 BANK0     19    15      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (8) ___awmod                                              6     2      4    1208
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              8     4      4    1364
                                              6 COMMON     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (7) _fround                                              18    14      4    5720
                                             26 BANK0     18    14      4
                            ___flmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (8) ___lbmod                                              6     5      1     387
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (8) ___lbdiv                                              4     3      1     390
                                              6 COMMON     4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (7) __tdiv_to_l_                                         15     9      6     455
                                              0 COMMON     9     3      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (7) __div_to_l_                                          15     7      8     455
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     396
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___llmod                                             10     2      8     615
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (7) ___lldiv                                             14     6      8     466
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (7) ___fltol                                             10     6      4     457
                                             45 BANK0     10     6      4
                            ___flmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (7) ___flneg                                              4     0      4     121
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (7) ___flge                                              12     4      8     790
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (7) ___fleq                                              12     4      8     394
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (6) _LCD_Write_String                                     7     5      2     496
                                              6 COMMON     7     5      2
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (7) _LCD_Write_Char                                       5     5      0     178
                                              1 COMMON     5     5      0
                         i1_LCD_DATA
 ---------------------------------------------------------------------------------
 (6) _LCD_Set_Cursor                                       6     5      1     608
                                              4 COMMON     6     5      1
                          i1_LCD_CMD
 ---------------------------------------------------------------------------------
 (6) _LCD_Clear                                            0     0      0     110
                          i1_LCD_CMD
 ---------------------------------------------------------------------------------
 (7) i1_LCD_CMD                                            3     3      0     110
                                              1 COMMON     3     3      0
                         i1_LCD_DATA
 ---------------------------------------------------------------------------------
 (8) i1_LCD_DATA                                           1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _UARTrcvString                                        5     3      2     220
                                              1 COMMON     5     3      2
                        _UARTrcvChar
 ---------------------------------------------------------------------------------
 (6) _UARTrcvChar                                          1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _TC72_toFloat                                        11     8      3   12403
                                             38 BANK0     11     8      3
                           ___awtoft
                            ___flmul
                            ___ftadd
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3    2972
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _SpeedControl                                        11     2      9    8647
                                             74 BANK0      2     2      0
                                              9 BANK1      9     0      9
                           _DC_Speed
                _proportionalControl
 ---------------------------------------------------------------------------------
 (6) _proportionalControl                                 11     2      9    8098
                                             72 BANK0      2     2      0
                                              0 BANK1      9     0      9
                            ___ftmul
                            ___ftsub
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             13     9      4     328
                                             59 BANK0     13     9      4
                            ___ftmul (ARG)
                            ___ftsub (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    4168
                                             38 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             12     6      6    3949
                                             26 BANK0     12     6      6
                            ___flmul (ARG)
                           ___ftpack
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    3285
                                             44 BANK0     15     9      6
                           ___ftpack
                            ___ftsub (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2805
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (6) _DC_Speed                                             4     2      2     164
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (5) _Master_SendCommand                                   4     3      1     900
                                             12 COMMON     1     0      1
                                              0 BANK0      3     3      0
                           _CRCcheck
                     _UARTsendString
 ---------------------------------------------------------------------------------
 (5) _Master_DataHandling                                  3     3      0    1941
                                              7 BANK0      3     3      0
                  _ReceiveData_Check
                     _SendErrorFrame
 ---------------------------------------------------------------------------------
 (6) _SendErrorFrame                                       5     2      3     955
                                             12 COMMON     2     2      0
                                              0 BANK0      3     0      3
                           _CRCcheck
                     _UARTsendString
 ---------------------------------------------------------------------------------
 (6) _UARTsendString                                       4     4      0     178
                                              1 COMMON     4     4      0
                       _UARTsendChar
 ---------------------------------------------------------------------------------
 (7) _UARTsendChar                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _ReceiveData_Check                                    9     7      2     797
                                             12 COMMON     2     0      2
                                              0 BANK0      7     7      0
                           _CRCcheck
 ---------------------------------------------------------------------------------
 (6) _CRCcheck                                            12    10      2     512
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (5) _HCH1000_freqToHumidity                               3     0      3    7983
                                             72 BANK0      3     0      3
                            ___flmul
                            ___flsub
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (7) ___xxtofl                                            14    10      4     550
                                              0 COMMON    14    10      4
 ---------------------------------------------------------------------------------
 (7) ___flsub                                              8     0      8    2637
                                             64 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (8) ___fladd                                             20    12      8    2288
                                             44 BANK0     20    12      8
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (8) ___flmul                                             26    18      8    4698
                                              0 BANK0     26    18      8
                          __Umul8_16
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (9) __Umul8_16                                            9     7      2     799
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCD_CMD
       _LCD_DATA
     _LCD_DATA
   _compressorMotor_Init
     _PWM_Init
     _Timer2_Init
   _mobusRTUmasterInit
     _UARTTransRcvInit
   _timer0TimerInit
     _timer0SetPrescaler

 _ISR (ROOT)
   _HCH1000_freqToHumidity
     ___flmul
       __Umul8_16
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
       ___xxtofl (ARG)
     ___flsub
       ___fladd
         _fround (ARG)
           ___flmul
           ___lbdiv
           ___lbmod
       ___flmul (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _LCD_Clear
     i1_LCD_CMD
       i1_LCD_DATA
   _LCD_Set_Cursor
     i1_LCD_CMD
   _LCD_Write_String
     _LCD_Write_Char
       i1_LCD_DATA
   _Master_DataHandling
     _ReceiveData_Check
       _CRCcheck
     _SendErrorFrame
       _CRCcheck
       _UARTsendString
         _UARTsendChar
   _Master_SendCommand
     _CRCcheck
     _UARTsendString
   _SpeedControl
     _DC_Speed
     _proportionalControl
       ___ftmul
         ___ftpack
         ___ftsub (ARG)
           ___ftadd
             ___flmul (ARG)
             ___ftpack (ARG)
             ___xxtofl (ARG)
       ___ftsub
       ___fttol
         ___ftmul (ARG)
         ___ftsub (ARG)
   _TC72_toFloat
     ___awtoft
       ___ftpack
     ___flmul
     ___ftadd
     ___xxtofl
   _UARTrcvString
     _UARTrcvChar
   _displayData
     _LCD_Clear
     _LCD_Set_Cursor
     _LCD_Write_String
     _sprintf
       ___awdiv
       ___fladd
       ___fleq
       ___flge
       ___flmul
       ___flneg
       ___flsub
       ___fltol
         ___flmul (ARG)
         _scale (ARG)
           ___awdiv
           ___awmod
           ___flmul
       ___lldiv
       ___llmod
       ___wmul
       ___xxtofl
       __div_to_l_
       __tdiv_to_l_
       _fround
       _isdigit
       _scale

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      6      28       9       41.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     2B      4F       7       98.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4D      50       5      100.0%
BITBANK0            50      0       1       4        1.2%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      D5      12        0.0%
ABS                  0      0      D5       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sun Aug 20 10:35:12 2023

                                pc 0002                       ?_displayData 0070  
                               l75 1A72                       ___awdiv@sign 007B  
             _compressorMotor_Init 1998                                 fsr 0004  
              ___wmul@multiplicand 0072                __Umul8_16@word_mpld 0076  
                     ___ftadd@exp1 0045                       ___ftadd@exp2 0044  
                     ___ftadd@sign 0043                                l230 1E8E  
                              l232 1E94                                l240 1EE3  
                              l233 1E99                                l170 1B9E  
                              l234 1E9E                                l171 1BA6  
                              l235 1EA3                                l172 1BA9  
                              l236 1EA8                                l173 1BB1  
                              l237 1EAD                                l238 1EB2  
                              l167 1B90                                l239 1EB7  
                              l168 1B93                                l169 1B9B  
                              _GIE 005F                                _RB1 0031  
                              _RD1 0041                                _RD2 0042  
                              _RD3 0043                                _RD4 0044  
                              _RD5 0045                                _RD6 0046  
                              _RD7 0047                                _PS0 0408  
                              _PR2 0092                                _PS1 0409  
                              _PS2 040A                                _ISR 1642  
                              _PSA 040B                                _RX9 00C6  
                              _TX9 04C6                                fsr0 0004  
                              indf 0000                       ___awmod@sign 0075  
                  ??_UARTrcvString 0073            UARTrcvString@rcv_buffer 0075  
                   i1LCD_DATA@Data 0070                       ___flmul@aexp 002E  
                     ___flmul@bexp 0033                    _timer0TimerInit 19A6  
                     ___flmul@sign 002D                       ___flmul@temp 0038  
                     ___flmul@prod 0034                    __end_of_LCD_CMD 1A56  
                      ?i1_LCD_DATA 0070                               ?_ISR 0070  
                   _LCD_Set_Cursor 0803                       ___fltol@exp1 0056  
                             l5003 1EC4                               l5005 1EDE  
              LCD_Write_String@str 0076                               l4659 1EBC  
                             STR_1 10BC                               STR_2 10AF  
                             STR_3 10A0                               _BRGH 04C2  
                             _CREN 00C4                               _T0CS 040D  
                             _PEIE 005E                               _RCIE 0465  
                             _RCIF 0065                               i1l70 16F9  
                             u7257 1176                               _OERR 00C1  
                             u7267 1181                               u7277 1191  
                             u7287 11A0                               u7297 1A4E  
                             _TMR0 0001                               _SPEN 00C7  
                             _TRMT 04C1                               _TXEN 04C5  
                             _SYNC 04C4                      ?_TC72_toFloat 0046  
               _Master_SendCommand 10CD                  ?_LCD_Write_String 0076  
                             _main 1A56                       ___ftpack@arg 0070  
                     ___ftpack@exp 0073                               _send 0378  
                             _str1 01A1                               _str2 0190  
                             btemp 007E                               start 0012  
               ??_LCD_Write_String 0078                   ??_UARTsendString 0071  
                     _sprintf$1224 00A5                ?_Master_SendCommand 007C  
                     ___ftmul@cntr 0059                       ___ftmul@sign 005A  
                      CRCcheck@crc 007A                        CRCcheck@buf 0075  
                      CRCcheck@len 0070                        CRCcheck@pos 0076  
                            ??_ISR 00C5                   __end_of_LCD_DATA 1BB5  
                     ___fttol@exp1 0067              ?_compressorMotor_Init 0070  
                     ___fttol@lval 0063                   __end_of_DC_Speed 1B5B  
                 __end_of_LCD_Init 11D1                   __end_of_CRCcheck 07FF  
          ?_HCH1000_freqToHumidity 0068                      ___fltol@sign1 0055  
                  __end_of___fladd 07B1                              ?_main 0070  
                  __end_of___awdiv 1F3D                    __end_of___lbdiv 1B10  
                  __end_of___flneg 197F                    __end_of___ftadd 1800  
                  __end_of___awmod 1E41                    __end_of___lbmod 1ACE  
                  __end_of___flmul 0CD2                    __end_of___flsub 1A91  
                  __end_of___fltol 1166                    __end_of___lldiv 1F9B  
                  __end_of___ftmul 1642                    ___awdiv@divisor 0076  
                  __end_of___llmod 1E8D                    __end_of___ftsub 1A1C  
                  __end_of___fttol 1323                              i1l130 1C13  
                            i1l116 07B8                              i1l118 07D4  
                            i1l170 19F4                              i1l171 19F8  
                            i1l172 19F9                              i1l173 19FD  
                            i1l167 19EC                              i1l168 19EF  
                            i1l361 1CCE                              i1l169 19F3  
                            i1l294 1957                              i1l800 1224  
                            i1l537 0589                              i1l547 1AD8  
                            i1l491 00B4                              i1l812 1148  
                            i1l914 12FD                              i1l770 1D99  
                            i1l931 1AC8                              i1l764 14E2  
                            i1l837 17A5                              i1l774 133D  
                            i1l769 1D7F                              i1l777 13A3  
                            i1l873 1585                              i1l799 121C  
                  ___awdiv@counter 007A                              _RCREG 001A  
         __end_of_UARTTransRcvInit 19CE                              _SPBRG 0099  
                            _TRISD 0088                 _mobusRTUmasterInit 1966  
                            _TXREG 0019               ??_Master_SendCommand 007D  
           __end_of_LCD_Set_Cursor 0842                      ___awtoft@sign 007B  
                   SpeedControl@Kp 00A9                    __end_of_dpowers 10A0  
                            _ftemp 00CE                              _scale 0CD2  
                  __end_of_isdigit 1998                      ___ftpack@sign 0074  
              ?_mobusRTUmasterInit 0070                     ??_TC72_toFloat 0049  
                            pclath 000A                   __end_of_PWM_Init 194F  
           SendErrorFrame@function 0022                  _ReceiveData_Check 1BE5  
                            status 0003                              wtemp0 007E  
                  __end_of_sprintf 05B4                    ___lbdiv@divisor 0076  
                  ___lbdiv@counter 0078         HCH1000_freqToHumidity@freq 0068  
               ?_ReceiveData_Check 007C                     _LCD_Write_Char 1DAD  
                  __initialization 0015                   ??_SendErrorFrame 007C  
                     __end_of_main 1A73               ??_mobusRTUmasterInit 01B2  
   __end_of_HCH1000_freqToHumidity 1C58                ??_ReceiveData_Check 007E  
        proportionalControl@nowVal 00A6            __end_of_timer0TimerInit 19B8  
                           ??_main 01B8                      ___fttol@sign1 0062  
                __end_of_LCD_Clear 198A                          ??_LCD_CMD 01B3  
               _timer0SetPrescaler 1E8D                    ?_LCD_Set_Cursor 0074  
                           _CCP1M2 00BA                             _CCP1M3 00BB  
                 ___llmod@dividend 0074                             ?_scale 003A  
                __end_ofi1_LCD_CMD 19E5                             _CCPR1L 0015  
                 ___awdiv@dividend 0078                   __end_of___awtoft 1A39  
                 __end_of___ftpack 123D                ?_timer0SetPrescaler 01B2  
        __end_of_ReceiveData_Check 1C1C                             i1l1051 0651  
                           i1l1045 05FC                             i1l1160 1B22  
                           i1l1049 0671                             i1l1066 0728  
                           i1l1185 13D3                             i1l4001 14CE  
                           i1l3205 1B1A                             i1l4013 14F1  
                           i1l4005 14DE                             i1l1198 1427  
                           i1l1199 1431                             i1l3311 172F  
                           i1l4103 110F                             i1l4201 12B9  
                           i1l4041 1F5D                             i1l3233 1EF9  
                           i1l3307 1728                             i1l4131 1157  
                           i1l4123 1144                             i1l4019 1AD0  
                           i1l3251 1F25                             i1l3243 1F01  
                           i1l3227 1EEE                             i1l4301 1425  
                           i1l3173 11E0                             i1l4141 15B1  
                           i1l3341 177C                             i1l3317 173E  
                           i1l4205 12C2                             i1l4053 1F92  
                           i1l3405 1AB3                             i1l3245 1F0F  
                           i1l3503 065A                             i1l3431 05CB  
                           i1l4303 1416                             i1l3191 120C  
                           i1l3343 1780                             i1l3335 176B  
                           i1l4223 12E9                             i1l4119 1134  
                           i1l4039 1F4D                             i1l3255 1F30  
                           i1l3271 1E00                             i1l5007 0106  
                           i1l3521 067F                             i1l3505 065C  
                           i1l3513 066B                             i1l3185 1207  
                           i1l3177 11EC                             i1l3169 11D9  
                           i1l3361 17C9                             i1l3353 17A1  
                           i1l3329 1756                             i1l4065 1DAB  
                           i1l4049 1F85                             i1l3611 07A8  
                           i1l3531 06A0                             i1l3435 05CE  
                           i1l4315 144E                             i1l3179 11F1  
                           i1l4147 15C5                             i1l3371 17EC  
                           i1l3339 1777                             i1l4235 130C  
                           i1l4227 12F9                             i1l4075 1357  
                           i1l4251 1E49                             i1l3259 1F38  
                           i1l3283 1E0D                             i1l3275 1E07  
                           i1l4411 00F2                             i1l3605 07A0  
                           i1l3437 05D6                             i1l3189 121A  
                           i1l4181 161A                             i1l4165 15E4  
                           i1l3357 17B7                             i1l3349 1795  
                           i1l4253 1E59                             i1l4261 1E84  
                           i1l3285 1E1B                             i1l3293 1E34  
                           i1l4501 03BF                             i1l4405 00CB  
                           i1l4413 010E                             i1l3631 0A10  
                           i1l3551 071A                             i1l3455 05F1  
                           i1l4239 131A                             i1l4079 137D  
                           i1l4407 00EB                             i1l3721 0C4F  
                           i1l3713 0C1B                             i1l3633 0A12  
                           i1l3609 07A4                             i1l3529 069E  
                           i1l3465 0606                             i1l4177 160A  
                           i1l4169 15F4                             i1l4345 0823  
                           i1l4361 1C5A                             i1l4257 1E77  
                           i1l3385 1AF6                             i1l3297 1E3C  
                           i1l3289 1E29                             i1l3715 0C38  
                           i1l3651 0A35                             i1l3635 0A1A  
                           i1l3539 06B0                             i1l3459 05F4  
                           i1l4291 13F6                             i1l4283 13E2  
                           i1l3803 1A94                             i1l4195 1A06  
                           i1l4099 1106                             i1l3387 1AFF  
                           i1l4523 043D                             i1l4515 03CC  
                           i1l4419 011E                             i1l4371 005C  
                           i1l3725 0C51                             i1l3661 0A4B  
                           i1l3653 0A3D                             i1l3581 075B  
                           i1l3573 0750                             i1l4277 13CB  
                           i1l4605 1BF1                             i1l3397 1B0E  
                           i1l4517 042C                             i1l4461 0275  
                           i1l4453 0219                             i1l4445 01B3  
                           i1l4429 0160                             i1l3735 0C83  
                           i1l3567 0749                             i1l3559 073A  
                           i1l3575 0752                             i1l3495 0624  
                           i1l4607 1BF3                             i1l3911 1509  
                           i1l3745 0CB2                             i1l3753 0CC5  
                           i1l3649 0A33                             i1l3585 075D  
                           i1l4297 1411                             i1l4289 13E4  
                           i1l4617 1C16                             i1l4705 1A26  
                           i1l3905 1996                             i1l4553 0565  
                           i1l4537 0472                             i1l4529 0459  
                           i1l4473 02DC                             i1l4457 0236  
                           i1l4561 0579                             i1l4393 00B6  
                           i1l3739 0C99                             i1l3595 0790  
                           i1l4619 1C17                             i1l4715 1CBF  
                           i1l3915 1512                             i1l4483 031E  
                           i1l4387 0073                             i1l4741 10F9  
                           i1l4813 12A5                             i1l3853 09B9  
                           i1l4573 059F                             i1l4469 02C1  
                           i1l4581 05AF                             i1l4389 00AF  
                           i1l4901 1668                             i1l4719 1CC8  
                           i1l3951 1581                             i1l3847 0926  
                           i1l4559 0574                             i1l4487 0380  
                           i1l3793 07FA                             i1l3785 07E2  
                           i1l4673 1962                             i1l3937 155E  
                           i1l3929 153E                             i1l4489 0382  
                           i1l3787 07E9                             i1l3947 1571  
                           i1l3875 0E41                             i1l4579 0044  
                           i1l4907 1680                             i1l4781 1BBE  
                           i1l4765 1D0A                             i1l4749 1CDD  
                           i1l3965 145F                             i1l3893 0FD5  
                           i1l3869 0DBB                             i1l4909 1681  
                           i1l4775 1BBF                             i1l3991 14BA  
                           i1l3983 1492                             i1l3959 1594  
                           i1l3887 0F4F                             i1l3879 0E6C  
                           i1l4919 16E3                             i1l3969 1468  
                           i1l4779 1BC1                             i1l4799 1BE3  
                           u410_25 176C                             u500_25 0C2A  
                           u413_25 1781                             u407_25 1757  
                           u440_20 0645                             u416_25 1796  
                           u602_25 1118                             u426_25 1AB6  
                           u507_25 0C6E                             u451_25 06A4  
                           u443_25 0660                             u531_25 093C  
              _proportionalControl 1D1D                             u452_23 06C2  
                           u508_25 0C8C                             u516_25 07D7  
                           u620_25 161B                             u532_25 097C  
                           u540_25 0DD1                             u453_21 06DB  
                           u453_22 06DC                             u453_23 06E1  
                           u453_24 06E2                             u509_25 0CA4  
                           u453_25 06E7                             u517_25 07E3  
                           u373_25 122B                             u365_25 11E5  
                           u621_25 1623                             u525_25 1DB8  
                           u605_25 1135                             u533_25 09C4  
                           u541_25 0E0C                             u453_26 06E8  
                           u454_20 06EF                             u454_21 06F0  
                           u454_22 06F5                             u454_23 06F6  
                           u438_25 0638                             u382_25 1F04  
                           u550_25 0FD8                             u542_25 0E44  
                           u439_20 0644                             u519_25 07C1  
                           u367_25 1200                             u615_25 15F5  
                           u631_25 1302                             u711_25 1CEB  
                           u527_25 085A                             u376_25 1B23  
                           u616_25 15FD                             u608_25 114D  
                           u528_25 08A1                             u384_25 1F10  
                           u392_25 1E10                             u544_25 0E90  
                           u536_25 0CFC                             u369_25 1213  
                           u625_25 12C9                             u561_25 1572  
                           u529_25 08E9                             u385_25 1F1C  
                           u545_25 0ECB                             u537_25 0D37  
                           u490_25 0B44                             u458_25 073C  
                           u570_25 14BC                             u386_25 1F26  
                           u394_25 1E21                             u546_25 0F12  
                           u538_25 0D7E                             u730_27 1DC8  
                           u651_25 1439                             u643_25 13ED  
                           u635_25 1E4D                             u555_25 1540  
                           u395_25 1E2A                             u731_27 1DD4  
                           u468_25 077A                             u628_25 12EA  
                           u716_25 1243                             u580_25 1AD9  
                           u564_25 158A                             u556_25 1551  
                           u548_25 0F65                             u732_27 1DE4  
                           u645_25 1409                             u637_25 1E67  
                           u581_25 1AE0                             u557_25 155F  
                           u549_25 0FA0                             u733_27 1DF0  
                           u494_25 0BD0                             u718_25 1260  
                           u638_25 1E78                             u574_25 14CF  
                           u734_27 19DC                             u487_25 0AEF  
                           u647_25 141E                             u655_25 080D  
                           u592_25 1DA7                             u584_25 1F51  
                           u568_25 1494                             u497_25 0C07  
                           u657_25 082D                             u577_25 14E7  
                           u569_25 14A9                             u681_25 0389  
                           u665_25 00C3                             u498_25 0C1F  
                           u586_25 1F5F                             u690_25 052F  
                           u682_25 03B8                             u674_25 023F  
                           u587_25 1F74                             u675_25 0280  
                           u596_21 1368                             u596_22 1369  
                           u596_23 136E                             u596_24 136F  
                           u596_25 1374                             u588_25 1F86  
                           u684_25 03D4                             u596_26 1375  
                           _TMR0IE 005D                             _TMR0IF 005A  
                           u598_21 138E                             u598_22 138F  
                           u598_23 1394                             u598_24 1395  
                           u598_25 139A                             u686_25 0446  
                           u678_25 02BF                             u598_26 139B  
                           u695_25 0590                             u687_25 0453  
                           _TMR2ON 0092                             u696_25 059D  
                           u689_25 04CF                             _TRISB1 0431  
                           _TRISC2 043A                             _TRISD1 0441  
                           _TRISD2 0442                             _TRISD3 0443  
                           _TRISC6 043E                             _TRISC7 043F  
                 __end_of___xxtofl 1457             __end_of_LCD_Write_Char 1DF6  
                    ??_Timer2_Init 01B2                   __end_of__powers_ 1044  
                           ___flge 1323                             ___fleq 1D65  
           ??_compressorMotor_Init 01B2                          ??___fladd 0054  
                           ___wmul 1ACE                          ??___awdiv 007A  
                        ??___lbdiv 0077                          ??___flneg 0074  
                        ??___ftadd 0040                          ??___awmod 0074  
                        ??___lbmod 0071                          ??___flmul 0028  
                        ??___flsub 007E                          ??___fltol 0051  
                        ??___lldiv 0078                          ??___ftmul 0052  
                        ??___llmod 0078                          ??___ftsub 007E  
                        ??___fttol 005F               ??_timer0SetPrescaler 01B4  
                           _fhumid 00CB             Master_DataHandling@buf 0029  
                           _fround 0842                             _memory 00D1  
             ?_proportionalControl 00A0                   ___awdiv@quotient 007C  
                  ___awmod@divisor 0070                    ___awmod@counter 0074  
                     ?_UARTrcvChar 0070              ___ftmul@f3_as_product 0056  
                        ??_isdigit 0070                             saved_w 007E  
                        ??_sprintf 00A0                   ___lbdiv@dividend 0077  
                  LCD_Set_Cursor@c 0074                  UARTsendString@str 0074  
                  LCD_Set_Cursor@r 0076                         ___flge@ff1 0070  
                       ___flge@ff2 0074                          ?_LCD_DATA 0070  
                     ___xxtofl@arg 007A                       ___xxtofl@exp 0079  
                     ___xxtofl@val 0070                         ___fleq@ff1 0070  
                       ___fleq@ff2 0074                    ___lbmod@divisor 0070  
                        ?_DC_Speed 0070            __end_of__initialization 003C  
                  ___lbmod@counter 0074                          ?_LCD_Init 0070  
                        ?_CRCcheck 0070                         ___flneg@f1 0070  
                       ___ftadd@f1 003A                         ___ftadd@f2 003D  
                     i1LCD_CMD@CMD 0073                         ___fltol@f1 004D  
                  ?_LCD_Write_Char 0070                         ___awtoft@c 0078  
                       ___ftmul@f1 004C                         ___ftmul@f2 004F  
                       ___ftsub@f1 0049                         ___ftsub@f2 0046  
                       ___fttol@f1 005B                     __pcstackCOMMON 0070  
                     __pidataBANK1 0800        timer0SetPrescaler@prescaler 01B2  
 proportionalControl@controlSignal 0068                      __end_of_scale 1000  
            ??_proportionalControl 007E                __end_of_Timer2_Init 1956  
             __end_of_TC72_toFloat 12AC         Master_SendCommand@function 007C  
                 ___lbdiv@quotient 0079                   ?_timer0TimerInit 01B4  
                        ?_PWM_Init 0070          Master_DataHandling@eframe 0027  
                    CRCcheck@index 0078                         __div_to_l_ 1457  
                     ??i1_LCD_DATA 0070                    __div_to_l_@exp1 0025  
                  __div_to_l_@cntr 0024                            ??_scale 003E  
                  __div_to_l_@quot 0020                         __pbssBANK0 006D  
                       __pbssBANK1 00CB                         __pbssBANK3 0190  
                       ??_LCD_DATA 01B2                         ??_DC_Speed 0072  
                       ??_LCD_Init 01B6                         ??_CRCcheck 0072  
                      _ModbusFrame 00E3                      __div_to_l_@f1 0070  
                    __div_to_l_@f2 0074                  __end_of__Umul8_16 1B33  
                       __pmaintext 1A56                            ?___flge 0070  
                          ?___fleq 0070                            ?___wmul 0070  
                       __pintentry 0004                 __end_ofi1_LCD_DATA 19FF  
                          ?_fround 003A                          ?___awtoft 0078  
                        ?___ftpack 0070                      ?_SpeedControl 00A9  
                       ??_PWM_Init 01B2                            _T2CKPS0 0090  
                          _T2CKPS1 0091                            _LCD_CMD 1A39  
                ?_UARTTransRcvInit 0070                          ?___xxtofl 0070  
               ??_UARTTransRcvInit 01B2              __end_of_UARTrcvString 1D1D  
                       __stringtab 1000                  TC72_toFloat@count 0050  
                __end_of__npowers_ 1078                         _scale$1223 0048  
                      _Timer2_Init 194F                            ___fladd 05B4  
                          ___awdiv 1EE4                            ___lbdiv 1AEF  
                          ___flneg 1976                            ___ftadd 1705  
                          ___awmod 1DF6                            ___lbmod 1AAF  
                          ___flmul 09F9                            ___flsub 1A73  
                          ___fltol 10FF                            ___lldiv 1F3D  
                          ___ftmul 159D                            ___llmod 1E41  
                          ___ftsub 19FF                            ___fttol 12AC  
                   ??_SpeedControl 007E                         ??___awtoft 007B  
                       ??___ftpack 0075                   ??_LCD_Set_Cursor 0075  
                          __ptext1 19A6                            __ptext2 1E8D  
                          __ptext3 1966                            __ptext4 19B8  
                          __ptext5 1998                            __ptext6 194F  
                          __ptext7 1949                            __ptext8 1166  
                          __ptext9 1A39                        ?__div_to_l_ 0070  
                          _dpowers 1078                  DC_Speed@dutyCycle 0070  
                          _isdigit 198A                         ??___xxtofl 0074  
                 ___awmod@dividend 0072                          _LCD_Clear 197F  
                SendErrorFrame@CRC 007C                            _sprintf 0040  
                          clrloop0 196F               end_of_initialization 003C  
                    ?_UARTsendChar 0070                         _rcv_buffer 00DA  
                        i1_LCD_CMD 19CE                         _targetTemp 00EC  
                  ___lldiv@divisor 0070                    ___lldiv@counter 007D  
             ReceiveData_Check@CRC 0022               ReceiveData_Check@str 0026  
                   __tdiv_to_l_@f1 0070                     __tdiv_to_l_@f2 0073  
                    ??__tdiv_to_l_ 0076                         LCD_CMD@CMD 01B5  
                      ___fladd@grs 005F                   ___lbmod@dividend 0073  
                    ___xxtofl@sign 0078                         ?_LCD_Clear 0070  
            SpeedControl@targetVal 00AC               SendErrorFrame@Eframe 0020  
                LCD_Write_String@i 007B                   ??_LCD_Write_Char 0071  
                   ??_UARTsendChar 0070                        ___lbmod@rem 0075  
                     _TC72_toFloat 123D                        ___flmul@grs 002F  
                       ?i1_LCD_CMD 0070                        _CCP1CONbits 0017  
                      ___ftmul@exp 0055                      ??_displayData 00C1  
                   __end_of___flge 13B6                     __end_of___fleq 1DAD  
                   __end_of___wmul 1AEF                   _LCD_Write_String 1C58  
                    __pbitbssBANK0 0378                     __end_of_fround 09F9  
              _Master_DataHandling 1BB5  _uart_str_idx@PIC16F877A_UART$F165 00D3  
_uart_str_idx@PIC16F877A_UART$F291 006D                start_initialization 0015  
                      __end_of_ISR 1705                __end_of__tdiv_to_l_ 159D  
                     _count_modbus 00D5               __end_of_SpeedControl 1CD8  
                  ___llmod@divisor 0070               ?_Master_DataHandling 0070  
                  ___llmod@counter 0079           ??_HCH1000_freqToHumidity 007E  
            proportionalControl@Kp 00A0        __end_of_proportionalControl 1D65  
                         ??___flge 0078                           ??___fleq 0078  
                         ??___wmul 0074                          __Umul8_16 1B10  
                      __pdataBANK1 00EC           timer0TimerInit@prescaler 01B4  
                         ??_fround 003E                      sprintf@tmpval 00B5  
                        ___fladd@a 0050                          ___fladd@b 004C  
              __end_of_displayData 2000                           ?_LCD_CMD 0070  
                       fround@prec 004B                          ___flmul@a 0024  
                        ___flmul@b 0020                          ___flsub@a 0060  
                        ___flsub@b 0064                          ___latbits 0002  
                    __pcstackBANK0 0020                      __pcstackBANK1 00A0  
                    __pcstackBANK3 01B2                        ??_LCD_Clear 0074  
        Master_SendCommand@sla_add 0020                        sprintf@flag 00AD  
                      sprintf@eexp 00B3                        ??i1_LCD_CMD 0071  
                      sprintf@fval 00BA                        sprintf@prec 00BE  
            ??_Master_DataHandling 007E                 SpeedControl@PWMval 006A  
                     ?_Timer2_Init 0070                           ?___fladd 004C  
                         ?___awdiv 0076                           ?___lbdiv 0076  
                         ?___flneg 0070                           ?___ftadd 003A  
                         ?___awmod 0070                           ?___lbmod 0070  
                         ?___flmul 0020                           ?___flsub 0060  
                         ?___fltol 004D                           ?___lldiv 0070  
                         ?___ftmul 004C                           ?___llmod 0070  
                         ?___ftsub 0046                          __npowers_ 1044  
                         ?___fttol 005B                         ?__Umul8_16 0070  
             __end_of_UARTsendChar 195E                     _UARTsendString 1A91  
                        __pstrings 1000                        __tdiv_to_l_ 14FA  
               SpeedControl@nowVal 00AF                       ??__div_to_l_ 0078  
                         ?_isdigit 0070                   TC72_toFloat@temp 0046  
                         ?_sprintf 0068                           _LCD_DATA 1B88  
                         _DC_Speed 1B33                  interrupt_function 0004  
                         _LCD_Init 1166                           _CRCcheck 07B1  
                   ___wmul@product 0074                          clear_ram0 196E  
               __end_of__div_to_l_ 14FA       proportionalControl@targetVal 00A3  
           __end_of_UARTsendString 1AAF                        _displayData 1F9B  
                      __stringbase 100F                           _PWM_Init 1949  
                ___wmul@multiplier 0070                      ??_UARTrcvChar 0070  
       __end_of_Master_SendCommand 10FF                     _SendErrorFrame 1B5B  
         __end_of_LCD_Write_String 1C95                 TC72_toFloat@result 004D  
                ??_timer0TimerInit 01B6                        _count_motor 00D9  
              LCD_Write_Char@High4 0074         __end_of_mobusRTUmasterInit 196E  
          ReceiveData_Check@eframe 0024                    ?_UARTsendString 0070  
                      ??__Umul8_16 0072                    UARTsendString@i 0072  
              UARTrcvString@length 0071                           ___awtoft 1A1C  
                         ___ftpack 11D1             __end_of_SendErrorFrame 1B88  
                      _fround$1221 0047                        _fround$1222 0043  
               __end_of__stringtab 1010                        _isdigit$961 0070  
                     _SpeedControl 1C95                         sprintf@len 00AB  
           _HCH1000_freqToHumidity 1C1C                         sprintf@val 00AF  
                         ___xxtofl 13B6                           __ptext10 1B88  
                         __ptext11 1642                           __ptext20 1AEF  
                         __ptext12 1F9B                           __ptext21 14FA  
                         __ptext13 0040                           __ptext30 1C58  
                         __ptext22 1457                           __ptext14 0CD2  
                         __ptext31 1DAD                           __ptext23 1ACE  
                         __ptext15 1DF6                           __ptext40 1C95  
                         __ptext32 0803                           __ptext24 1E41  
                         __ptext16 1EE4                           __ptext41 1D1D  
                         __ptext33 197F                           __ptext25 1F3D  
                         __ptext17 198A                           __ptext50 1B5B  
                         __ptext42 12AC                           __ptext34 19CE  
                         __ptext26 10FF                           __ptext18 0842  
                         __ptext51 1A91                           __ptext43 19FF  
                         __ptext35 19E5                           __ptext27 1976  
                         __ptext19 1AAF                           __ptext60 1B10  
                         __ptext52 1956                           __ptext44 1705  
                         __ptext36 1CD8                           __ptext28 1323  
                         __ptext53 1BE5                           __ptext45 159D  
                         __ptext37 195E                           __ptext29 1D65  
                         __ptext54 07B1                           __ptext46 11D1  
                         __ptext38 123D                           __ptext55 1C1C  
                         __ptext47 1B33                           __ptext39 1A1C  
                         __ptext56 13B6                           __ptext48 10CD  
                         __ptext57 1A73                           __ptext49 1BB5  
                         __ptext58 05B4                           __ptext59 09F9  
              __end_of_UARTrcvChar 1966                           __powers_ 1010  
                    _UARTrcvString 1CD8       __end_of_compressorMotor_Init 19A6  
                 _UARTTransRcvInit 19B8         __end_of_timer0SetPrescaler 1EE4  
              LCD_Set_Cursor@High4 0078                    ?_SendErrorFrame 0020  
               LCD_Write_Char@Data 0075                 LCD_Write_Char@Low4 0073  
                         isdigit@c 0071                     ?_UARTrcvString 0071  
                         scale@scl 004C                         i1_LCD_DATA 19E5  
                         intlevel1 0000                          sprintf@ap 00A9  
                        sprintf@cp 00AA                   __tdiv_to_l_@exp1 0025  
                 __tdiv_to_l_@cntr 0024                          sprintf@sp 00B9  
                 __tdiv_to_l_@quot 0020                       _UARTsendChar 1956  
                 ___lldiv@dividend 0074                          stringcode 100A  
                     _uart_str_idx 00D7              Master_SendCommand@CRC 0021  
                    UARTsendChar@c 0070                 LCD_Set_Cursor@Low4 0077  
               LCD_Set_Cursor@Temp 0079              ReceiveData_Check@CRCH 0021  
            ReceiveData_Check@CRCL 0020                       ?__tdiv_to_l_ 0070  
           __Umul8_16@multiplicand 0070                           sprintf@c 00C0  
                         sprintf@f 0068                        _UARTrcvChar 195E  
                     LCD_DATA@Data 01B2                   ___lldiv@quotient 0079  
                     UARTrcvChar@c 0070                           stringdir 100A  
                         stringtab 1000        __end_of_Master_DataHandling 1BE5  
                    ___fladd@signs 005C                       ___fladd@aexp 005D  
                     ___fladd@bexp 005E               __Umul8_16@multiplier 0078  
                __Umul8_16@product 0074  
